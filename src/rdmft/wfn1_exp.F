c-----------------------------------------------------------------------
c
      subroutine wfn1_exp(alpha,g_x,g_t,g_exp)
      implicit none
C>
C> \brief Calculate exp(alpha*X) where X is a matrix
C>
C> Calculate the exponent of a matrix by expanding the exponent as a
C> Taylor series. The algoritm uses only matrix-matrix multiplications.
C>
C> The result is returned in the global array g_exp, and g_t is used
C> as a scratch array. However, to avoid copying data the handles in
C> g_t and g_exp will be repeatedly swapped around. I.e. on return
C> g_t and g_exp may refer to different arrays than on input.
C>
C> Note also that the series is evaluated from the last term towards
C> the first term. This is done for reasons of accuracy as the last
C> term is the smallest one, and numerically the most accurate way
C> to sum a set of numbers in finite precision is to sum them in the
C> order of increasing value. The reason is that this preserves the
C> least significant digits as much as possible.
C>
C> Note that despite the above considerations calculating the
C> exponent of a matrix is notoriously difficult [1]. Hence this 
C> method is effective only under special conditions, in particular
C> alpha*||g_x|| should be less than some bound to ensure that the
C> Taylor series has no "hump". Even then the result cannot be expected
C> to be accurate to machine precision, the result may only be expected
C> to be an non-defective matrix.
C>
C> References
C>
C> [1] C. Moler, C. van Loan, "Nineteen dubious ways to compute the
C>     exponential of a matrix, twenty-five years later." 
C>     SIAM reviews (2003) 45, pp. 3-49. Doi: 10.1137/S00361445024180
C>
#include "errquit.fh"
#include "global.fh"
c
      double precision, intent(in) :: alpha
c
      integer, intent(in)    :: g_x
      integer, intent(inout) :: g_t
      integer, intent(inout) :: g_exp
c
      double precision :: dnormX  ! The norm of alpha*X
      double precision :: dnormXn ! The norm of the n-th term in the
                                  ! Taylor series of exp(alpha*X)
c
      integer :: itypx, nrowx, ncolx
      integer :: mxpow ! the maximum power
      integer :: pow   ! the current power
c
      integer :: iproc, nproc
      integer :: ii ! counter
      integer :: ilo, ihi, jlo, jhi ! local block limits
c
      character*9 pname
      parameter(pname="wfn1_exp:")
c
      nproc = ga_nnodes()
      iproc = ga_nodeid()
c
      call ga_inquire(g_x,itypx,nrowx,ncolx)
      if (nrowx.ne.ncolx) then
        call errquit(pname//" matrix g_x not square",0,UERR)
      endif
      call ga_normf(g_x,dnormX)
      dnormX = alpha*dnormX
      dnormXn = sqrt(1.0d0*nrowx)
      mxpow = 0
      do while (abs(dnormXn).gt.1.0d-20)
        mxpow = mxpow + 1
        dnormXn = dnormXn*dnormX/dble(mxpow)
      enddo
c
      call ga_copy(g_x,g_exp)
      call ga_scale(g_exp,alpha/dble(mxpow))
      call ga_distribution(g_exp,iproc,ilo,ihi,jlo,jhi)
      do ii = max(ilo,jlo),min(ihi,jhi)
        call ga_acc(g_exp,ii,ii,ii,ii,1.0d0,1,1.0d0)
      enddo
      do pow = mxpow-1,1,-1
c
c       Inter change the global array handles
c
        ii    = g_exp
        g_exp = g_t
        g_t   = ii
c
c       Generate the summed series from pow to mxpow (apart from a
c       factor)
c
        call ga_dgemm('n','n',nrowx,nrowx,nrowx,alpha/dble(pow),g_x,g_t,
     &                0.0d0,g_exp)
        call ga_distribution(g_exp,iproc,ilo,ihi,jlo,jhi)
        do ii = max(ilo,jlo),min(ihi,jhi)
          call ga_acc(g_exp,ii,ii,ii,ii,1.0d0,1,1.0d0)
        enddo
      enddo
      end
c
c-----------------------------------------------------------------------
c
      subroutine wfn1_tst_exp(alpha,g_x,g_t,g_exp)
      implicit none
C>
C> \brief A test driver for wfn1_exp
C>
C> This module uses wfn1_exp to generate a unitary matrix by taken the
C> exponent of a skew-symmetric matrix. This routine calls through to
C> wfn1_exp and checks whether the resulting matrix is actually unitary.
C>
#include "errquit.fh"
#include "global.fh"
#include "stdio.fh"
c
      double precision, intent(in) :: alpha
c
      integer, intent(in)    :: g_x
      integer, intent(inout) :: g_t
      integer, intent(inout) :: g_exp
c
      integer :: itypt, nrowt, ncolt
      integer :: iproc, nproc
      integer :: ii ! counter
      integer :: ilo, ihi, jlo, jhi ! local block limits
c
      double precision :: dnormT
c
      character*13 pname
      parameter(pname="wfn1_tst_exp:")
c
      nproc = ga_nnodes()
      iproc = ga_nodeid()
c
      call wfn1_exp(alpha,g_x,g_t,g_exp)
c
      call ga_inquire(g_exp,itypt,nrowt,ncolt)
      call ga_dgemm('t','n',nrowt,nrowt,nrowt,1.0d0,g_exp,g_exp,
     &              0.0d0,g_t)
      call ga_distribution(g_t,iproc,ilo,ihi,jlo,jhi)
      do ii = max(ilo,jlo),min(ihi,jhi)
        call ga_acc(g_t,ii,ii,ii,ii,-1.0d0,1,1.0d0)
      enddo
      call ga_normf(g_t,dnormT)
      if (dnormT/(nrowt*ncolt).gt.1.0d-14) then
        if (iproc.eq.0) then
          write(LuOut,'(" Error in wfn1_exp: ",f24.15)')
     &          dnormT/(nrowt*ncolt)
        endif
        call ga_print(g_x)
        call ga_print(g_exp)
      endif
      end
c
c-----------------------------------------------------------------------
