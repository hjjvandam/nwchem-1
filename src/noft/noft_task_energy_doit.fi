!-----------------------------------------------------------------------
!> \brief The main driver for Natural Orbital Functional Theory
!>
!> This function is the main driver for Natural Orbital Functional
!> Theory (NOFT) calculations.
!>
!> @param[in] rtdb The runtime database handle
!>
!> \return .TRUE. if the calculation converged, and .FALSE. otherwise
!>
      logical function noft_task_energy_doit(rtdb)
      implicit none
      integer, intent(in) :: rtdb
!
!     Local
!
#include "errquit.fh"
#include "stdio.fh"
#include "noft_solver_options.fh"
#include "printlevels.fh"
!
      type(noft_energy_tp)       :: noft_energy
      type(noft_files_tp)        :: noft_vectors
      type(noft_instances_tp)    :: noft_instances
      type(noft_lindep_tp)       :: noft_lindep
      type(noft_operators_tp)    :: noft_oper
      type(noft_parameter_tp)    :: noft_params
      type(noft_wavefunction_tp) :: noft_wavefunction
      logical                    :: oconv
!
!     Code
!
      noft_task_energy_doit = .false.
      call util_print_push
      call util_print_set_level(print_debug)
      call util_print_rtdb_load(rtdb,'noft')
      call noft_print_header(rtdb,luout)
      call noft_load_lindep(rtdb,noft_lindep)
      call noft_load_params(rtdb,noft_params)
      call noft_load_vectors(rtdb,noft_vectors)
      call noft_load_geometry_basis(rtdb,noft_instances)
      call noft_set_nao(noft_instances,noft_params)
      call noft_set_nuclear_energy(noft_instances,noft_params)
      call noft_set_num_electrons(noft_instances,noft_params)
      call noft_print_basis(noft_instances)
      call noft_print_geometry(noft_instances)
      call noft_create_operators(noft_params,noft_oper)
      call noft_initialize_integrals(rtdb,noft_instances)
      call noft_compute_operators(noft_instances,noft_oper)
      call noft_create_wavefunction(noft_params,noft_wavefunction)
      call noft_orthogonalizing_transformation(noft_params,noft_oper,
     &                                         noft_wavefunction)
      call noft_adjust_wavefunction(noft_params,noft_wavefunction)
      if (noft_vectors%movecs_in.eq."atomic") then
        call noft_guess_wavefunction(rtdb,noft_instances,noft_params,
     &                               noft_oper,noft_wavefunction)
      else
        call errquit("invalid initial wavefunction",10,CAPMIS_ERR)
      endif
      call noft_finalize_integrals()
      call noft_ortho_operators(noft_wavefunction,noft_oper)
      if (noft_params%solver.eq.monte_carlo) then
        call noft_solve_monte_carlo(noft_params,noft_instances,
     &                              noft_oper,noft_wavefunction,
     &                              noft_energy,oconv)
        noft_task_energy_doit = oconv
      else
        call errquit("invalid solver selection",20,CAPMIS_ERR)
      endif
      call noft_save_convergence(rtdb,oconv)
      call noft_save_energy(rtdb,noft_energy)
      call noft_destroy_operators(noft_oper)
      call noft_destroy_wavefunction(noft_wavefunction)
      call noft_finalize_instances(noft_instances)
      call util_print_pop
      end function noft_task_energy_doit
c-----------------------------------------------------------------------
