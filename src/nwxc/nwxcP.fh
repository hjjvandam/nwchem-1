C  \ingroup nwxc
C  @{
C 
C  \brief Private data for the DFT functional library.
C 
C  This file contains private data for the DFT functional library.
C  The data items in question are data structures specifying the 
C  currently active density functional, as well as identifiers for
C  specific functionals.
C 
C  Specific functionals are identified by integer parameters. These
C  parameters are fixed at compile time. The functionals should always
C  be referred to by their identifier and never by their value.
C 
      integer NWXCP_HFXC         !< The Hartree-Fock exchange
      parameter (NWXCP_HFXC = 1)
c
      integer NWXCP_MP2C         !< The MP2 correlation
      parameter (NWXCP_MP2C = NWXCP_HFXC + 1)
c
      integer NWXCP_X_SLATER     !< The Slater exchange functional
      parameter (NWXCP_X_SLATER = NWXCP_MP2C + 1)
c
      integer NWXCP_X_PBE        !< The PBE exchange functional
      parameter (NWXCP_X_PBE = NWXCP_X_SLATER + 1)
c
      integer NWXCP_X_REVPBE     !< The REVPBE exchange functional
      parameter (NWXCP_X_REVPBE = NWXCP_X_PBE + 1)
c
      integer NWXCP_X_RPBE       !< The RPBE exchange functional
      parameter (NWXCP_X_RPBE = NWXCP_X_REVPBE + 1)
c
      integer NWXCP_X_VS98       !< The VS98 exchange functional
      parameter (NWXCP_X_VS98 = NWXCP_X_RPBE + 1)
c
      integer NWXCP_C_PW91LDA    !< The PW91 LDA correlation functional
      parameter (NWXCP_C_PW91LDA = NWXCP_X_VS98 + 1)
c
      integer NWXCP_C_PBE        !< The PBE correlation functional
      parameter (NWXCP_C_PBE = NWXCP_C_PW91LDA + 1)
c
      integer NWXCP_C_VS98       !< The VS98 correlation functional
      parameter (NWXCP_C_VS98 = NWXCP_C_PBE + 1)
c
      integer NWXCP_C_VWN5       !< The VWN5 correlation functional
      parameter (NWXCP_C_VWN5 = NWXCP_C_VS98 + 1)
c
      integer NWXCP_LDA          !< The LDA functional 
                                 !< (exchange and correlation)
      parameter (NWXCP_LDA = NWXCP_C_VWN5 + 1)
c
      integer NWXCP_PBE          !< The PBE functional 
                                 !< (exchange and correlation)
      parameter (NWXCP_PBE = NWXCP_LDA + 1)
c
      integer NWXCP_REVPBE       !< The REVPBE functional 
                                 !< (exchange and correlation)
      parameter (NWXCP_REVPBE = NWXCP_PBE + 1)
c
      integer NWXCP_RPBE         !< The RPBE functional 
                                 !< (exchange and correlation)
      parameter (NWXCP_RPBE = NWXCP_REVPBE + 1)
c
      integer NWXCP_VS98         !< The VS98 functional 
                                 !< (exchange and correlation)
      parameter (NWXCP_VS98 = NWXCP_RPBE + 1)
c
      integer NWXCP_PBE_D1       !< The PBE-D1 functional 
                                 !< (exchange and correlation)
      parameter (NWXCP_PBE_D1 = NWXCP_VS98 + 1)
C  
C  Internally the functional specification will be stored using 
C  a collection of datastructures. For specific terms that the library
C  cannot evaluate, e.g. Hartree-Fock exchange or MP2, we store the
C  corresponding weight in a separate variable.
C 
C  The terms that the library does evaluate are kept in a list. The list
C  consists of an array of identifiers and a list of weights. In 
C  addition the length of the list is kept. This allows the functional
C  evaluation to be performed by simply looping over all the specified
C  terms.
C 
C  Note that the Coulomb operator for the Coulomb Attenuated functionals
C  is written as
C  \f{eqnarray*}{
C    \frac{1}{r_{12}} = \frac{1-[\alpha+\beta\mathrm{erf}(\gamma r_{12})]}{r_{12}}
C                     + \frac{\alpha+\beta\mathrm{erf}(\gamma r_{12})}{r_{12}}
C  \f}
C 
      logical nwxc_depends_on_rho   !< Does the functional depend on the
                                    !< density?
      logical nwxc_depends_on_gamma !< Does the functional depend on the
                                    !< density gradient?
      logical nwxc_depends_on_tau   !< Does the functional depend on the
                                    !< kinetic energy density?
      integer NWXC_MAX_F !< The maximum number of terms in a functional
      parameter (NWXC_MAX_F = 50)
      integer          nwxc_num_f             !< The actual number of
                                              !< functional terms
      integer          nwxc_ids(NWXC_MAX_F)   !< The functional
                                              !< identifiers
      double precision nwxc_wght_hf           !< The Hartree-Fock
                                              !< exchange weight
      double precision nwxc_wght_mp2          !< The MP2 weight
      double precision nwxc_cam_alpha         !< The CAM alpha
      double precision nwxc_cam_beta          !< The CAM beta
      double precision nwxc_cam_gamma         !< The CAM gamma
      logical          nwxc_cam_srhfex        !< Do the short range part
                                              !< with Hartree-Fock
                                              !< exchange?
      integer          nwxc_disp_id           !< The dispersion term
                                              !< identifier
      double precision nwxc_disp_alpha        !< The dispersion damping
                                              !< parameter
      double precision nwxc_disp_s6           !< The dispersion strength
                                              !< R^-6 term
      double precision nwxc_disp_s8           !< The dispersion strength
                                              !< R^-8 term
      double precision nwxc_rho_tol           !< The tolerance on the density
      double precision nwxc_wghts(NWXC_MAX_F) !< The functional weights
C
C Users can specify functionals by listing individual terms or they
C may use higher level aliases, e.g. B3LYP. B3LYP would be evaluated
C by the library by summing the following contributions:
C - 0.19 vwn_1_rpa
C - 0.81 lyp
C - 0.80 slater
C - 0.72 becke88 (including the nonlocal part)
C (The Hartree-Fock exchange term is not evaluated by the library but
C by the application code). However a user who specified B3LYP might
C get confused if we print the list of the above 4 terms in the output.
C So to be able to echo the input in terms that the user will recognize
C we need to keep the functional as specified by the user in addition
C to the functional as it will be evaluated. The nwxc_usr_* variables
C keep track of the functional definition as specified on the input.
C
      integer nwxc_usr_num
      integer nwxc_usr_ids(NWXC_MAX_F)
      double precision nwxc_usr_wghts(NWXC_MAX_F)
      logical nwxc_on
c
      common /nwxc_func_spec/
     +       nwxc_rho_tol,
     +       nwxc_cam_alpha,nwxc_cam_beta,nwxc_cam_gamma,
     +       nwxc_disp_alpha,nwxc_disp_s6,nwxc_disp_s8,
     +       nwxc_wght_hf,nwxc_wght_mp2,nwxc_usr_wghts,
     +       nwxc_wghts,nwxc_ids,nwxc_num_f,nwxc_usr_num,
     +       nwxc_disp_id,nwxc_usr_ids,nwxc_cam_srhfex,
     +       nwxc_depends_on_rho,nwxc_depends_on_gamma,
     +       nwxc_depends_on_tau
     +      ,nwxc_on
C
C  @}
