c $Id$
C     Source : http://www.netlib.org/toms/654  (FA-03-18-11)
c     Source  :http://www.ccp4.ac.uk/dist/src/edstats/src/dgratio.f
C     ALGORITHM 654, COLLECTED ALGORITHMS FROM ACM.
C     THIS WORK PUBLISHED IN TRANSACTIONS ON MATHEMATICAL SOFTWARE,
C     VOL. 13, NO. 3, P. 318.
C     PROGRAM GTST(OUTPUT,TAPE6=OUTPUT)
C ----------------------------------------------------------------------
C     SAMPLE PROGRAM EMPLOYING GRATIO AND GAMINV. GIVEN A AND X,
C     P AND Q ARE COMPUTED BY GRATIO. THEN FOR A, THE INVERSE OF
C     P AND Q, DENOTED BY XN, IS OBTAINED BY GAMINV. D IS THE
C     RELATIVE DIFFERENCE BETWEEN X AND XN.
C
C     NO DATA IS READ. THE OUTPUT FOR THE PROGRAM IS WRITTEN ON
C     UNIT 6. THE FIRST STATMENT OF THIS TEXT MAY BE USED TO
C     BEGIN THE PROGRAM FOR THE CDC 6000-7000 SERIES COMPUTERS.
C
C     THE LAST FUNCTION IN THIS PACKAGE, SPMPAR, MUST BE DEFINED
C     FOR THE PARTICULAR COMPUTER BEING USED. FOR DETAILS SEE THE
C     IN-LINE DOCUMENTATION OF SPMPAR.
C ----------------------------------------------------------------------
c      SUBROUTINE TEST()
c      implicit none
c      integer I,L
c      real A,X0,X,P,Q,XN,D,IERR
c      WRITE (6,1)
c    1 FORMAT(11H1   A     X,10X,1HP,15X,1HQ,15X,2HXN,13X,
c     *       10HD     IERR)
c    2 FORMAT(2F6.2,3E16.6,E12.2,I5)
c    3 FORMAT(1H0)
C
c      A = 0.1
c      X0 = 0.0
c      DO 20 L = 1,10
c      WRITE (6,3)
c      X = 0.1
c         DO 10 I = 1,10
c         CALL DGRATIO (A,X,P,Q,0)
c         CALL GAMINV (A,XN,X0,P,Q,IERR)
c         D = ABS((X - XN)/X)
c         WRITE (6,2) A,X,P,Q,XN,D,IERR
c   10    X = X + 0.1
c   20 A = A + 0.1
c 
c      STOP
c      END
c
      SUBROUTINE DGRATIO(A,X,ANS,QANS,IND)
C     ALGORITHM 654, COLLECTED ALGORITHMS FROM ACM.
C     THIS WORK PUBLISHED IN TRANSACTIONS ON MATHEMATICAL SOFTWARE,
C     VOL. 13, NO. 3, P. 318.
C ----------------------------------------------------------------------
C        EVALUATION OF THE INCOMPLETE GAMMA RATIO FUNCTIONS
C                      P(A,X) AND Q(A,X)
C
C                        ----------
C
C     IT IS ASSUMED THAT A AND X ARE NONNEGATIVE, WHERE A AND X
C     ARE NOT BOTH 0.
C
C     ANS AND QANS ARE VARIABLES. GRATIO ASSIGNS ANS THE VALUE
C     P(A,X) AND QANS THE VALUE Q(A,X). IND MAY BE ANY INTEGER.
C     IF IND = 0 THEN THE USER IS REQUESTING AS MUCH ACCURACY AS
C     POSSIBLE (UP TO 14 SIGNIFICANT DIGITS). OTHERWISE, IF
C     IND = 1 THEN ACCURACY IS REQUESTED TO WITHIN 1 UNIT OF THE
C     6-TH SIGNIFICANT DIGIT, AND IF IND.NE.0,1 THEN ACCURACY
C     IS REQUESTED TO WITHIN 1 UNIT OF THE 3RD SIGNIFICANT DIGIT.
C
C     ERROR RETURN ...
C        ANS IS ASSIGNED THE VALUE 2 WHEN A OR X IS NEGATIVE,
C     WHEN A*X = 0, OR WHEN P(A,X) AND Q(A,X) ARE INDETERMINANT.
C     P(A,X) AND Q(A,X) ARE COMPUTATIONALLY INDETERMINANT WHEN
C     X IS EXCEEDINGLY CLOSE TO A AND A IS EXTREMELY LARGE.
C ----------------------------------------------------------------------
C     WRITTEN BY ALFRED H. MORRIS, JR.
C        NAVAL SURFACE WEAPONS CENTER
C        DAHLGREN, VIRGINIA
C     --------------------
      IMPLICIT NONE
      INTEGER I,IND,IOP,M,N
      REAL*8 A,A2N,A2NM1,ACC,ALOG10,AM0,AMN,AN,AN0,ANS,APN,B2N,B2NM1,C,
     &C0,C1,C2,C3,C4,C5,C6,CMA,D10,D20,D30,D40,D50,D60,D70,E,E0,G,H,J,L,
     &R,RT2PIN,RTA,RTPI,RTX,QANS,S,SUM,T,T1,THIRD,TOL,TWOA,U,W,X,X0,Y,Z
      REAL*8 ACC0(3),BIG(3),E00(3),X00(3),WK(20)
      REAL*8 D0(13),D1(12),D2(10),D3(8),D4(6),D5(4),D6(2)
      REAL SPMPAR
      REAL*8 DERFC1,DGAM1,DGAMMA,DREXP,DRLOG
C     --------------------
      DATA ACC0(1)/5D-15/, ACC0(2)/5D-7/, ACC0(3)/5D-4/
      DATA BIG(1)/20D0/, BIG(2)/14D0/, BIG(3)/10D0/
      DATA E00(1)/.25D-3/, E00(2)/.25D-1/, E00(3)/.14D0/
      DATA X00(1)/31D0/, X00(2)/17D0/, X00(3)/9.7D0/
C     --------------------
C     ALOG10 = LN(10)
C     RT2PIN = 1/SQRT(2*PI)
C     RTPI   = SQRT(PI)
C     --------------------
      DATA ALOG10/2.30258509299405D0/
      DATA RT2PIN/.398942280401433D0/
      DATA RTPI  /1.77245385090552D0/
      DATA THIRD /.333333333333333D0/
C     --------------------
      DATA D0(1) / .833333333333333D-1/, D0(2) /-.148148148148148D-1/,
     &D0(3) / .115740740740741D-2/, D0(4) / .352733686067019D-3/,
     &D0(5) /-.178755144032922D-3/, D0(6) / .391926317852244D-4/,
     &D0(7) /-.218544851067999D-5/, D0(8) /-.185406221071516D-5/,
     &D0(9) / .829671134095309D-6/, D0(10)/-.176659527368261D-6/,
     &D0(11)/ .670785354340150D-8/, D0(12)/ .102618097842403D-7/,
     &D0(13)/-.438203601845335D-8/
C     --------------------
      DATA D10   /-.185185185185185D-2/, D1(1) /-.347222222222222D-2/,
     &D1(2) / .264550264550265D-2/, D1(3) /-.990226337448560D-3/,
     &D1(4) / .205761316872428D-3/, D1(5) /-.401877572016461D-6/,
     &D1(6) /-.180985503344900D-4/, D1(7) / .764916091608111D-5/,
     &D1(8) /-.161209008945634D-5/, D1(9) / .464712780280743D-8/,
     &D1(10)/ .137863344691572D-6/, D1(11)/-.575254560351770D-7/,
     &D1(12)/ .119516285997781D-7/
C     --------------------
      DATA D20   / .413359788359788D-2/, D2(1) /-.268132716049383D-2/,
     &D2(2) / .771604938271605D-3/, D2(3) / .200938786008230D-5/,
     &D2(4) /-.107366532263652D-3/, D2(5) / .529234488291201D-4/,
     &D2(6) /-.127606351886187D-4/, D2(7) / .342357873409614D-7/,
     &D2(8) / .137219573090629D-5/, D2(9) /-.629899213838006D-6/,
     &D2(10)/ .142806142060642D-6/
C     --------------------
      DATA D30   / .649434156378601D-3/, D3(1) / .229472093621399D-3/,
     &D3(2) /-.469189494395256D-3/, D3(3) / .267720632062839D-3/,
     &D3(4) /-.756180167188398D-4/, D3(5) /-.239650511386730D-6/,
     &D3(6) / .110826541153473D-4/, D3(7) /-.567495282699160D-5/,
     &D3(8) / .142309007324359D-5/
C     --------------------
      DATA D40   /-.861888290916712D-3/, D4(1) / .784039221720067D-3/,
     &D4(2) /-.299072480303190D-3/, D4(3) /-.146384525788434D-5/,
     &D4(4) / .664149821546512D-4/, D4(5) /-.396836504717943D-4/,
     &D4(6) / .113757269706784D-4/
C     --------------------
      DATA D50   /-.336798553366358D-3/, D5(1) /-.697281375836586D-4/,
     &D5(2) / .277275324495939D-3/, D5(3) /-.199325705161888D-3/,
     &D5(4) / .679778047793721D-4/
C     --------------------
      DATA D60   / .531307936463992D-3/, D6(1) /-.592166437353694D-3/,
     &D6(2) / .270878209671804D-3/
C     --------------------
      DATA D70   / .344367606892378D-3/
C     --------------------
C**** E IS A MACHINE DEPENDENT CONSTANT. E IS THE SMALLEST
C     FLOATING POINT NUMBER FOR WHICH 1.0 + E.GT.1.0 .
C
      E = SPMPAR(1)
C
C     --------------------
      IF (A.LT.0D0 .OR. X.LT.0D0) GOTO 400
      IF (A.EQ.0D0 .AND. X.EQ.0D0) GOTO 400
      IF (A*X.EQ.0D0) GOTO 331
C
      IOP = IND + 1
      IF (IOP.NE.1 .AND. IOP.NE.2) IOP = 3
      ACC = MAX(ACC0(IOP),E)
      E0 = E00(IOP)
      X0 = X00(IOP)
C
C            SELECT THE APPROPRIATE ALGORITHM
C
      IF (A.GE.1D0) GOTO 10
      IF (A.EQ..5D0) GOTO 320
      IF (X.LT.1.1) GOTO 110
      T1 = A*LOG(X) - X
      U = A*EXP(T1)
      IF (U.EQ.0D0) GOTO 310
      R = U*(1D0 + DGAM1(A))
      GOTO 170
C
10    IF (A.GE.BIG(IOP)) GOTO 20
      IF (A.GT.X .OR. X.GE.X0) GOTO 11
      TWOA = 2D0*A
      M = INT(TWOA)
      IF (TWOA.NE.M) GOTO 11
      I = M/2
      IF (A.EQ.I) GOTO 140
      GOTO 150
11    T1 = A*LOG(X) - X
      R = EXP(T1)/DGAMMA(A)
      GOTO 30
C
20    L = X/A
      IF (L.EQ.0D0) GOTO 300
      S = .5D0 - L + .5D0
      Z = DRLOG(L)
      IF (Z.GE.700D0/A) GOTO 330
      Y = A*Z
      RTA = SQRT(A)
      IF (ABS(S).LE.E0/RTA) GOTO 250
      IF (ABS(S).LE..4D0) GOTO 200
C
      T = (1D0/A)**2
      T1 = (((.75D0*T - 1D0)*T + 3.5D0)*T - 105D0)/(A*1260D0)
      T1 = T1 - Y
      R = RT2PIN*RTA*EXP(T1)
C
30    IF (R.EQ.0D0) GOTO 331
      IF (X.LE.MAX(A,ALOG10)) GOTO 50
      IF (X.LT.X0) GOTO 170
      GOTO 80
C
C                 TAYLOR SERIES FOR P/R
C
50    APN = A + 1D0
      T = X/APN
      WK(1) = T
      DO  N = 2,20
        APN = APN + 1D0
        T = T*(X/APN)
        IF (T.LE.1D-3) GOTO 60
        WK(N) = T
      ENDDO
      N = 20
C
60    SUM = T
      TOL = .5D0*ACC
61    APN = APN + 1D0
      T = T*(X/APN)
      SUM = SUM + T
      IF (T.GT.TOL) GOTO 61
C
      DO M = 1,N - 1
        N = N - 1
        SUM = SUM + WK(N)
      ENDDO
      ANS = (R/A)*(1D0 + SUM)
      QANS = .5D0 - ANS + .5D0
      RETURN
C
C                 ASYMPTOTIC EXPANSION
C
80    AMN = A - 1D0
      T = AMN/X
      WK(1) = T
      DO N = 2,20
        AMN = AMN - 1D0
        T = T*(AMN/X)
        IF (ABS(T).LE.1D-3) GOTO 90
        WK(N) = T
      ENDDO
      N = 20
C
90    SUM = T
91    IF (ABS(T).LE.ACC) GOTO 100
      AMN = AMN - 1D0
      T = T*(AMN/X)
      SUM = SUM + T
      GOTO 91
C
100   DO  M = 1,N - 1
        N = N - 1
        SUM = SUM + WK(N)
      ENDDO
      QANS = (R/X)*(1D0 + SUM)
      ANS = .5D0 - QANS + .5D0
      RETURN
C
C             TAYLOR SERIES FOR P(A,X)/X**A
C
110   AN = 3D0
      C = X
      SUM = X/(A + 3D0)
      TOL = 3D0*ACC/(A + 1D0)
111   AN = AN + 1D0
      C = -C*(X/AN)
      T = C/(A + AN)
      SUM = SUM + T
      IF (ABS(T).GT.TOL) GOTO 111
      J = A*X*((SUM/6D0 - .5D0/(A + 2D0))*X + 1D0/(A + 1D0))
C
      Z = A*LOG(X)
      H = DGAM1(A)
      G = 1D0 + H
      IF (X.LT..25D0) GOTO 120
      IF (A.LT.X/2.59D0) GOTO 135
      GOTO 130
120   IF (Z.GT.-.13394D0) GOTO 135
C
130   W = EXP(Z)
      ANS = W*G*(.5D0 - J + .5D0)
      QANS = .5D0 + (.5D0 - ANS)
      RETURN
C
135   L = DREXP(Z)
      W = L + 1D0
      QANS = (W*J - L)*G - H
      IF (QANS.LT.0D0) GOTO 310
      ANS = .5D0 - QANS + .5D0
      RETURN
C
C             FINITE SUMS FOR Q WHEN A.GE.1
C                 AND 2*A IS AN INTEGER
C
140   SUM = EXP(-X)
      T = SUM
      N = 1
      C = 0D0
      GOTO 160
C
150   RTX = SQRT(X)
      SUM = DERFC1(0,RTX)
      T = EXP(-X)/(RTPI*RTX)
      N = 0
      C = -.5D0
C
160   IF (N.EQ.I) GOTO 161
      N = N + 1
      C = C + 1D0
      T = (X*T)/C
      SUM = SUM + T
      GOTO 160
161   QANS = SUM
      ANS = .5D0 - QANS + .5D0
      RETURN
C
C              CONTINUED FRACTION EXPANSION
C
170   TOL = MAX(5D0*E,ACC)
      A2NM1 = 1D0
      A2N = 1D0
      B2NM1 = X
      B2N = X + (1D0 - A)
      C = 1D0
171   A2NM1 = X*A2N + C*A2NM1
      B2NM1 = X*B2N + C*B2NM1
      AM0 = A2NM1/B2NM1
      C = C + 1D0
      CMA = C - A
      A2N = A2NM1 + CMA*A2N
      B2N = B2NM1 + CMA*B2N
      AN0 = A2N/B2N
      IF (ABS(AN0 - AM0).GE.TOL*AN0) GOTO 171
C
      QANS = R*AN0
      ANS = .5D0 - QANS + .5D0
      RETURN
C
C                GENERAL TEMME EXPANSION
C
200   IF (ABS(S).LE.2D0*E .AND. A*E*E.GT.3.28D-3) GOTO 400
      C = EXP(-Y)
      W = .5D0*DERFC1(1,SQRT(Y))
      U = 1D0/A
      Z = SQRT(Z + Z)
      IF (L.LT.1D0) Z = -Z
      IF (IOP - 2) 210,220,230
C
210   IF (ABS(S).LE.1D-3) GOTO 260
      C0 = ((((((((((((D0(13) * Z + D0(12)) * Z + D0(11)) * Z
     &+ D0(10)) * Z + D0(9)) * Z + D0(8)) * Z + D0(7)) * Z
     &+ D0(6)) * Z + D0(5)) * Z + D0(4)) * Z + D0(3)) * Z
     &+ D0(2)) * Z + D0(1)) * Z - THIRD
      C1 = (((((((((((D1(12) * Z + D1(11)) * Z + D1(10)) * Z
     &+ D1(9)) * Z + D1(8)) * Z + D1(7)) * Z + D1(6)) * Z
     &+ D1(5)) * Z + D1(4)) * Z + D1(3)) * Z + D1(2)) * Z
     &+ D1(1)) * Z + D10
      C2 = (((((((((D2(10) * Z + D2(9)) * Z + D2(8)) * Z
     &+ D2(7)) * Z + D2(6)) * Z + D2(5)) * Z + D2(4)) * Z
     &+ D2(3)) * Z + D2(2)) * Z + D2(1)) * Z + D20
      C3 = (((((((D3(8) * Z + D3(7)) * Z + D3(6)) * Z
     &+ D3(5)) * Z + D3(4)) * Z + D3(3)) * Z + D3(2)) * Z
     &+ D3(1)) * Z + D30
      C4 = (((((D4(6) * Z + D4(5)) * Z + D4(4)) * Z + D4(3)) * Z
     &+ D4(2)) * Z + D4(1)) * Z + D40
      C5 = (((D5(4) * Z + D5(3)) * Z + D5(2)) * Z + D5(1)) * Z
     &+ D50
      C6 = (D6(2) * Z + D6(1)) * Z + D60
      T  = ((((((D70*U + C6)*U + C5)*U + C4)*U + C3)*U + C2)*U
     &+ C1)*U + C0
      GOTO 240
C
220   C0 = (((((D0(6) * Z + D0(5)) * Z + D0(4)) * Z + D0(3)) * Z
     &+ D0(2)) * Z + D0(1)) * Z - THIRD
      C1 = (((D1(4) * Z + D1(3)) * Z + D1(2)) * Z + D1(1)) * Z
     &+ D10
      C2 = D2(1) * Z + D20
      T  = (C2*U + C1)*U + C0
      GOTO 240
C
230   T  = ((D0(3) * Z + D0(2)) * Z + D0(1)) * Z - THIRD
C
240   IF (L.LT.1D0) GOTO 241
      QANS = C*(W + RT2PIN*T/RTA)
      ANS = .5D0 - QANS + .5D0
      RETURN
241   ANS = C*(W - RT2PIN*T/RTA)
      QANS = .5D0 - ANS + .5D0
      RETURN
C
C               TEMME EXPANSION FOR L = 1
C
250   IF (A*E**2.GT.3.28D-3) GOTO 400
      C = .5D0 - Y + .5D0
      W = (.5D0 - SQRT(Y)*(.5D0 - Y/3D0 + .5D0)/RTPI)/C
      U = 1D0/A
      Z = SQRT(2D0*Z)
      IF (L.LT.1D0) Z = -Z
      IF (IOP - 2) 260,270,280
C
260   C0 = ((((((D0(7) * Z + D0(6)) * Z + D0(5)) * Z + D0(4)) * Z
     &+ D0(3)) * Z + D0(2)) * Z + D0(1)) * Z - THIRD
      C1 = (((((D1(6) * Z + D1(5)) * Z + D1(4)) * Z + D1(3)) * Z
     &+ D1(2)) * Z + D1(1)) * Z + D10
      C2 = ((((D2(5) * Z + D2(4)) * Z + D2(3)) * Z + D2(2)) * Z
     &+ D2(1)) * Z + D20
      C3 = (((D3(4) * Z + D3(3)) * Z + D3(2)) * Z + D3(1)) * Z
     &+ D30
      C4 = (D4(2) * Z + D4(1)) * Z + D40
      C5 = (D5(2) * Z + D5(1)) * Z + D50
      C6 = D6(1) * Z + D60
      T  = ((((((D70*U + C6)*U + C5)*U + C4)*U + C3)*U + C2)*U
     &+ C1)*U + C0
      GOTO 240
C
270   C0 = (D0(2) * Z + D0(1)) * Z - THIRD
      C1 = D1(1) * Z + D10
      T  = (D20*U + C1)*U + C0
      GOTO 240
C
280   T  = D0(1) * Z - THIRD
      GOTO 240
C
C                     SPECIAL CASES
C
300   ANS = 0D0
      QANS = 1D0
      RETURN
C
310   ANS = 1D0
      QANS = 0D0
      RETURN
C
320   IF (X.GE..25D0) GOTO 321
      ANS = DERF(SQRT(X))
      QANS = .5D0 - ANS + .5D0
      RETURN
321   QANS = DERFC1(0,SQRT(X))
      ANS = .5D0 - QANS + .5D0
      RETURN
C
330   IF (ABS(S).LE.2D0*E) GOTO 400
331   IF (X.LE.A) GOTO 300
      GOTO 310
C
C                     ERROR RETURN
C
400   ANS = 2D0
      END
C
C
      REAL*8 FUNCTION DERF(X)
C     ******************************************************************
C     EVALUATION OF THE REAL ERROR FUNCTION
C     ******************************************************************
      IMPLICIT NONE
      REAL*8 AX,BOT,C,T,TOP,X,X2
      REAL*8 A(4),B(4),P(8),Q(8),R(5),S(5)
      DATA A(1)/-1.65581836870402D-4/, A(2)/3.25324098357738D-2/,
     &A(3)/1.02201136918406D-1/,  A(4)/1.12837916709552D0/
      DATA B(1)/4.64988945913179D-3/,  B(2)/7.01333417158511D-2/,
     &B(3)/4.23906732683201D-1/,  B(4)/1.00000000000000D0/
      DATA P(1)/-1.36864857382717D-7/, P(2)/5.64195517478974D-1/,
     &P(3)/7.21175825088309D0/,  P(4)/4.31622272220567D1/,
     &P(5)/1.52989285046940D2/,  P(6)/3.39320816734344D2/,
     &P(7)/4.51918953711873D2/,  P(8)/3.00459261020162D2/
      DATA Q(1)/1.00000000000000D0/,  Q(2)/1.27827273196294D1/,
     &Q(3)/7.70001529352295D1/,  Q(4)/2.77585444743988D2/,
     &Q(5)/6.38980264465631D2/,  Q(6)/9.31354094850610D2/,
     &Q(7)/7.90950925327898D2/,  Q(8)/3.00459260956983D2/
      DATA R(1)/2.10144126479064D0/,  R(2)/2.62370141675169D1/,
     &R(3)/2.13688200555087D1/,  R(4)/4.65807828718470D0/,
     &R(5)/2.82094791773523D-1/
      DATA S(1)/9.41537750555460D1/,  S(2)/1.87114811799590D2/,
     &S(3)/9.90191814623914D1/,  S(4)/1.80124575948747D1/,
     &S(5)/1.00000000000000D0/
      DATA C/5.64189583547756D-1/
C     -------------------
      AX=ABS(X)
      X2=AX**2
      IF (AX.GE..5D0) GOTO 10
      TOP=((A(1)*X2+A(2))*X2+A(3))*X2+A(4)
      BOT=((B(1)*X2+B(2))*X2+B(3))*X2+B(4)
      DERF=X*TOP/BOT
      RETURN
C
10    IF (AX.GT.4D0) GOTO 20
      TOP=((((((P(1)*AX+P(2))*AX+P(3))*AX+P(4))*AX+P(5))*AX
     &+P(6))*AX+P(7))*AX+P(8)
      BOT=((((((Q(1)*AX+Q(2))*AX+Q(3))*AX+Q(4))*AX+Q(5))*AX
     &+Q(6))*AX+Q(7))*AX+Q(8)
      DERF=1D0-EXP(-X2)*TOP/BOT
      IF (X.LT.0D0) DERF=-DERF
      RETURN
C
20    DERF=1D0
      IF (AX.GE.5.54D0) GOTO 21
      T=1D0/X2
      TOP=(((R(1)*T+R(2))*T+R(3))*T+R(4))*T+R(5)
      BOT=(((S(1)*T+S(2))*T+S(3))*T+S(4))*T+S(5)
      DERF=C-TOP/(X2*BOT)
      DERF=1D0-EXP(-X2)*DERF/AX
21    IF (X.LT.0D0) DERF=-DERF
      END
C
C
      REAL*8 FUNCTION DERFC1(IND,X)
C ----------------------------------------------------------------------
C     EVALUATION OF THE REAL COMPLEMENTARY ERROR FUNCTION
C
C        DERFC1(IND,X) = ERFC(X)            IF IND = 0
C        DERFC1(IND,X) = EXP(X^2)*ERFC(X)   OTHERWISE
C ----------------------------------------------------------------------
      IMPLICIT NONE
      INTEGER IND
      REAL*8 AX,BOT,C,T,TOP,X,X2
      REAL*8 A(4),B(4),P(8),Q(8),R(5),S(5)
      DATA A(1)/-1.65581836870402D-4/, A(2)/3.25324098357738D-2/,
     &A(3)/1.02201136918406D-1/,  A(4)/1.12837916709552D0/
      DATA B(1)/4.64988945913179D-3/,  B(2)/7.01333417158511D-2/,
     &B(3)/4.23906732683201D-1/,  B(4)/1.00000000000000D0/
      DATA P(1)/-1.36864857382717D-7/, P(2)/5.64195517478974D-1/,
     &P(3)/7.21175825088309D0/,  P(4)/4.31622272220567D1/,
     &P(5)/1.52989285046940D2/,  P(6)/3.39320816734344D2/,
     &P(7)/4.51918953711873D2/,  P(8)/3.00459261020162D2/
      DATA Q(1)/1.00000000000000D0/,  Q(2)/1.27827273196294D1/,
     &Q(3)/7.70001529352295D1/,  Q(4)/2.77585444743988D2/,
     &Q(5)/6.38980264465631D2/,  Q(6)/9.31354094850610D2/,
     &Q(7)/7.90950925327898D2/,  Q(8)/3.00459260956983D2/
      DATA R(1)/2.10144126479064D0/,  R(2)/2.62370141675169D1/,
     &R(3)/2.13688200555087D1/,  R(4)/4.65807828718470D0/,
     &R(5)/2.82094791773523D-1/
      DATA S(1)/9.41537750555460D1/,  S(2)/1.87114811799590D2/,
     &S(3)/9.90191814623914D1/,  S(4)/1.80124575948747D1/,
     &S(5)/1.00000000000000D0/
      DATA C/5.64189583547756D-1/
C     -------------------
      AX=ABS(X)
      X2=AX**2
      IF (AX.GE..47D0) GOTO 10
      TOP=((A(1)*X2+A(2))*X2+A(3))*X2+A(4)
      BOT=((B(1)*X2+B(2))*X2+B(3))*X2+B(4)
      DERFC1=1D0-X*TOP/BOT
      IF (IND.NE.0) DERFC1=EXP(X2)*DERFC1
      RETURN
C
10    IF (AX.GT.4D0) GOTO 20
      TOP=((((((P(1)*AX+P(2))*AX+P(3))*AX+P(4))*AX+P(5))*AX
     &+P(6))*AX+P(7))*AX+P(8)
      BOT=((((((Q(1)*AX+Q(2))*AX+Q(3))*AX+Q(4))*AX+Q(5))*AX
     &+Q(6))*AX+Q(7))*AX+Q(8)
      DERFC1=TOP/BOT
      IF (IND.EQ.0) GOTO 11
      IF (X.LT.0D0) DERFC1=2D0*EXP(X2)-DERFC1
      RETURN
11    DERFC1=EXP(-X2)*DERFC1
      IF (X.LT.0D0) DERFC1=2D0-DERFC1
      RETURN
C
20    IF (X.LE.-5.33D0) GOTO 30
      T=1D0/X2
      TOP=(((R(1)*T+R(2))*T+R(3))*T+R(4))*T+R(5)
      BOT=(((S(1)*T+S(2))*T+S(3))*T+S(4))*T+S(5)
      DERFC1=(C-TOP/(X2*BOT))/AX
      IF (IND.EQ.0) GOTO 11
      IF (X.LT.0D0) DERFC1=2D0*EXP(X2)-DERFC1
      RETURN
C
30    DERFC1=2D0
      IF (IND.NE.0) DERFC1=EXP(X2)*DERFC1
      END
C
C
      REAL*8 FUNCTION DREXP(X)
C     ------------------------------------------------------------------
C     COMPUTATION OF EXP(X) - 1
C     ------------------------------------------------------------------
      IMPLICIT NONE
      REAL*8 P1,P2,Q1,Q2,Q3,Q4,W,X
      DATA P1/ .914041914819518D-9/, P2/ .238082361044469D-1/,
     &Q1/-.499999999085958D0/, Q2/ .107141568980644D0/,
     &Q3/-.119041179760821D-1/, Q4/ .595130811860248D-3/
C     ------------------
      IF (ABS(X).LE..15D0) THEN
        DREXP = X*(((P2*X + P1)*X + 1D0)/((((Q4*X + Q3)*X + Q2)*X +
     &  Q1)*X + 1D0))
      ELSE
        W = EXP(X)
        IF (X.LE.0D0) THEN
          DREXP = W - 1D0
        ELSE
          DREXP = W*(.5D0 - 1D0/W + .5D0)
        ENDIF
      ENDIF
      END
C
C
      REAL*8 FUNCTION DRLOG(X)
C     -------------------
C     COMPUTATION OF  X - 1 - LN(X)
C     -------------------
      IMPLICIT NONE
      REAL*8 A,B,P0,P1,P2,Q1,Q2,R,T,U,W,W1,X
      DATA A/.566749439387324D-1/
      DATA B/.456512608815524D-1/
C     -------------------
      DATA P0/ .333333333333333D0/, P1/-.224696413112536D0/,
     &P2/ .620886815375787D-2/
      DATA Q1/-.127408923933623D1/, Q2/ .354508718369557D0/
C     -------------------
      IF (X.LT..61D0 .OR. X.GT.1.57D0) GOTO 100
      IF (X.LT..82D0) GOTO 10
      IF (X.GT.1.18D0) GOTO 20
C
C              ARGUMENT REDUCTION
C
      U = X - 1D0
      W1 = 0D0
      GOTO 30
C
10    U = X - .7D0
      U = U/.7D0
      W1 = A - U*.3D0
      GOTO 30
C
20    U = .75D0*X - 1D0
      W1 = B + U/3D0
C
C               SERIES EXPANSION
C
30    R = U/(U + 2D0)
      T = R**2
      W = ((P2*T + P1)*T + P0)/((Q2*T + Q1)*T + 1D0)
      DRLOG = 2D0*T*(1D0/(1D0 - R) - R*W) + W1
      RETURN
C
100   R = X - 1D0
      DRLOG = R - LOG(X)
      END
C
C
      REAL*8 FUNCTION DGAMMA(A)
C-----------------------------------------------------------------------
C
C         EVALUATION OF THE GAMMA FUNCTION FOR REAL ARGUMENTS
C
C                           -----------
C
C     GAMMA(A) IS ASSIGNED THE VALUE 0 WHEN THE GAMMA FUNCTION CANNOT
C     BE COMPUTED.
C
C-----------------------------------------------------------------------
C     WRITTEN BY ALFRED H. MORRIS, JR.
C          NAVAL SURFACE WEAPONS CENTER
C          DAHLGREN, VIRGINIA
C-----------------------------------------------------------------------
      INTEGER I,J,M,N
      REAL*8 A,BOT,D,G,LNX,PI,R1,R2,R3,R4,R5,S,T,TOP,W,X,Z
      REAL*8 P(7),Q(7)
      REAL EXPARG,SPMPAR
      REAL*8 DGLOG
C--------------------------
C     D = 0.5*(LN(2*PI) - 1)
C--------------------------
      DATA PI /3.1415926535898D0/
      DATA D /.41893853320467274178D0/
C--------------------------
      DATA P(1)/.539637273585445D-3/, P(2)/.261939260042690D-2/,
     &P(3)/.204493667594920D-1/, P(4)/.730981088720487D-1/,
     &P(5)/.279648642639792D0/, P(6)/.553413866010467D0/,
     &P(7)/1D0/
      DATA Q(1)/-.832979206704073D-3/, Q(2)/.470059485860584D-2/,
     &Q(3)/.225211131035340D-1/, Q(4)/-.170458969313360D0/,
     &Q(5)/-.567902761974940D-1/, Q(6)/.113062953091122D1/,
     &Q(7)/1D0/
C--------------------------
      DATA R1/.820756370353826D-3/,R2/-.595156336428591D-3/,
     &R3/.793650663183693D-3/,R4/-.277777777770481D-2/,
     &R5/.833333333333333D-1/
C--------------------------
      DGAMMA = 0D0
      X = A
      IF (ABS(A).GE.15D0) GOTO 60
C-----------------------------------------------------------------------
C            EVALUATION OF GAMMA(A) FOR ABS(A) .LT. 15
C-----------------------------------------------------------------------
      T = 1D0
      M = INT(A) - 1
C
C     LET T BE THE PRODUCT OF A-J WHEN A .GE. 2
C
      IF (M.GE.0) THEN
        DO J = 1,M
          X = X - 1D0
          T = X*T
        ENDDO
        X = X - 1D0
        GOTO 40
      ENDIF
C
C     LET T BE THE PRODUCT OF A+J WHEN A .LT. 1
C
      T = A
      IF (A.LE.0D0) THEN
        M = -M - 1
        DO  J = 1,M
          X = X + 1D0
          T = X*T
        ENDDO
        X = X + 1D0
        T = X*T
        IF (T.EQ.0D0) RETURN
      ENDIF
C
C     THE FOLLOWING CODE CHECKS IF 1/T CAN OVERFLOW. THIS
C     CODE MAY BE OMITTED IF DESIRED.
C
      IF (ABS(T).GE.1E-30) GOTO 40
      IF (ABS(T)*SPMPAR(3).GT.1.0001D0) DGAMMA = 1D0/T
      RETURN
C
C     COMPUTE GAMMA(1 + X) FOR  0 .LE. X .LT. 1
C
   40 TOP = P(1)
      BOT = Q(1)
      DO I = 2,7
        TOP = P(I) + X*TOP
        BOT = Q(I) + X*BOT
      ENDDO
      DGAMMA = TOP/BOT
C
C     TERMINATION
C
      IF (A.LT.1D0) GOTO 50
      DGAMMA = DGAMMA*T
      RETURN
   50 DGAMMA = DGAMMA/T
      RETURN
C-----------------------------------------------------------------------
C            EVALUATION OF GAMMA(A) FOR ABS(A) .GE. 15
C-----------------------------------------------------------------------
   60 IF (ABS(A).GE.1D3) RETURN
      IF (A.GT.0D0) GOTO 70
      X = -A
      N = X
      T = X - N
      IF (T.GT..9D0) T = 1D0 - T
      S = SIN(PI*T)/PI
      IF (MOD(N,2).EQ.0) S = -S
      IF (S.EQ.0D0) RETURN
C
C     COMPUTE THE MODIFIED ASYMPTOTIC SUM
C
   70 T = 1D0/X**2
      G = ((((R1*T + R2)*T + R3)*T + R4)*T + R5)/X
C
C     ONE MAY REPLACE THE NEXT STATEMENT WITH  LNX = ALOG(X)
C     BUT LESS ACCURACY WILL NORMALLY BE OBTAINED.
C
      LNX = DGLOG(X)
C
C     FINAL ASSEMBLY
C
      Z = X
      G = D + G + (Z - .5D0)*(LNX - 1D0)
      W = G
      T = G - W
      IF (W.GT..99999*EXPARG()) RETURN
      DGAMMA = EXP(W)*(1D0 + T)
      IF (A.LT.0D0) DGAMMA = 1D0/(DGAMMA*S)/X
      END
C
C
      REAL*8 FUNCTION DGLOG(X)
C     -------------------
C     EVALUATION OF LN(X) FOR X.GE.15
C     -------------------
      IMPLICIT NONE
      INTEGER N
      REAL*8 C1,C2,C3,T,T2,X,Z
      REAL*8 W(163)
C     -------------------
      DATA C1/.286228750476730D0/, C2/.399999628131494D0/,
     &C3/.666666666752663D0/
C     -------------------
C     W(J) = LN(J + 14) FOR EACH J
C     -------------------
      DATA W(1) /.270805020110221007D1/,
     &W(2) /.277258872223978124D1/, W(3) /.283321334405621608D1/,
     &W(4) /.289037175789616469D1/, W(5) /.294443897916644046D1/,
     &W(6) /.299573227355399099D1/, W(7) /.304452243772342300D1/,
     &W(8) /.309104245335831585D1/, W(9) /.313549421592914969D1/,
     &W(10)/.317805383034794562D1/, W(11)/.321887582486820075D1/,
     &W(12)/.325809653802148205D1/, W(13)/.329583686600432907D1/,
     &W(14)/.333220451017520392D1/, W(15)/.336729582998647403D1/,
     &W(16)/.340119738166215538D1/, W(17)/.343398720448514625D1/,
     &W(18)/.346573590279972655D1/, W(19)/.349650756146648024D1/,
     &W(20)/.352636052461616139D1/, W(21)/.355534806148941368D1/,
     &W(22)/.358351893845611000D1/, W(23)/.361091791264422444D1/,
     &W(24)/.363758615972638577D1/, W(25)/.366356164612964643D1/,
     &W(26)/.368887945411393630D1/, W(27)/.371357206670430780D1/,
     &W(28)/.373766961828336831D1/, W(29)/.376120011569356242D1/,
     &W(30)/.378418963391826116D1/
      DATA W(31)/.380666248977031976D1/,
     &W(32)/.382864139648909500D1/, W(33)/.385014760171005859D1/,
     &W(34)/.387120101090789093D1/, W(35)/.389182029811062661D1/,
     &W(36)/.391202300542814606D1/, W(37)/.393182563272432577D1/,
     &W(38)/.395124371858142735D1/, W(39)/.397029191355212183D1/,
     &W(40)/.398898404656427438D1/, W(41)/.400733318523247092D1/,
     &W(42)/.402535169073514923D1/, W(43)/.404305126783455015D1/,
     &W(44)/.406044301054641934D1/, W(45)/.407753744390571945D1/,
     &W(46)/.409434456222210068D1/, W(47)/.411087386417331125D1/,
     &W(48)/.412713438504509156D1/, W(49)/.414313472639153269D1/,
     &W(50)/.415888308335967186D1/, W(51)/.417438726989563711D1/,
     &W(52)/.418965474202642554D1/, W(53)/.420469261939096606D1/,
     &W(54)/.421950770517610670D1/, W(55)/.423410650459725938D1/,
     &W(56)/.424849524204935899D1/, W(57)/.426267987704131542D1/,
     &W(58)/.427666611901605531D1/, W(59)/.429045944114839113D1/,
     &W(60)/.430406509320416975D1/
      DATA W(61)/.431748811353631044D1/,
     &W(62)/.433073334028633108D1/, W(63)/.434380542185368385D1/,
     &W(64)/.435670882668959174D1/, W(65)/.436944785246702149D1/,
     &W(66)/.438202663467388161D1/, W(67)/.439444915467243877D1/,
     &W(68)/.440671924726425311D1/, W(69)/.441884060779659792D1/,
     &W(70)/.443081679884331362D1/, W(71)/.444265125649031645D1/,
     &W(72)/.445434729625350773D1/, W(73)/.446590811865458372D1/,
     &W(74)/.447733681447820647D1/, W(75)/.448863636973213984D1/,
     &W(76)/.449980967033026507D1/, W(77)/.451085950651685004D1/,
     &W(78)/.452178857704904031D1/, W(79)/.453259949315325594D1/,
     &W(80)/.454329478227000390D1/, W(81)/.455387689160054083D1/,
     &W(82)/.456434819146783624D1/, W(83)/.457471097850338282D1/,
     &W(84)/.458496747867057192D1/, W(85)/.459511985013458993D1/,
     &W(86)/.460517018598809137D1/, W(87)/.461512051684125945D1/,
     &W(88)/.462497281328427108D1/, W(89)/.463472898822963577D1/,
     &W(90)/.464439089914137266D1/
      DATA W(91) /.465396035015752337D1/,
     &W(92) /.466343909411206714D1/, W(93) /.467282883446190617D1/,
     &W(94) /.468213122712421969D1/, W(95) /.469134788222914370D1/,
     &W(96) /.470048036579241623D1/, W(97) /.470953020131233414D1/,
     &W(98) /.471849887129509454D1/, W(99) /.472738781871234057D1/,
     &W(100)/.473619844839449546D1/, W(101)/.474493212836325007D1/,
     &W(102)/.475359019110636465D1/, W(103)/.476217393479775612D1/,
     &W(104)/.477068462446566476D1/, W(105)/.477912349311152939D1/,
     &W(106)/.478749174278204599D1/, W(107)/.479579054559674109D1/,
     &W(108)/.480402104473325656D1/, W(109)/.481218435537241750D1/,
     &W(110)/.482028156560503686D1/, W(111)/.482831373730230112D1/,
     &W(112)/.483628190695147800D1/, W(113)/.484418708645859127D1/,
     &W(114)/.485203026391961717D1/, W(115)/.485981240436167211D1/,
     &W(116)/.486753445045558242D1/, W(117)/.487519732320115154D1/,
     &W(118)/.488280192258637085D1/, W(119)/.489034912822175377D1/,
     &W(120)/.489783979995091137D1/
      DATA W(121)/.490527477843842945D1/,
     &W(122)/.491265488573605201D1/, W(123)/.491998092582812492D1/,
     &W(124)/.492725368515720469D1/, W(125)/.493447393313069176D1/,
     &W(126)/.494164242260930430D1/, W(127)/.494875989037816828D1/,
     &W(128)/.495582705760126073D1/, W(129)/.496284463025990728D1/,
     &W(130)/.496981329957600062D1/, W(131)/.497673374242057440D1/,
     &W(132)/.498360662170833644D1/, W(133)/.499043258677873630D1/,
     &W(134)/.499721227376411506D1/, W(135)/.500394630594545914D1/,
     &W(136)/.501063529409625575D1/, W(137)/.501727983681492433D1/,
     &W(138)/.502388052084627639D1/, W(139)/.503043792139243546D1/,
     &W(140)/.503695260241362916D1/, W(141)/.504342511691924662D1/,
     &W(142)/.504985600724953705D1/, W(143)/.505624580534830806D1/,
     &W(144)/.506259503302696680D1/, W(145)/.506890420222023153D1/,
     &W(146)/.507517381523382692D1/, W(147)/.508140436498446300D1/,
     &W(148)/.508759633523238407D1/, W(149)/.509375020080676233D1/,
     &W(150)/.509986642782419842D1/
      DATA W(151)/.510594547390058061D1/,
     &W(152)/.511198778835654323D1/, W(153)/.511799381241675511D1/,
     &W(154)/.512396397940325892D1/, W(155)/.512989871492307347D1/,
     &W(156)/.513579843705026176D1/, W(157)/.514166355650265984D1/,
     &W(158)/.514749447681345304D1/, W(159)/.515329159449777895D1/,
     &W(160)/.515905529921452903D1/, W(161)/.516478597392351405D1/,
     &W(162)/.517048399503815178D1/, W(163)/.517614973257382914D1/
C
      IF (X.GE.178D0) GOTO 10
      N = X
      T = (X - N)/(X + N)
      T2 = T**2
      Z = (((C1*T2 + C2)*T2 + C3)*T2 + 2D0)*T
      DGLOG = W(N - 14) + Z
      RETURN
C
10    DGLOG = LOG(X)
      END
C
C
      REAL FUNCTION EXPARG()
C--------------------------------------------------------------------
C     COMPUTATION OF THE LARGEST ARGUMENT W FOR WHICH EXP(W)
C     MAY BE COMPUTED. (ONLY AN APPROXIMATE VALUE IS NEEDED).
C--------------------------------------------------------------------
      IMPLICIT NONE
      REAL SPMPAR
      EXPARG = .99999*LOG(SPMPAR(3))
      END
C
C
      REAL*8 FUNCTION DGAM1(A)
C     ------------------------------------------------------------------
C     COMPUTATION OF 1/GAMMA(A+1) - 1  FOR -.5 <= A <= 1.5
C     ------------------------------------------------------------------
      IMPLICIT NONE
      REAL*8 A,BOT,D,S1,S2,T,TOP,W
      REAL*8 P(7), Q(5), R(9)
C     -------------------
      DATA P(1)/.577215664901533D0/, P(2)/-.409078193005776D0/,
     &P(3)/-.230975380857675D0/, P(4)/.597275330452234D-1/,
     &P(5)/.766968181649490D-2/, P(6)/-.514889771323592D-2/,
     &P(7)/.589597428611429D-3/
C     -------------------
      DATA Q(1)/.100000000000000D1/, Q(2)/.427569613095214D0/,
     &Q(3)/.158451672430138D0/, Q(4)/.261132021441447D-1/,
     &Q(5)/.423244297896961D-2/
C     -------------------
      DATA R(1)/-.422784335098468D0/, R(2)/-.771330383816272D0/,
     &R(3)/-.244757765222226D0/, R(4)/.118378989872749D0/,
     &R(5)/.930357293360349D-3/, R(6)/-.118290993445146D-1/,
     &R(7)/.223047661158249D-2/, R(8)/.266505979058923D-3/,
     &R(9)/-.132674909766242D-3/
C     -------------------
      DATA S1/.273076135303957D0/, S2/.559398236957378D-1/
C     -------------------
      T = A
      D = A - .5D0
      IF (D.GT.0D0) T = D - .5D0
      IF (T) 30,10,20
C
   10 DGAM1 = 0D0
      RETURN
C
   20 TOP = (((((P(7)*T + P(6))*T + P(5))*T + P(4))*T + P(3))*T
     &+ P(2))*T + P(1)
      BOT = (((Q(5)*T + Q(4))*T + Q(3))*T + Q(2))*T + 1D0
      W = TOP/BOT
      IF (D.GT.0D0) GOTO 21
      DGAM1 = A*W
      RETURN
   21 DGAM1 = T/A*(W - 1D0)
      RETURN
C
   30 TOP = (((((((R(9)*T + R(8))*T + R(7))*T + R(6))*T + R(5))*T
     &+ R(4))*T + R(3))*T + R(2))*T + R(1)
      BOT = (S2*T + S1)*T + 1D0
      W = TOP/BOT
      IF (D.GT.0D0) GOTO 31
      DGAM1 = A*(W + 1D0)
      RETURN
   31 DGAM1 = T*W/A
      END
C
C
      REAL FUNCTION SPMPAR(I)
      IMPLICIT NONE
      INTEGER I
      REAL R1MACH
C
C     SPMPAR PROVIDES THE SINGLE PRECISION MACHINE PARAMETERS FOR
C     THE COMPUTER BEING USED. IT IS ASSUMED THAT THE ARGUMENT
C     I IS AN INTEGER HAVING ONE OF THE VALUES 1, 2, OR 3. IF THE
C     SINGLE PRECISION ARITHMETIC BEING USED HAS T BASE B DIGITS AND
C     ITS SMALLEST AND LARGEST EXPONENTS ARE EMIN AND EMAX, THEN
C
C     SPMPAR(1) = B**(1 - T), THE MACHINE PRECISION,
C
C     SPMPAR(2) = B**(EMIN - 1), THE SMALLEST MAGNITUDE,
C
C     SPMPAR(3) = B**EMAX*(1 - B**(-T)), THE LARGEST MAGNITUDE.
C
      GOTO(1,2,3),I
      STOP'ERROR in SPMPAR.'
1     SPMPAR=R1MACH(4)
      RETURN
2     SPMPAR=R1MACH(1)
      RETURN
3     SPMPAR=R1MACH(2)
      END
C
C
      REAL FUNCTION R1MACH(I)
      IMPLICIT NONE
      INTEGER I
C
C  SINGLE-PRECISION MACHINE CONSTANTS
C  R1MACH(1) = B**(EMIN-1), THE SMALLEST POSITIVE MAGNITUDE.
C  R1MACH(2) = B**EMAX*(1 - B**(-T)), THE LARGEST MAGNITUDE.
C  R1MACH(3) = B**(-T), THE SMALLEST RELATIVE SPACING.
C  R1MACH(4) = B**(1-T), THE LARGEST RELATIVE SPACING.
C  R1MACH(5) = LOG10(B)
C
      INTEGER SMALL(2),LARGE(2),RIGHT(2),DIVER(2),LOG10(2)
C     needs to be (2) for AUTODOUBLE, HARRIS SLASH 6, ...
      INTEGER SC
      SAVE SMALL, LARGE, RIGHT, DIVER, LOG10, SC
      REAL RMACH(5)
      EQUIVALENCE (RMACH(1),SMALL),(RMACH(2),LARGE),(RMACH(3),RIGHT),
     &(RMACH(4),DIVER),(RMACH(5),LOG10)
      INTEGER J, K, L, T3E(3)
      DATA T3E/9777664,5323660,46980/
C  THIS VERSION ADAPTS AUTOMATICALLY TO MOST CURRENT MACHINES,
C  INCLUDING AUTO-DOUBLE COMPILERS.
C  TO COMPILE ON OLDER MACHINES, ADD A C IN COLUMN 1
C  ON THE NEXT LINE
      DATA SC/0/
C  AND REMOVE THE C FROM COLUMN 1 IN ONE OF THE SECTIONS BELOW.
C  CONSTANTS FOR EVEN OLDER MACHINES CAN BE OBTAINED BY
C          mail netlib@research.bell-labs.com
C          send old1mach from blas
C  PLEASE SEND CORRECTIONS TO dmg OR ehg@bell-labs.com.
C
C     MACHINE CONSTANTS FOR THE HONEYWELL DPS 8/70 SERIES.
C      DATA RMACH(1) / O402400000000 /
C      DATA RMACH(2) / O376777777777 /
C      DATA RMACH(3) / O714400000000 /
C      DATA RMACH(4) / O716400000000 /
C      DATA RMACH(5) / O776464202324 /, SC/987/
C
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING
C     32-BIT INTEGERS (EXPRESSED IN INTEGER AND OCTAL).
C      DATA SMALL(1) /    8388608 /
C      DATA LARGE(1) / 2147483647 /
C      DATA RIGHT(1) /  880803840 /
C      DATA DIVER(1) /  889192448 /
C      DATA LOG10(1) / 1067065499 /, SC/987/
C      DATA RMACH(1) / O00040000000 /
C      DATA RMACH(2) / O17777777777 /
C      DATA RMACH(3) / O06440000000 /
C      DATA RMACH(4) / O06500000000 /
C      DATA RMACH(5) / O07746420233 /, SC/987/
C
C     MACHINE CONSTANTS FOR THE UNIVAC 1100 SERIES.
C      DATA RMACH(1) / O000400000000 /
C      DATA RMACH(2) / O377777777777 /
C      DATA RMACH(3) / O146400000000 /
C      DATA RMACH(4) / O147400000000 /
C      DATA RMACH(5) / O177464202324 /, SC/987/
C
      IF (SC.NE.987) THEN
C     *** CHECK FOR AUTODOUBLE ***
        SMALL(2) = 0
        RMACH(1) = 1E13
        IF (SMALL(2).NE.0) THEN
C     *** AUTODOUBLED ***
          IF (SMALL(1).EQ.1117925532 .AND. SMALL(2).EQ.-448790528) THEN
C     *** IEEE BIG ENDIAN ***
            SMALL(1) = 1048576
            SMALL(2) = 0
            LARGE(1) = 2146435071
            LARGE(2) = -1
            RIGHT(1) = 1017118720
            RIGHT(2) = 0
            DIVER(1) = 1018167296
            DIVER(2) = 0
            LOG10(1) = 1070810131
            LOG10(2) = 1352628735
          ELSEIF (SMALL(2).EQ.1117925532 .AND. SMALL(1).EQ.-448790528)
     &      THEN
C     *** IEEE LITTLE ENDIAN ***
            SMALL(2) = 1048576
            SMALL(1) = 0
            LARGE(2) = 2146435071
            LARGE(1) = -1
            RIGHT(2) = 1017118720
            RIGHT(1) = 0
            DIVER(2) = 1018167296
            DIVER(1) = 0
            LOG10(2) = 1070810131
            LOG10(1) = 1352628735
          ELSEIF ( SMALL(1).EQ.-2065213935 .AND. SMALL(2).EQ.10752) THEN
C     *** VAX WITH D_FLOATING ***
            SMALL(1) = 128
            SMALL(2) = 0
            LARGE(1) = -32769
            LARGE(2) = -1
            RIGHT(1) = 9344
            RIGHT(2) = 0
            DIVER(1) = 9472
            DIVER(2) = 0
            LOG10(1) = 546979738
            LOG10(2) = -805796613
          ELSEIF (SMALL(1).EQ.1267827943 .AND. SMALL(2).EQ.704643072)
     &      THEN
C     *** IBM MAINFRAME ***
            SMALL(1) = 1048576
            SMALL(2) = 0
            LARGE(1) = 2147483647
            LARGE(2) = -1
            RIGHT(1) = 856686592
            RIGHT(2) = 0
            DIVER(1) = 873463808
            DIVER(2) = 0
            LOG10(1) = 1091781651
            LOG10(2) = 1352628735
          ELSE
            PRINT '(2(/A))','Adjust autodoubled R1MACH by getting data',
     &      'appropriate for your machine from D1MACH.'
            STOP
          ENDIF
        ELSE
          RMACH(1) = 1234567.
          IF (SMALL(1).EQ.1234613304) THEN
C     *** IEEE ***
            SMALL(1) = 8388608
            LARGE(1) = 2139095039
            RIGHT(1) = 864026624
            DIVER(1) = 872415232
            LOG10(1) = 1050288283
          ELSEIF (SMALL(1).EQ.-1271379306) THEN
C     *** VAX ***
            SMALL(1) = 128
            LARGE(1) = -32769
            RIGHT(1) = 13440
            DIVER(1) = 13568
            LOG10(1) = 547045274
          ELSEIF (SMALL(1).EQ.1175639687) THEN
C     *** IBM MAINFRAME ***
            SMALL(1) = 1048576
            LARGE(1) = 2147483647
            RIGHT(1) = 990904320
            DIVER(1) = 1007681536
            LOG10(1) = 1091781651
          ELSEIF (SMALL(1).EQ.1251390520) THEN
C     *** CONVEX C-1 ***
            SMALL(1) = 8388608
            LARGE(1) = 2147483647
            RIGHT(1) = 880803840
            DIVER(1) = 889192448
            LOG10(1) = 1067065499
          ELSE
            DO L = 1, 3
              J = SMALL(1) / 10000000
              K = SMALL(1) - 10000000*J
              IF (K.NE.T3E(L)) GOTO 20
              SMALL(1) = J
            ENDDO
C     *** CRAY T3E ***
            CALL I1MCRA(SMALL(1), K, 16, 0, 0)
            CALL I1MCRA(LARGE(1), K, 32751, 16777215, 16777215)
            CALL I1MCRA(RIGHT(1), K, 15520, 0, 0)
            CALL I1MCRA(DIVER(1), K, 15536, 0, 0)
            CALL I1MCRA(LOG10(1), K, 16339, 4461392, 10451455)
            GOTO 30
20          CALL I1MCRA(J, K, 16405, 9876536, 0)
            IF (SMALL(1).NE.J) THEN
              PRINT '(2(/A))',
     &        'Adjust R1MACH by uncommenting data statements',
     &        ' appropriate for your machine.'
              STOP
            ENDIF
C     *** CRAY 1, XMP, 2, AND 3 ***
            CALL I1MCRA(SMALL(1), K, 8195, 8388608, 1)
            CALL I1MCRA(LARGE(1), K, 24574, 16777215, 16777214)
            CALL I1MCRA(RIGHT(1), K, 16338, 8388608, 0)
            CALL I1MCRA(DIVER(1), K, 16339, 8388608, 0)
            CALL I1MCRA(LOG10(1), K, 16383, 10100890, 8715216)
          ENDIF
        ENDIF
30      SC = 987
      ENDIF
C     SANITY CHECK
      IF (RMACH(4).GE.1.) STOP 776
      IF (I.LT.1 .OR. I.GT.5) THEN
        PRINT *,'R1MACH(I): I =',I,' is out of bounds.'
        STOP
      ENDIF
      R1MACH = RMACH(I)
C
C/* C source for R1MACH -- remove the C in column 1 */
C#include <stdio.h>
C#include <float.h>
C#include <math.h>
Cfloat r1mach_(long *i)
C{
C	switch(*i){
C	  case 1: return FLT_MIN;
C	  case 2: return FLT_MAX;
C	  case 3: return FLT_EPSILON/FLT_RADIX;
C	  case 4: return FLT_EPSILON;
C	  case 5: return log10((double)FLT_RADIX);
C	  }
C	fprintf(stderr, "invalid argument: r1mach(%ld)\n", *i);
C	exit(1); return 0; /* else complaint of missing return value */
C}
      END
C
C
      SUBROUTINE I1MCRA(A, A1, B, C, D)
C**** SPECIAL COMPUTATION FOR CRAY MACHINES ****
      INTEGER A, A1, B, C, D
      A1 = 16777216*B + C
      A = 16777216*A1 + D
      END
c $Id$
