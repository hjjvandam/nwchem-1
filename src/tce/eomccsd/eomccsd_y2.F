      SUBROUTINE eomccsd_y2(d_f1,d_i0,d_t1,d_t2,d_v2,d_y1,d_y2,k_f1_offs
     &et,k_i0_offset,k_t1_offset,k_t2_offset,k_v2_offset,k_y1_offset,k_y
     &2_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yf + = 1 * P( 4 ) * y ( h3 p1 )_y * i1 ( h4 p2 )_f
C         i1 ( h3 p1 )_f + = 1 * f ( h3 p1 )_f
C         i1 ( h3 p1 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h3 h6 p1 p5 )_v
C     i0 ( h3 h4 p1 p2 )_yv + = -1 * P( 2 ) * Sum ( h7 ) * y ( h7 p1 )_y * i1 ( h3 h4 h7 p2 )_v
C         i1 ( h3 h4 h7 p1 )_v + = 1 * v ( h3 h4 h7 p1 )_v
C         i1 ( h3 h4 h7 p1 )_vt + = -1 * Sum ( p5 ) * t ( p5 h7 )_t * v ( h3 h4 p1 p5 )_v
C     i0 ( h3 h4 p1 p2 )_yv + = -1 * P( 2 ) * Sum ( p5 ) * y ( h3 p5 )_y * v ( h4 p5 p1 p2 )_v
C     i0 ( h3 h4 p1 p2 )_yf + = -1 * P( 2 ) * Sum ( h9 ) * y ( h3 h9 p1 p2 )_y * i1 ( h4 h9 )_f
C         i1 ( h3 h9 )_f + = 1 * f ( h3 h9 )_f
C         i1 ( h3 h9 )_ft + = 1 * Sum ( p5 ) * t ( p5 h9 )_t * i2 ( h3 p5 )_f
C             i2 ( h3 p5 )_f + = 1 * f ( h3 p5 )_f
C             i2 ( h3 p5 )_vt + = 1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h3 h8 p5 p7 )_v
C         i1 ( h3 h9 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h3 h6 h9 p5 )_v
C         i1 ( h3 h9 )_vt + = -1/2 * Sum ( h8 p5 p6 ) * t ( p5 p6 h8 h9 )_t * v ( h3 h8 p5 p6 )_v
C     i0 ( h3 h4 p1 p2 )_yf + = 1 * P( 2 ) * Sum ( p10 ) * y ( h3 h4 p1 p10 )_y * i1 ( p10 p2 )_f
C         i1 ( p10 p1 )_f + = 1 * f ( p10 p1 )_f
C         i1 ( p10 p1 )_vt + = -1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 p10 p1 p5 )_v
C         i1 ( p10 p1 )_vt + = 1/2 * Sum ( h7 h8 p6 ) * t ( p6 p10 h7 h8 )_t * v ( h7 h8 p1 p6 )_v
C         i1 ( p10 p1 )_vtt + = -1 * Sum ( h6 ) * t ( p10 h6 )_t * i2 ( h6 p1 )_vt
C             i2 ( h6 p1 )_vt + = 1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h6 h8 p1 p7 )_v
C     i0 ( h3 h4 p1 p2 )_yv + = 1/2 * Sum ( h10 h9 ) * y ( h9 h10 p1 p2 )_y * i1 ( h3 h4 h9 h10 )_v
C         i1 ( h3 h4 h9 h10 )_v + = 1 * v ( h3 h4 h9 h10 )_v
C         i1 ( h3 h4 h9 h10 )_vt + = -2 * Sum ( p5 ) * t ( p5 h9 )_t * i2 ( h3 h4 h10 p5 )_v
C             i2 ( h3 h4 h10 p5 )_v + = 1 * v ( h3 h4 h10 p5 )_v
C             i2 ( h3 h4 h10 p5 )_vt + = -1/2 * Sum ( p7 ) * t ( p7 h10 )_t * v ( h3 h4 p5 p7 )_v
C         i1 ( h3 h4 h9 h10 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h9 h10 )_t * v ( h3 h4 p5 p6 )_v
C     i0 ( h3 h4 p1 p2 )_yv + = -1 * P( 4 ) * Sum ( h9 p7 ) * y ( h3 h9 p1 p7 )_y * i1 ( h4 p7 h9 p2 )_v
C         i1 ( h3 p7 h9 p1 )_v + = 1 * v ( h3 p7 h9 p1 )_v
C         i1 ( h3 p7 h9 p1 )_vt + = -1 * Sum ( p5 ) * t ( p5 h9 )_t * v ( h3 p7 p1 p5 )_v
C         i1 ( h3 p7 h9 p1 )_vt + = -1 * Sum ( h8 p6 ) * t ( p6 p7 h8 h9 )_t * v ( h3 h8 p1 p6 )_v
C     i0 ( h3 h4 p1 p2 )_yv + = 1/2 * Sum ( p6 p5 ) * y ( h3 h4 p5 p6 )_y * v ( p5 p6 p1 p2 )_v
C     i0 ( h3 h4 p1 p2 )_ytv + = 1 * P( 2 ) * Sum ( h9 ) * i1 ( h3 h9 )_yt * v ( h4 h9 p1 p2 )_v
C         i1 ( h3 h9 )_yt + = 1 * Sum ( p5 ) * t ( p5 h9 )_t * y ( h3 p5 )_y
C         i1 ( h3 h9 )_yt + = -1/2 * Sum ( h7 p6 p5 ) * t ( p5 p6 h7 h9 )_t * y ( h3 h7 p5 p6 )_y
C     i0 ( h3 h4 p1 p2 )_ytf + = 1 * P( 2 ) * Sum ( h5 ) * i1 ( h3 h4 h5 p1 )_yt * f ( h5 p2 )_f
C         i1 ( h3 h4 h5 p1 )_yt + = -1 * Sum ( p6 ) * t ( p6 h5 )_t * y ( h3 h4 p1 p6 )_y
C     i0 ( h3 h4 p1 p2 )_ytv + = 1 * P( 4 ) * Sum ( h7 h6 ) * i1 ( h3 h7 h6 p1 )_yt * v ( h4 h6 h7 p2 )_v
C         i1 ( h3 h7 h6 p1 )_yt + = 1 * Sum ( p5 ) * t ( p5 h6 )_t * y ( h3 h7 p1 p5 )_y
C     i0 ( h3 h4 p1 p2 )_ytv + = 1 * Sum ( h6 p7 ) * i1 ( h3 h4 h6 p7 )_yt * v ( h6 p7 p1 p2 )_v
C         i1 ( h3 h4 h6 p7 )_yt + = -1 * Sum ( p5 ) * t ( p5 h6 )_t * y ( h3 h4 p5 p7 )_y
C     i0 ( h3 h4 p1 p2 )_ytv + = -1/2 * P( 2 ) * Sum ( p6 ) * i1 ( p6 p1 )_yt * v ( h3 h4 p2 p6 )_v
C         i1 ( p6 p1 )_yt + = 1 * Sum ( h8 h7 p5 ) * t ( p5 p6 h7 h8 )_t * y ( h7 h8 p1 p5 )_y
C     i0 ( h3 h4 p1 p2 )_ytv + = 1/4 * Sum ( h9 h8 ) * i1 ( h3 h4 h8 h9 )_yt * v ( h8 h9 p1 p2 )_v
C         i1 ( h3 h4 h8 h9 )_yt + = 1 * Sum ( p6 p5 ) * t ( p5 p6 h8 h9 )_t * y ( h3 h4 p5 p6 )_y
C         i1 ( h3 h4 h8 h9 )_ytt + = 2 * Sum ( p5 ) * t ( p5 h9 )_t * i2 ( h3 h4 h8 p5 )_yt
C             i2 ( h3 h4 h8 p5 )_yt + = -1 * Sum ( p7 ) * t ( p7 h8 )_t * y ( h3 h4 p5 p7 )_y
C     i0 ( h3 h4 p1 p2 )_yttv + = -1 * P( 4 ) * Sum ( p5 h8 ) * i1 ( h3 p5 h8 p1 )_ytt * v ( h4 h8 p2 p5 )_v
C         i1 ( h3 p5 h8 p1 )_ytt + = 1 * Sum ( h6 ) * t ( p5 h6 )_t * i2 ( h3 h6 h8 p1 )_yt
C             i2 ( h3 h6 h8 p1 )_yt + = 1 * Sum ( p7 ) * t ( p7 h8 )_t * y ( h3 h6 p1 p7 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_y1
      INTEGER k_y1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_y2
      INTEGER k_y2_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      CHARACTER*255 filename
      CALL OFFSET_eomccsd_y2_1_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_1_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL eomccsd_y2_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_1(d_y1,k_y1_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_2_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_2_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL eomccsd_y2_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_2(d_y1,k_y1_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL eomccsd_y2_3(d_y1,k_y1_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL OFFSET_eomccsd_y2_4_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_4_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_eomccsd_y2_4_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('eomccsd_y2_4_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_y2_4_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsd_y2_4_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_y2_4_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_y2_4',-1
     &)
      CALL eomccsd_y2_4_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL eomccsd_y2_4_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_4(d_y2,k_y2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_5_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_5_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL eomccsd_y2_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL eomccsd_y2_5_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL OFFSET_eomccsd_y2_5_4_1(d_i2,l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('eomccsd_y2_5_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_y2_5_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_y2_5_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_y2_5',-1
     &)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_5(d_y2,k_y2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_6_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_6_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_eomccsd_y2_6_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('eomccsd_y2_6_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_y2_6_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsd_y2_6_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_y2_6_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_y2_6',-1
     &)
      CALL eomccsd_y2_6_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_6(d_y2,k_y2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_7_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_7_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL eomccsd_y2_7_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL eomccsd_y2_7_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_7(d_y2,k_y2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL eomccsd_y2_8(d_y2,k_y2_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL OFFSET_eomccsd_y2_9_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_9_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_9_1(d_t1,k_t1_offset,d_y1,k_y1_offset,d_i1,k_i1_of
     &fset)
      CALL eomccsd_y2_9_2(d_t2,k_t2_offset,d_y2,k_y2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_9(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_10_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_10_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_10_1(d_t1,k_t1_offset,d_y2,k_y2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_10(d_i1,k_i1_offset,d_f1,k_f1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_11_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_11_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_11_1(d_t1,k_t1_offset,d_y2,k_y2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_11(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_12_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_12_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_12_1(d_t1,k_t1_offset,d_y2,k_y2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_12(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_13_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_13_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_13_1(d_t2,k_t2_offset,d_y2,k_y2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_13(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_14_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_14_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_y2_14_1(d_t2,k_t2_offset,d_y2,k_y2_offset,d_i1,k_i1_o
     &ffset)
      CALL OFFSET_eomccsd_y2_14_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsd_y2_14_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_y2_14_2_1(d_t1,k_t1_offset,d_y2,k_y2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_y2_14_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_y2_14',-
     &1)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_14(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      CALL OFFSET_eomccsd_y2_15_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_y2_15_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_eomccsd_y2_15_1_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsd_y2_15_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_y2_15_1_1(d_t1,k_t1_offset,d_y2,k_y2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_y2_15_1(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_y2_15',-
     &1)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_y2_15(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_y2',-1)
      RETURN
      END
      SUBROUTINE eomccsd_y2_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yf + = 1 * P( 4 ) * y ( h3 p1 )_y * i1 ( h4 p2 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h3b_1
      INTEGER p1b_1
      INTEGER h4b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_f)) TH
     &EN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p1b-1)) .eq. irrep_y) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      h3b_1 = h3b
      p1b_1 = p1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p2b-1).eq
     &.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h4b_2 = h4b
      p2b_2 = p2b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h3 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_1',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((h4 - 1))
      idimb_sort = h4 + int_mb(k_range+h4b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_1',7)
      IF ((h3b .le. h4b) .and. (p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h3b .le. h4b) .and. (p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p1b .le. p2b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p2b .le. p1b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_1',11)
      END IF
      END IF
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p1 )_f + = 1 * f ( h3 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p1b
      INTEGER h3b_1
      INTEGER p1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      h3b_1 = h3b
      p1b_1 = p1b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_1_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_1_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h3 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_1_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_1_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p1b -
     & noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_1_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_1_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_1_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_1_1',0)
      size = 0
      DO h3b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p1 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h3 h6 p1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p1b
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h3b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h6b_2 = h6b
      p1b_2 = p1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_1_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_1_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_1_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_1_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_1_2',4)
      IF ((h6b .lt. h3b) .and. (p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h6 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h3b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h6 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h6b) .and. (p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h6b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_1_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_1_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_1_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_1_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_1_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_1_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_1_2',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yv + = -1 * P( 2 ) * Sum ( h7 ) * y ( h7 p1 )_y * i1 ( h3 h4 h7 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h7b
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p2b_2
      INTEGER h7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h7
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_v)) TH
     &EN
      DO h7b = 1,noab
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p1b-1)) .eq. irrep_y) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      h7b_1 = int_mb(k_alpha+h7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      h7b_1 = h7b
      p1b_1 = p1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p2b-1)+int_mb(k_spin+h7b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p2b_2 = p2b
      h7b_2 = h7b
      END IF
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (h7b_1 - 1)))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h7 - 1))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_2',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h7b_2 - 1 
     &+ noab * (p2b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3b_2 - 1
     &)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idimb = h7 + int_mb(k_range+h7b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_2',7)
      IF ((p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h7 p1 )_v + = 1 * v ( h3 h4 h7 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER h7b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER p1b_1
      INTEGER h7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER h7
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h7b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      p1b_1 = p1b
      h7b_1 = h7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+h7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_2_1',1)
      IF ((h7b .le. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h7b_1 - 1 + (noab+nvab) * (h4b_1 - 1 + (noab+nvab
     &) * (h3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_2_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1))))
      idimc = h7 + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h7b -
     & 1 + noab * (p1b - noab - 1 + nvab * (h4b - 1 + noab * (h3b - 1)))
     &))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_2_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_2_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_2_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h7 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER h7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_2_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &7b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h7b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h7b - 1 + noab * (p1b - noab - 1 + nvab * (h4b
     & - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h7 p1 )_vt + = -1 * Sum ( p5 ) * t ( p5 h7 )_t * v ( h3 h4 p1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER h7b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h7b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h7b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h7b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p5b_1 = p5b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p1b_2 = p1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h7b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_2_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_2_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_2_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_2_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_2_2',4)
      IF ((p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_2_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_2_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_2_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idimc_sort = h7 + int_mb(k_range+h7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      idimc = h7 + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h7b - 1 + noab * (p1b - noab - 1 + nvab * (h4b - 1 + noab * (
     &h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_2_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_2_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_2_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_2_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yv + = -1 * P( 2 ) * Sum ( p5 ) * y ( h3 p5 )_y * v ( h4 p5 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER p5b
      INTEGER h3b_1
      INTEGER p5b_1
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_v)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_y) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_1 = h3b
      p5b_1 = p5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h4b_2 = h4b
      p5b_2 = p5b
      p1b_2 = p1b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_3',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p5b_1 - no
     &ab - 1 + nvab * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_3',4)
      IF ((h4b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_3',7)
      IF ((h3b .le. h4b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_3',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yf + = -1 * P( 2 ) * Sum ( h9 ) * y ( h3 h9 p1 p2 )_y * i1 ( h4 h9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h3b_1
      INTEGER h9b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h4b_2
      INTEGER h9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h9
      INTEGER h3
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_f)) TH
     &EN
      DO h9b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      ELSE
      h3b_1 = h3b
      h9b_1 = h9b
      p1b_1 = p1b
      p2b_1 = p2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      ELSE
      h4b_2 = h4b
      h9b_2 = h9b
      END IF
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4',1)
      IF ((h9b .lt. h3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h3b_1 - 1 + noab * (h9
     &b_1 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h9 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h9b_1 - 1 + noab * (h3
     &b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h3 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_4',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_4',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h9b_2 - 1 
     &+ noab * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimb = h9 + int_mb(k_range+h9b-1) * ((h4 - 1))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_4',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_4',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_4',7)
      IF ((h3b .le. h4b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_4',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_4',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_f + = 1 * f ( h3 h9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h9b
      INTEGER h3b_1
      INTEGER h9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      h3b_1 = h3b
      h9b_1 = h9b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ (noab+nvab) * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_4_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h9 - 1))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h9b -
     & 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_4_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_4_1',0)
      size = 0
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h9b - 1 + noab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_ft + = 1 * Sum ( p5 ) * t ( p5 h9 )_t * i2 ( h3 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h9b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h3b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &f,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p5b_1 = p5b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_4_2',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_4_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_4_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_4_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_4_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_4_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_4_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p5 )_f + = 1 * f ( h3 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p5b
      INTEGER h3b_1
      INTEGER p5b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_1 = h3b
      p5b_1 = p5b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4_2_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p5b_1 - 1 
     &+ (noab+nvab) * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_4_2_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p5 - 1))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p5b -
     & noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4_2_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4_2_1',5
     &)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_4_2_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER p5b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_4_2_1',0)
      size = 0
      DO h3b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p5b - noab - 1 + nvab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_4_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p5 )_vt + = 1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h3 h8 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p5b
      INTEGER p7b
      INTEGER h8b
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER h3b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_2 = h3b
      h8b_2 = h8b
      p5b_2 = p5b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_2_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4_2_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4_2_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_2_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_4_2_2',4)
      IF ((h8b .lt. h3b) .and. (p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h3b) .and. (p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h8b) .and. (p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h8b) .and. (p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_4_2_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_4_2_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_4_2_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p5 - 1))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p5b - noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4_2_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_4_2_2',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_4_2_2',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4_2_2',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h3 h6 h9 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h9b
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h3b_2
      INTEGER h6b_2
      INTEGER h9b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h9
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h6b_2 = h6b
      h9b_2 = h9b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4_3',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_4_3',4)
      IF ((h6b .lt. h3b) .and. (h9b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (h9b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h6 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h6b) .and. (h9b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (h9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_4_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_4_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_4_3',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h9 - 1))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_4_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_4_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_4_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_vt + = -1/2 * Sum ( h8 p5 p6 ) * t ( p5 p6 h8 h9 )_t * v ( h3 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h9b
      INTEGER p5b
      INTEGER p6b
      INTEGER h8b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h9b_1
      INTEGER h8b_1
      INTEGER h3b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      h9b_1 = h9b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h8b_2 = h8b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_4',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_4_4',1)
      IF ((h8b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_4_4',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_4_4',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_4_4',4)
      IF ((h8b .lt. h3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h8 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_4_4',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_4_4',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_4_4',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_4_4',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_4_4',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_4_4',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_4_4',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yf + = 1 * P( 2 ) * Sum ( p10 ) * y ( h3 h4 p1 p10 )_y * i1 ( p10 p2 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER p10b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER p1b_1
      INTEGER p10b_1
      INTEGER p10b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER p10
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_f)) TH
     &EN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      p1b_1 = p1b
      p10b_1 = p10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p2b-1).e
     &q.4)) THEN
      p10b_2 = int_mb(k_alpha+p10b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      p10b_2 = p10b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_5',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_5',1)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (h4b_1 - 1 + noab * (h
     &3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h3 - 1) + int_mb(k_r
     &ange+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h4b_1 - 1 + noab * (h
     &3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h3 - 1) + int_mb(k_r
     &ange+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_5',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_5',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_5',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_5',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_5',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_5',7)
      IF ((p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_5',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_5',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_5',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_5',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p10 p1 )_f + = 1 * f ( p10 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p10b
      INTEGER p1b
      INTEGER p10b_1
      INTEGER p1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      p10b_1 = p10b
      p1b_1 = p1b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p10b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_5_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (p10b_1 - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_5_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_5_1',3)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p10 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p1b -
     & noab - 1 + nvab * (p10b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_5_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_5_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_5_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p10 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p10b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_5_1',0)
      size = 0
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (p10b - noab - 1)) = s
     &ize
      size = size + int_mb(k_range+p10b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p10 p1 )_vt + = -1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 p10 p1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p10b
      INTEGER p1b
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER p10b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p10
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h6b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      p10b_2 = int_mb(k_alpha+p10b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      p10b_2 = p10b
      h6b_2 = h6b
      p1b_2 = p1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p10b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_5_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_5_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_5_2',4)
      IF ((h6b .le. p10b) .and. (p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nva
     &b) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((h6 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. p10b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nva
     &b) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((h6 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_5_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_5_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_5_2',7)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p10 + int_mb(k_range+p10b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p10 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p10b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_5_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_5_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_5_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_5_2',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p10 p1 )_vt + = 1/2 * Sum ( h7 h8 p6 ) * t ( p6 p10 h7 h8 )_t * v ( h7 h8 p1 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p10b
      INTEGER p1b
      INTEGER p6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p10b_1
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER p10
      INTEGER h7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+
     &h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb
     &(k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p6b-1)+i
     &nt_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p10b_1 = p10b
      p6b_1 = p6b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_5_3',1)
      IF ((p6b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p6b_1 - 
     &noab - 1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p6 - 1))))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p10 - 1))))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_5_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_5_3',4)
      IF ((p6b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_5_3',5)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_5_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_5_3',7)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p10 + int_mb(k_range+p10b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p10 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p10b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_5_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_5_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_5_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_5_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_5_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p10 p1 )_vtt + = -1 * Sum ( h6 ) * t ( p10 h6 )_t * i2 ( h6 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p10b
      INTEGER p1b
      INTEGER h6b
      INTEGER p10b_1
      INTEGER h6b_1
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,ieor(irrep_t,irrep_t))) THEN
      DO h6b = 1,noab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h6b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p10b_1 = p10b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      ELSE
      h6b_2 = h6b
      p1b_2 = p1b
      END IF
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_4',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_5_4',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p10 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_5_4',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_4',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_5_4',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (h6b_2 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((h6 - 1))
      idimb_sort = h6 + int_mb(k_range+h6b-1) * ((p1 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_5_4',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_5_4',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_5_4',7)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p10 + int_mb(k_range+p10b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p10 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p10b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_5_4',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_5_4',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_5_4',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_5_4',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_5_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 p1 )_vt + = 1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h6 h8 p1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p1b
      INTEGER p7b
      INTEGER h8b
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER h6b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_2 = h6b
      h8b_2 = h8b
      p1b_2 = p1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_4_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_5_4_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_5_4_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_5_4_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_5_4_1',4)
      IF ((h8b .lt. h6b) .and. (p7b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h6b) .and. (p1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h8b) .and. (p7b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h8b) .and. (p1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_5_4_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_5_4_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_5_4_1',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_5_4_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_5_4_1',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_5_4_1',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_5_4_1',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_5_4_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_5_4_1',0)
      size = 0
      DO h6b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (h6b - 1)) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yv + = 1/2 * Sum ( h10 h9 ) * y ( h9 h10 p1 p2 )_y * i1 ( h3 h4 h9 h10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h9
      INTEGER h10
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperh(2)
      INTEGER isuperh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_v)) TH
     &EN
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      ELSE
      h9b_1 = h9b
      h10b_1 = h10b
      p1b_1 = p1b
      p2b_1 = p2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      h9b_2 = h9b
      h10b_2 = h10b
      END IF
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_6',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_6',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h10b_1 - 1 + noab * (h
     &9b_1 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_6',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_6',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_6',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h10b_2 - 1
     & + noab * (h9b_2 - 1 + noab * (h4b_2 - 1 + noab * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimb = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_6',5)
      nsuperh(1) = 1
      nsuperh(2) = 1
      isuperh = 1
      IF (h9b .eq. h10b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_6',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperh(1))/FACTORIAL(nsuperh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_6',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_6',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_6',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_6',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_6',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h9 h10 )_v + = 1 * v ( h3 h4 h9 h10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h9b
      INTEGER h10b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_6_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + (noab+nvab) * (h9b_1 - 1 + (noab+nvab) * (h4b_1 - 1 + (noab+nva
     &b) * (h3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_6_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_6_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h10b 
     &- 1 + noab * (h9b - 1 + noab * (h4b - 1 + noab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_6_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_6_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_6_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h9 h10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER h9b
      INTEGER h10b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_6_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      int_mb(k_a_offset + h10b - 1 + noab * (h9b - 1 + noab * (h4b - 1 +
     & noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h9 h10 )_vt + = -2 * Sum ( p5 ) * t ( p5 h9 )_t * i2 ( h3 h4 h10 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h9b
      INTEGER h10b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h9b = 1,noab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p5b_1 = p5b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      h10b_2 = h10b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_6_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_6_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_6_2',4)
      IF ((h10b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (h10b_2 - 1 + noab * (h4b_2 - 1 + noab * (h3b_2 - 
     &1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_6_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_6_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_6_2',7)
      IF ((h9b .le. h10b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h4b - 1 + noab * (h3b - 
     &1)))))
      END IF
      IF ((h10b .le. h9b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (h4b - 1 + noab * (h3b - 
     &1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_6_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_6_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_6_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_6_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_6_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h4 h10 p5 )_v + = 1 * v ( h3 h4 h10 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h10b
      INTEGER p5b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h10b_1
      INTEGER p5b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER h10
      INTEGER p5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &10b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h10b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      h10b_1 = h10b
      p5b_1 = p5b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+h10b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_6_2_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p5b_1 - 1 
     &+ (noab+nvab) * (h10b_1 - 1 + (noab+nvab) * (h4b_1 - 1 + (noab+nva
     &b) * (h3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima = p5 + int_mb(k_range+p5b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_6_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_6_2_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1))))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p5b -
     & noab - 1 + nvab * (h10b - 1 + noab * (h4b - 1 + noab * (h3b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_6_2_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_6_2_1',5
     &)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_6_2_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h4 h10 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER h10b
      INTEGER p5b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_6_2_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &10b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h10b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      int_mb(k_a_offset + p5b - noab - 1 + nvab * (h10b - 1 + noab * (h4
     &b - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_6_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h4 h10 p5 )_vt + = -1/2 * Sum ( p7 ) * t ( p7 h10 )_t * v ( h3 h4 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h10b
      INTEGER p5b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h10b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &10b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h10b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p7b_1 = p7b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p5b_2 = p5b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_2_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_6_2_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_6_2_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_2_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_6_2_2',4)
      IF ((p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_6_2_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_6_2_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_6_2_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimc_sort = h10 + int_mb(k_range+h10b-1) * ((h3 - 1) + int_mb(k_r
     &ange+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p5 - 1))))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p5b - noab - 1 + nvab * (h10b - 1 + noab * (h4b - 1 + noab * 
     &(h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_6_2_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_6_2_2',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_6_2_2',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_6_2_2',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h9 h10 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h9 h10 )_t * v ( h3 h4 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h9b
      INTEGER h10b
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_6_3',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - 
     &noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_6_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_6_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_6_3',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_6_3',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_6_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_6_3',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h4b - 1 + noab * (h3b - 
     &1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_6_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_6_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_6_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_6_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yv + = -1 * P( 4 ) * Sum ( h9 p7 ) * y ( h3 h9 p1 p7 )_y * i1 ( h4 p7 h9 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER p7b
      INTEGER h3b_1
      INTEGER h9b_1
      INTEGER p1b_1
      INTEGER p7b_1
      INTEGER h4b_2
      INTEGER p7b_2
      INTEGER p2b_2
      INTEGER h9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h9
      INTEGER h3
      INTEGER p7
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_v)) TH
     &EN
      DO h9b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_1 = h3b
      h9b_1 = h9b
      p1b_1 = p1b
      p7b_1 = p7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p2b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      ELSE
      h4b_2 = h4b
      p7b_2 = p7b
      p2b_2 = p2b
      h9b_2 = h9b
      END IF
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_7',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_7',1)
      IF ((h9b .lt. h3b) .and. (p7b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p7b_1 - noab - 1 + nvab * (h3b_1 - 1 + noab * (h9
     &b_1 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h9 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h3b) .and. (p1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h3b_1 - 1 + noab * (h9
     &b_1 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h9 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h9b) .and. (p7b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p7b_1 - noab - 1 + nvab * (h9b_1 - 1 + noab * (h3
     &b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h3 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h9b) .and. (p1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h9b_1 - 1 + noab * (h3
     &b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h3 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_7',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_7',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_7',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h9b_2 - 1 
     &+ noab * (p2b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h4
     &b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimb = h9 + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h4 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_7',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_7',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_7',7)
      IF ((h3b .le. h4b) .and. (p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h3b .le. h4b) .and. (p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p1b .le. p2b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p2b .le. p1b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_7',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_7',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_7',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_7',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_7_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p7 h9 p1 )_v + = 1 * v ( h3 p7 h9 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p7b
      INTEGER p1b
      INTEGER h9b
      INTEGER h3b_1
      INTEGER p7b_1
      INTEGER p1b_1
      INTEGER h9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p7
      INTEGER h9
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      h3b_1 = h3b
      p7b_1 = p7b
      p1b_1 = p1b
      h9b_1 = h9b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_7_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_7_1',1)
      IF ((h3b .le. p7b) .and. (h9b .le. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h9b_1 - 1 + (noab+nvab) * (p7b_1 - 1 + (noab+nvab
     &) * (h3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_7_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_y2_7_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h9b -
     & 1 + noab * (p1b - noab - 1 + nvab * (p7b - noab - 1 + nvab * (h3b
     & - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_7_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_7_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_7_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p7 h9 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER p7b
      INTEGER p1b
      INTEGER h9b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_7_1',0)
      size = 0
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h9b - 1 + noab * (p1b - noab - 1 + nvab * (p7b
     & - noab - 1 + nvab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p7 h9 p1 )_vt + = -1 * Sum ( p5 ) * t ( p5 h9 )_t * v ( h3 p7 p1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p7b
      INTEGER p1b
      INTEGER h9b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER p1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p7
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h9b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p5b_1 = p5b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      p7b_2 = p7b
      p1b_2 = p1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_7_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_7_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_7_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_7_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_7_2',4)
      IF ((h3b .le. p7b) .and. (p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. p7b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_7_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_7_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_7_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p1 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (p1b - noab - 1 + nvab * (p7b - noab - 1 + n
     &vab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_7_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_7_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_7_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_7_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_7_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p7 h9 p1 )_vt + = -1 * Sum ( h8 p6 ) * t ( p6 p7 h8 h9 )_t * v ( h3 h8 p1 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p7b
      INTEGER p1b
      INTEGER h9b
      INTEGER p6b
      INTEGER h8b
      INTEGER p7b_1
      INTEGER p6b_1
      INTEGER h9b_1
      INTEGER h8b_1
      INTEGER h3b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER p7
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h9b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      DO p6b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      p6b_1 = p6b
      h9b_1 = h9b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h8b_2 = h8b
      p1b_2 = p1b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p7b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_7_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_7_3',1)
      IF ((p6b .le. p7b) .and. (h8b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p6b_1 - n
     &oab - 1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p6 - 1))))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p6b .le. p7b) .and. (h9b .lt. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p6b_1 - n
     &oab - 1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p6 - 1))))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p6b) .and. (h8b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p7 - 1))))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p6b) .and. (h9b .lt. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p7 - 1))))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_7_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_7_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_7_3',4)
      IF ((h8b .lt. h3b) .and. (p6b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h8 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h3b) .and. (p1b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h8 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h8b) .and. (p6b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h8b) .and. (p1b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_7_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_7_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_7_3',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p7 + int_mb(k_range+p7b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (p1b - noab - 1 + nvab * (p7b - noab - 1 + n
     &vab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_7_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_7_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_7_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_7_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yv + = 1/2 * Sum ( p6 p5 ) * y ( h3 h4 p5 p6 )_y * v ( p5 p6 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER p5b
      INTEGER p6b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER p5
      INTEGER p6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_v)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      p5b_1 = p5b
      p6b_1 = p6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      p5b_2 = p5b
      p6b_2 = p6b
      p1b_2 = p1b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_8',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_8',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (h4b_1 - 1 + noab * (h3
     &b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idima = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_8',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_8',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_8',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab
     &) * (p5b_2 - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_8',5)
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p5b .eq. p6b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_8',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubp(1))/FACTORIAL(nsubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_8',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_8',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_8',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_8',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_8',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_ytv + = 1 * P( 2 ) * Sum ( h9 ) * i1 ( h3 h9 )_yt * v ( h4 h9 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h3b_1
      INTEGER h9b_1
      INTEGER h4b_2
      INTEGER h9b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_v))) THEN
      DO h9b = 1,noab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      h3b_1 = h3b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h4b_2 = h4b
      h9b_2 = h9b
      p1b_2 = p1b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_9',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_9',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_9',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_9',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_9',4)
      IF ((h9b .lt. h4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h9 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h4 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_9',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_9',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_9',7)
      IF ((h3b .le. h4b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_9',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_9',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_9',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_9',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_9_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_yt + = 1 * Sum ( p5 ) * t ( p5 h9 )_t * y ( h3 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h9b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h3b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p5b_1 = p5b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_9_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_9_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_9_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_9_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_9_1',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_9_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_9_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_9_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_9_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_9_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_9_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_9_1',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_9_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_9_1',0)
      size = 0
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h9b - 1 + noab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_9_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h9 )_yt + = -1/2 * Sum ( h7 p6 p5 ) * t ( p5 p6 h7 h9 )_t * y ( h3 h7 p5 p6 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h9b
      INTEGER p5b
      INTEGER p6b
      INTEGER h7b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h9b_1
      INTEGER h7b_1
      INTEGER h3b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h9b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h7b-1).eq.8)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      h9b_1 = h9b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h7b_2 = h7b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+h7b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_9_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_9_2',1)
      IF ((h7b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_9_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_9_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_9_2',4)
      IF ((h7b .lt. h3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h3b_2 - 1 + noab * (h7
     &b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h7 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_9_2',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_9_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_9_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_9_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_9_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_9_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_9_2',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_ytf + = 1 * P( 2 ) * Sum ( h5 ) * i1 ( h3 h4 h5 p1 )_yt * f ( h5 p2 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h5b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER p1b_1
      INTEGER h5b_1
      INTEGER h5b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER p1
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_f))) THEN
      DO h5b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h5b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      p1b_1 = p1b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p2b-1).eq
     &.4)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h5b_2 = h5b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_10',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_10',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (p1b_1 - noab - 1 + nvab * (h4b_1 - 1 + noab * (h3b_1 - 1
     &)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_10',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_10',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_10',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (h5b_2 - 1)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((h5 - 1))
      idimb_sort = h5 + int_mb(k_range+h5b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_10',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_10',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_10',7)
      IF ((p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_10',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_10',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_10',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_10',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h5 p1 )_yt + = -1 * Sum ( p6 ) * t ( p6 h5 )_t * y ( h3 h4 p1 p6 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER h5b
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h5b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p1b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h5b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h5b-1).eq
     &.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p6b_1 = p6b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p1b_2 = p1b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_10_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_10_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_10_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_10_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_10_1',4)
      IF ((p6b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_10_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_10_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_10_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      idimc = h5 + int_mb(k_range+h5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h5b - 1 + noab * (p1b - noab - 1 + nvab * (h4b - 1 + noab * (
     &h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_10_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_10_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_10_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_10_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_10_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h5 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER h5b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_10_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &5b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h5b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h5b - 1 + noab * (p1b - noab - 1 + nvab * (h4b
     & - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_ytv + = 1 * P( 4 ) * Sum ( h7 h6 ) * i1 ( h3 h7 h6 p1 )_yt * v ( h4 h6 h7 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h7b
      INTEGER h6b
      INTEGER h3b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER h6b_1
      INTEGER h4b_2
      INTEGER h6b_2
      INTEGER p2b_2
      INTEGER h7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h7
      INTEGER p1
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_v))) THEN
      DO h7b = 1,noab
      DO h6b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h6b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h6b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      h3b_1 = h3b
      h7b_1 = h7b
      p1b_1 = p1b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p2b-1)+int_mb(k_spin+h7b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      ELSE
      h4b_2 = h4b
      h6b_2 = h6b
      p2b_2 = p2b
      h7b_2 = h7b
      END IF
      dim_common = int_mb(k_range+h7b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_11',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_11',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h3b_1 - 1
     &)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_11',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_11',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_11',4)
      IF ((h6b .lt. h4b) .and. (h7b .le. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (h7b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h6b) .and. (h7b .le. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (h7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h4 - 1))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_11',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_11',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_11',7)
      IF ((h3b .le. h4b) .and. (p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h3b .le. h4b) .and. (p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p1b .le. p2b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p2b .le. p1b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_11',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_11',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_11',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_11',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_11_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h7 h6 p1 )_yt + = 1 * Sum ( p5 ) * t ( p5 h6 )_t * y ( h3 h7 p1 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h7b
      INTEGER p1b
      INTEGER h6b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h3b_2
      INTEGER h7b_2
      INTEGER p1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h3
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h7b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h6b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h6b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h7b_2 = h7b
      p1b_2 = p1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h6b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h7b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_11_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_11_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_11_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_11_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_11_1',4)
      IF ((h7b .lt. h3b) .and. (p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h3b_2 - 1 + noab * (h7
     &b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h7 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h3b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h3b_2 - 1 + noab * (h7
     &b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h7 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h7b) .and. (p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h7b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_11_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_11_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_11_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
      idimc = h6 + int_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h6b - 1 + noab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (
     &h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_11_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_11_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_11_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_11_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_11_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h7 h6 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h7b
      INTEGER p1b
      INTEGER h6b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_11_1',0)
      size = 0
      DO h3b = 1,noab
      DO h7b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+h
     &6b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h6b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h6b - 1 + noab * (p1b - noab - 1 + nvab * (h7b
     & - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h7b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h6b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_12(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_ytv + = 1 * Sum ( h6 p7 ) * i1 ( h3 h4 h6 p7 )_yt * v ( h6 p7 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h6b
      INTEGER p7b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h6b_1
      INTEGER p7b_1
      INTEGER h6b_2
      INTEGER p7b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER h6
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_v))) THEN
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &6b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h6b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      h6b_1 = h6b
      p7b_1 = p7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h6b_2 = h6b
      p7b_2 = p7b
      p1b_2 = p1b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_12',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_12',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - no
     &ab - 1 + nvab * (h6b_1 - 1 + noab * (h4b_1 - 1 + noab * (h3b_1 - 1
     &)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_12',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_12',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_12',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h6 - 1))))
      idimb_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_12',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_12',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_12',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_12',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_12',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_12',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_12',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_12_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h6 p7 )_yt + = -1 * Sum ( p5 ) * t ( p5 h6 )_t * y ( h3 h4 p5 p7 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h6b
      INTEGER p7b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p7b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &6b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h6b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p7b_2 = p7b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h6b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_12_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_12_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_12_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_12_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_12_1',4)
      IF ((p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_12_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_12_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_12_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h6b - 1 + noab * (h4b - 1 + noab * (
     &h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_12_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_12_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_12_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_12_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_12_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h6 p7 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER h6b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_12_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &6b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h6b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h6b - 1 + noab * (h4b
     & - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_13(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_ytv + = -1/2 * P( 2 ) * Sum ( p6 ) * i1 ( p6 p1 )_yt * v ( h3 h4 p2 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER p6b
      INTEGER p6b_1
      INTEGER p1b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p2b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_v))) THEN
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      p6b_1 = p6b
      p1b_1 = p1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p2b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p2b_2 = p2b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_13',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_13',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_13',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_13',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_13',4)
      IF ((p6b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p2b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_13',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_13',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_13',7)
      IF ((p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_13',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_13',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_13',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_13',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_13_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p6 p1 )_yt + = 1 * Sum ( h8 h7 p5 ) * t ( p5 p6 h7 h8 )_t * y ( h7 h8 p1 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p6b
      INTEGER p1b
      INTEGER p5b
      INTEGER h7b
      INTEGER h8b
      INTEGER p6b_1
      INTEGER p5b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p6b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p6b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p5b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p6b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p6b_1 = p6b
      p5b_1 = p5b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+p6b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_13_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_13_1',1)
      IF ((p5b .le. p6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p6 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p6b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p6b_1 - n
     &oab - 1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p6 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_13_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_13_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_13_1',4)
      IF ((p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7
     &b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7
     &b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_13_1',5)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_13_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_13_1',7)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p6 + int_mb(k_range+p6b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p6b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_13_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_13_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_13_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_13_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_13_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p6 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p6b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_y2_13_1',0)
      size = 0
      DO p6b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p6b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (p6b - noab - 1)) = si
     &ze
      size = size + int_mb(k_range+p6b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_14(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_ytv + = 1/4 * Sum ( h9 h8 ) * i1 ( h3 h4 h8 h9 )_yt * v ( h8 h9 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h8b
      INTEGER h9b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER h4
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_v))) THEN
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p1b_2 = p1b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_14',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_14',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h4b_1 - 1 + noab * (h3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_14',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_14',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_14',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_14',5)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_14',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_14',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_14',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_14',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_14',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_14',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_14_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h8 h9 )_yt + = 1 * Sum ( p6 p5 ) * t ( p5 p6 h8 h9 )_t * y ( h3 h4 p5 p6 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h8b
      INTEGER h9b
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_14_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_14_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_14_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_14_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_14_1',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_14_1',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_14_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_14_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h8b - 1 + noab * (h4b - 1 + noab * (h3b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_14_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_14_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_14_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_14_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_14_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h8 h9 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER h8b
      INTEGER h9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_14_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      int_mb(k_a_offset + h9b - 1 + noab * (h8b - 1 + noab * (h4b - 1 + 
     &noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_14_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h4 h8 h9 )_ytt + = 2 * Sum ( p5 ) * t ( p5 h9 )_t * i2 ( h3 h4 h8 p5 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h9b
      INTEGER h8b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER h8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h9b = 1,noab
      DO h8b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_t))) THEN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p5b_1 = p5b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      h8b_2 = h8b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_14_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_14_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_14_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_14_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_14_2',4)
      IF ((h8b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (h8b_2 - 1 + noab * (h4b_2 - 1 + noab * (h3b_2 - 1
     &)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_14_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_14_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_14_2',7)
      IF ((h8b .le. h9b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h8 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h8b - 1 + noab * (h4b - 1 + noab * (h3b - 1
     &)))))
      END IF
      IF ((h9b .le. h8b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h8 - 1))))
      idimc = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h8b - 1 + noab * (h9b - 1 + noab * (h4b - 1 + noab * (h3b - 1
     &)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_14_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_14_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_14_2',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_14_2',11
     &)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_14_2_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h4 h8 p5 )_yt + = -1 * Sum ( p7 ) * t ( p7 h8 )_t * y ( h3 h4 p5 p7 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h8b
      INTEGER p5b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h8b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p5b_2 = p5b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h8b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_14_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_14_2_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_14_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_14_2_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_14_2_1',4)
      IF ((p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_14_2_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_14_2_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_14_2_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimc_sort = h8 + int_mb(k_range+h8b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p5 - 1))))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p5b - noab - 1 + nvab * (h8b - 1 + noab * (h4b - 1 + noab * (
     &h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_14_2_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_14_2_1',
     &9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_14_2_1',
     &10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_14_2_1',
     &11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_14_2_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h4 h8 p5 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h4b
      INTEGER h8b
      INTEGER p5b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_14_2_1',0)
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h8b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      int_mb(k_a_offset + p5b - noab - 1 + nvab * (h8b - 1 + noab * (h4b
     & - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+h8b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_15(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yttv + = -1 * P( 4 ) * Sum ( p5 h8 ) * i1 ( h3 p5 h8 p1 )_ytt * v ( h4 h8 p2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER p5b
      INTEGER h8b
      INTEGER h3b_1
      INTEGER p5b_1
      INTEGER p1b_1
      INTEGER h8b_1
      INTEGER h4b_2
      INTEGER h8b_2
      INTEGER p2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p5
      INTEGER p1
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,ieor(irrep_t,irrep_v)))) THEN
      DO p5b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h8b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_t))) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      h3b_1 = h3b
      p5b_1 = p5b
      p1b_1 = p1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p2b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h4b_2 = h4b
      h8b_2 = h8b
      p2b_2 = p2b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_15',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_15',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p1b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (h3
     &b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h3 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_15',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_15',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_15',4)
      IF ((h8b .lt. h4b) .and. (p5b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h8 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h4b) .and. (p2b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p2b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h8 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h8b) .and. (p5b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h8b) .and. (p2b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p2b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_15',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_15',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_15',7)
      IF ((h3b .le. h4b) .and. (p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h3b .le. h4b) .and. (p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p1b .le. p2b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF ((h4b .le. h3b) .and. (p2b .le. p1b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h3b - 1 + n
     &oab * (h4b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_15',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_15',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_15',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_15',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_y2_15_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p5 h8 p1 )_ytt + = 1 * Sum ( h6 ) * t ( p5 h6 )_t * i2 ( h3 h6 h8 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p5b
      INTEGER p1b
      INTEGER h8b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h3b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER h8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p1
      INTEGER h8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h8b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_t))) THEN
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      ELSE
      h3b_2 = h3b
      h6b_2 = h6b
      p1b_2 = p1b
      h8b_2 = h8b
      END IF
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_15_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_15_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_15_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_15_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_15_1',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h8b_2 - 1 
     &+ noab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h3b_2 - 1
     &)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idimb = h8 + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      idimb_sort = h6 + int_mb(k_range+h6b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_15_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_15_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_15_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idimc_sort = p5 + int_mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h8 - 1))))
      idimc = h8 + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h8b - 1 + noab * (p1b - noab - 1 + nvab * (p5b - noab - 1 + n
     &vab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_15_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_15_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_15_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_15_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_15_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p5 h8 p1 )_ytt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER p5b
      INTEGER p1b
      INTEGER h8b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_15_1',0)
      size = 0
      DO h3b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_y,ieor(irrep_t
     &,irrep_t))) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h8b - 1 + noab * (p1b - noab - 1 + nvab * (p5b
     & - noab - 1 + nvab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+p5b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_y2_15_1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h6 h8 p1 )_yt + = 1 * Sum ( p7 ) * t ( p7 h8 )_t * y ( h3 h6 p1 p7 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h6b
      INTEGER p1b
      INTEGER h8b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER h3b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER h3
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h6b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h8b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_2 = h3b
      h6b_2 = h6b
      p1b_2 = p1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h8b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_y2_15_1_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_y2_15_1_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_y2_15_1_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_y2_15_1_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_y2_15_1_1',4)
      IF ((h6b .lt. h3b) .and. (p7b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h3b_2 - 1 + noab * (h6
     &b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h6 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h3b) .and. (p1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h3b_2 - 1 + noab * (h6
     &b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h6 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h6b) .and. (p7b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h6b) .and. (p1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h3
     &b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_y2_15_1_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_y2_15_1_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_y2_15_1_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idimc_sort = h8 + int_mb(k_range+h8b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      idimc = h8 + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h8b - 1 + noab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (
     &h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_y2_15_1_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_y2_15_1_1',
     &9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_y2_15_1_1',
     &10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_y2_15_1_1',
     &11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_y2_15_1_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsd_y2.F,v 1.1 2003-09-16 21:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h6 h8 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h6b
      INTEGER p1b
      INTEGER h8b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_y2_15_1_1',0)
      size = 0
      DO h3b = 1,noab
      DO h6b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_y,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h8b - 1 + noab * (p1b - noab - 1 + nvab * (h6b
     & - 1 + noab * (h3b - 1)))) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
