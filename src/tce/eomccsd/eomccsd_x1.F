      SUBROUTINE eomccsd_x1(d_f1,d_i0,d_t1,d_t2,d_v2,d_x1,d_x2,k_f1_offs
     &et,k_i0_offset,k_t1_offset,k_t2_offset,k_v2_offset,k_x1_offset,k_x
     &2_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xf + = -1 * Sum ( h6 ) * x ( p2 h6 )_x * i1 ( h6 h1 )_f
C         i1 ( h6 h1 )_f + = 1 * f ( h6 h1 )_f
C         i1 ( h6 h1 )_ft + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h6 p7 )_f
C             i2 ( h6 p7 )_f + = 1 * f ( h6 p7 )_f
C             i2 ( h6 p7 )_vt + = 1 * Sum ( h5 p4 ) * t ( p4 h5 )_t * v ( h5 h6 p4 p7 )_v
C         i1 ( h6 h1 )_vt + = -1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 h1 p3 )_v
C         i1 ( h6 h1 )_vt + = -1/2 * Sum ( h5 p3 p4 ) * t ( p3 p4 h1 h5 )_t * v ( h5 h6 p3 p4 )_v
C     i0 ( p2 h1 )_xf + = 1 * Sum ( p6 ) * x ( p6 h1 )_x * i1 ( p2 p6 )_f
C         i1 ( p2 p6 )_f + = 1 * f ( p2 p6 )_f
C         i1 ( p2 p6 )_vt + = 1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 p2 p3 p6 )_v
C     i0 ( p2 h1 )_xv + = -1 * Sum ( p4 h3 ) * x ( p4 h3 )_x * v ( h3 p2 h1 p4 )_v
C     i0 ( p2 h1 )_xf + = 1 * Sum ( p7 h6 ) * x ( p2 p7 h1 h6 )_x * i1 ( h6 p7 )_f
C         i1 ( h6 p7 )_f + = 1 * f ( h6 p7 )_f
C         i1 ( h6 p7 )_vt + = 1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 p3 p7 )_v
C     i0 ( p2 h1 )_xv + = -1/2 * Sum ( p7 h8 h6 ) * x ( p2 p7 h6 h8 )_x * i1 ( h6 h8 h1 p7 )_v
C         i1 ( h6 h8 h1 p7 )_v + = 1 * v ( h6 h8 h1 p7 )_v
C         i1 ( h6 h8 h1 p7 )_vt + = 1 * Sum ( p3 ) * t ( p3 h1 )_t * v ( h6 h8 p3 p7 )_v
C     i0 ( p2 h1 )_xv + = -1/2 * Sum ( p5 p4 h3 ) * x ( p4 p5 h1 h3 )_x * v ( h3 p2 p4 p5 )_v
C     i0 ( p2 h1 )_fxt + = -1 * Sum ( h3 ) * t ( p2 h3 )_t * i1 ( h3 h1 )_fx
C         i1 ( h3 h1 )_fx + = 1 * Sum ( p7 ) * x ( p7 h1 )_x * i2 ( h3 p7 )_f
C             i2 ( h3 p7 )_f + = 1 * f ( h3 p7 )_f
C             i2 ( h3 p7 )_vt + = -1 * Sum ( h5 p4 ) * t ( p4 h5 )_t * v ( h3 h5 p4 p7 )_v
C         i1 ( h3 h1 )_vx + = 1 * Sum ( h4 p5 ) * x ( p5 h4 )_x * v ( h3 h4 h1 p5 )_v
C         i1 ( h3 h1 )_vx + = 1/2 * Sum ( h4 p5 p6 ) * x ( p5 p6 h1 h4 )_x * v ( h3 h4 p5 p6 )_v
C         i1 ( h3 h1 )_vxt + = 1 * Sum ( p4 ) * t ( p4 h1 )_t * i2 ( h3 p4 )_vx
C             i2 ( h3 p4 )_vx + = 1 * Sum ( h5 p6 ) * x ( p6 h5 )_x * v ( h3 h5 p4 p6 )_v
C     i0 ( p2 h1 )_vxt + = 1 * Sum ( p3 ) * t ( p3 h1 )_t * i1 ( p2 p3 )_vx
C         i1 ( p2 p3 )_vx + = -1 * Sum ( h4 p5 ) * x ( p5 h4 )_x * v ( h4 p2 p3 p5 )_v
C     i0 ( p2 h1 )_vxt + = 1 * Sum ( h4 p3 ) * t ( p2 p3 h1 h4 )_t * i1 ( h4 p3 )_vx
C         i1 ( h4 p3 )_vx + = 1 * Sum ( h5 p6 ) * x ( p6 h5 )_x * v ( h4 h5 p3 p6 )_v
C     i0 ( p2 h1 )_vxt + = -1/2 * Sum ( h4 h5 p3 ) * t ( p2 p3 h4 h5 )_t * i1 ( h4 h5 h1 p3 )_vx
C         i1 ( h4 h5 h1 p3 )_vx + = -1 * Sum ( p6 ) * x ( p6 h1 )_x * v ( h4 h5 p3 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_x1
      INTEGER k_x1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_x2
      INTEGER k_x2_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i1_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER size_i1
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      CHARACTER*255 filename
      CALL OFFSET_eomccsd_x1_1_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_1_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_eomccsd_x1_1_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('eomccsd_x1_1_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_x1_1_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsd_x1_1_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_x1_1_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_x1_1',-1
     &)
      CALL eomccsd_x1_1_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL eomccsd_x1_1_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_1(d_x1,k_x1_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL OFFSET_eomccsd_x1_2_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_2_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL eomccsd_x1_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_2(d_x1,k_x1_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL eomccsd_x1_3(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL OFFSET_eomccsd_x1_4_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_4_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL eomccsd_x1_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_4(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL OFFSET_eomccsd_x1_5_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_5_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL eomccsd_x1_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_5(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL eomccsd_x1_6(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL OFFSET_eomccsd_x1_7_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_eomccsd_x1_7_1_1(d_i2,l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('eomccsd_x1_7_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_x1_7_1_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsd_x1_7_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_x1_7_1(d_x1,k_x1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_x1_7',-1
     &)
      CALL eomccsd_x1_7_2(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL eomccsd_x1_7_3(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL OFFSET_eomccsd_x1_7_4_1(d_i2,l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('eomccsd_x1_7_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsd_x1_7_4_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsd_x1_7_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsd_x1_7',-1
     &)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_7(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL OFFSET_eomccsd_x1_8_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_8_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_8_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_8(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL OFFSET_eomccsd_x1_9_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_9_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_9_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_of
     &fset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_9(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offs
     &et)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      CALL OFFSET_eomccsd_x1_10_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsd_x1_10_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsd_x1_10_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsd_x1_10(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsd_x1',-1)
      RETURN
      END
      SUBROUTINE eomccsd_x1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xf + = -1 * Sum ( h6 ) * x ( p2 h6 )_x * i1 ( h6 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER h6b
      INTEGER p2b_1
      INTEGER h6b_1
      INTEGER h6b_2
      INTEGER h1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p2
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &x,irrep_f)) THEN
      DO h6b = 1,noab
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h6b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p2b_1 = p2b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      ELSE
      h6b_2 = h6b
      h1b_2 = h1b
      END IF
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p2b_1 - noab - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p2 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p2 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_1',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h1b_2 - 1 
     &+ noab * (h6b_2 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimb = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      idimb_sort = h6 + int_mb(k_range+h6b-1) * ((h1 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_1',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h1 )_f + = 1 * f ( h6 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h1b
      INTEGER h6b_1
      INTEGER h1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h6
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      h6b_1 = int_mb(k_alpha+h6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      h6b_1 = h6b
      h1b_1 = h1b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ (noab+nvab) * (h6b_1 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_x1_1_1',3)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h1b -
     & 1 + noab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_1_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER h1b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_1_1',0)
      size = 0
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h1b - 1 + noab * (h6b - 1)) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h1 )_ft + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h1b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p7b_1 = p7b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_2 = h6b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_1_2',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h6b_2 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_1_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_1_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_1_2',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_1_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_1_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 p7 )_f + = 1 * f ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p7b
      INTEGER h6b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h6
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      h6b_1 = int_mb(k_alpha+h6b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_1 = h6b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1_2_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h6b_1 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_x1_1_2_1',3)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1_2_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1_2_1',5
     &)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_1_2_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_1_2_1',0)
      size = 0
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h6b - 1)) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 p7 )_vt + = 1 * Sum ( h5 p4 ) * t ( p4 h5 )_t * v ( h5 h6 p4 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p7b
      INTEGER p4b
      INTEGER h5b
      INTEGER p4b_1
      INTEGER h5b_1
      INTEGER h6b_2
      INTEGER h5b_2
      INTEGER p7b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p4b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h5b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p4b_1 = p4b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h6b_2 = h6b
      h5b_2 = h5b
      p7b_2 = p7b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+h5b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_2_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1_2_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((p4 - 1))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1_2_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_2_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_1_2_2',4)
      IF ((h5b .le. h6b) .and. (p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h6b) .and. (p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h5b) .and. (p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h5b) .and. (p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_1_2_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_1_2_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_1_2_2',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1_2_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_1_2_2',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_1_2_2',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1_2_2',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h1 )_vt + = -1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 h1 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h1b
      INTEGER p3b
      INTEGER h4b
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h6b_2
      INTEGER h4b_2
      INTEGER h1b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p3b_1 = p3b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h6b_2 = h6b
      h4b_2 = h4b
      h1b_2 = h1b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1_3',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_1_3',4)
      IF ((h4b .le. h6b) .and. (h1b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h4b) .and. (h1b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_1_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_1_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_1_3',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_1_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_1_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h1 )_vt + = -1/2 * Sum ( h5 p3 p4 ) * t ( p3 p4 h1 h5 )_t * v ( h5 h6 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h1b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER h5b_1
      INTEGER h6b_2
      INTEGER h5b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER h5
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      h1b_1 = h1b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h6b_2 = h6b
      h5b_2 = h5b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_4',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_1_4',1)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_1_4',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_1_4',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_1_4',4)
      IF ((h5b .le. h6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_1_4',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_1_4',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_1_4',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_1_4',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_1_4',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_1_4',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_1_4',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xf + = 1 * Sum ( p6 ) * x ( p6 h1 )_x * i1 ( p2 p6 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p2b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &x,irrep_f)) THEN
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p6b_1 = p6b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p6b-1).eq
     &.4)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      p2b_2 = p2b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_2',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p2 - 1))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_2',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p6 )_f + = 1 * f ( p2 p6 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER p6b
      INTEGER p2b_1
      INTEGER p6b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p2
      INTEGER p6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p6b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p6b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p6b-1).eq
     &.4)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      ELSE
      p2b_1 = p2b
      p6b_1 = p6b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p2b-1) * int_mb(k_range+p6b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_2_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p6b_1 - 1 
     &+ (noab+nvab) * (p2b_1 - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idima = p6 + int_mb(k_range+p6b-1) * ((p2 - 1))
      idima_sort = p2 + int_mb(k_range+p2b-1) * ((p6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_x1_2_1',3)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idima_sort = p2 + int_mb(k_range+p2b-1) * ((p6 - 1))
      idimc = p6 + int_mb(k_range+p6b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p6b -
     & noab - 1 + nvab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_2_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_2_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_2_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p6 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p2b
      INTEGER p6b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_2_1',0)
      size = 0
      DO p2b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p6b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p6b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p6b - noab - 1 + nvab * (p2b - noab - 1)) = si
     &ze
      size = size + int_mb(k_range+p2b-1) * int_mb(k_range+p6b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p6 )_vt + = 1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 p2 p3 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER p6b
      INTEGER p3b
      INTEGER h4b
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER p2b_2
      INTEGER h4b_2
      INTEGER p6b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER p6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p6b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p6b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p3b_1 = p3b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      p2b_2 = p2b
      h4b_2 = h4b
      p6b_2 = p6b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_2_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_2_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_2_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_2_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_2_2',4)
      IF ((h4b .le. p2b) .and. (p3b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. p2b) .and. (p6b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_2_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_2_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_2_2',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((p6 - 1))
      idimc = p6 + int_mb(k_range+p6b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p6b - noab - 1 + nvab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_2_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_2_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_2_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_2_2',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xv + = -1 * Sum ( p4 h3 ) * x ( p4 h3 )_x * v ( h3 p2 h1 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p4b
      INTEGER h3b
      INTEGER p4b_1
      INTEGER h3b_1
      INTEGER p2b_2
      INTEGER h3b_2
      INTEGER h1b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &x,irrep_v)) THEN
      DO p4b = noab+1,noab+nvab
      DO h3b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h3b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h3b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      p2b_2 = p2b
      h3b_2 = h3b
      h1b_2 = h1b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+h3b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_3',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((p4 - 1))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h3 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_3',4)
      IF ((h3b .le. p2b) .and. (h1b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h3 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_3',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xf + = 1 * Sum ( p7 h6 ) * x ( p2 p7 h1 h6 )_x * i1 ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p7b
      INTEGER h6b
      INTEGER p2b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER h6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p2
      INTEGER h6
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &x,irrep_f)) THEN
      DO p7b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1).eq.8)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p2b_1 = p2b
      p7b_1 = p7b
      h1b_1 = h1b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_2 = h6b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p2b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_4',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_4',1)
      IF ((p7b .lt. p2b) .and. (h6b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p2b) .and. (h1b .le. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p7b) .and. (h6b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p2 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p7b) .and. (h1b .le. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p2 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_4',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_4',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_4',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h6b_2 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_4',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_4',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_4',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_4',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_4',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_4',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_4',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p7 )_f + = 1 * f ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p7b
      INTEGER h6b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h6
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      h6b_1 = int_mb(k_alpha+h6b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_1 = h6b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_4_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_4_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h6b_1 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_4_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_x1_4_1',3)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_4_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_4_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_4_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_4_1',0)
      size = 0
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h6b - 1)) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p7 )_vt + = 1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 p3 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p7b
      INTEGER p3b
      INTEGER h4b
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h6b_2
      INTEGER h4b_2
      INTEGER p7b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p3b_1 = p3b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h6b_2 = h6b
      h4b_2 = h4b
      p7b_2 = p7b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_4_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_4_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_4_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_4_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_4_2',4)
      IF ((h4b .le. h6b) .and. (p3b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h6b) .and. (p7b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h4b) .and. (p3b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h4b) .and. (p7b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_4_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_4_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_4_2',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_4_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_4_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_4_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_4_2',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xv + = -1/2 * Sum ( p7 h8 h6 ) * x ( p2 p7 h6 h8 )_x * i1 ( h6 h8 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p7b
      INTEGER h6b
      INTEGER h8b
      INTEGER p2b_1
      INTEGER p7b_1
      INTEGER h6b_1
      INTEGER h8b_1
      INTEGER h6b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p2
      INTEGER h6
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &x,irrep_v)) THEN
      DO p7b = noab+1,noab+nvab
      DO h6b = 1,noab
      DO h8b = h6b,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &6b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h6b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p2b_1 = p2b
      p7b_1 = p7b
      h6b_1 = h6b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_2 = h6b
      h8b_2 = h8b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_5',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_5',1)
      IF ((p7b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p2 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_5',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_5',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_5',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab * (h6b_2 - 1
     &)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_5',5)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h6b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_5',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_5',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_5',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_5',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_5',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_5',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h8 h1 p7 )_v + = 1 * v ( h6 h8 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h8b
      INTEGER h1b
      INTEGER p7b
      INTEGER h6b_1
      INTEGER h8b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h6
      INTEGER h8
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h8b = h6b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h6b_1 = int_mb(k_alpha+h6b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h6b_1 = h6b
      h8b_1 = h8b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_5_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_5_1',1)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h8b_1 - 1 + (noab+nvab
     &) * (h6b_1 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_5_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_x1_5_1',3)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (h6b - 1)))
     &))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_5_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_5_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_5_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h8 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER h8b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_x1_5_1',0)
      size = 0
      DO h6b = 1,noab
      DO h8b = h6b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h8b
     & - 1 + noab * (h6b - 1)))) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 h8 h1 p7 )_vt + = 1 * Sum ( p3 ) * t ( p3 h1 )_t * v ( h6 h8 p3 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h8b
      INTEGER h1b
      INTEGER p7b
      INTEGER p3b
      INTEGER p3b_1
      INTEGER h1b_1
      INTEGER h6b_2
      INTEGER h8b_2
      INTEGER p7b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER h8
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h8b = h6b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p3b_1 = p3b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h6b_2 = h6b
      h8b_2 = h8b
      p7b_2 = p7b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_5_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_5_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_5_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_5_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_5_2',4)
      IF ((p3b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_5_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_5_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_5_2',7)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (
     &h6b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_5_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_5_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_5_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_5_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_xv + = -1/2 * Sum ( p5 p4 h3 ) * x ( p4 p5 h1 h3 )_x * v ( h3 p2 p4 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p4b
      INTEGER p5b
      INTEGER h3b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h3b_1
      INTEGER p2b_2
      INTEGER h3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h3
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &x,irrep_v)) THEN
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h3b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h3b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h3b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h1b_1 = h1b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      p2b_2 = p2b
      h3b_2 = h3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_m
     &b(k_range+h3b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_6',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_6',1)
      IF ((h3b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h3b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_6',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_6',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_6',4)
      IF ((h3b .le. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h3 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_6',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_6',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_6',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_6',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_6',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_6',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_6',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_fxt + = -1 * Sum ( h3 ) * t ( p2 h3 )_t * i1 ( h3 h1 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER h3b
      INTEGER p2b_1
      INTEGER h3b_1
      INTEGER h3b_2
      INTEGER h1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,ieor(irrep_x,irrep_t))) THEN
      DO h3b = 1,noab
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1).eq
     &.4)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p2b_1 = p2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      ELSE
      h3b_2 = h3b
      h1b_2 = h1b
      END IF
      dim_common = int_mb(k_range+h3b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (p2b_1 - noab - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((p2 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p2 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h1b_2 - 1 
     &+ noab * (h3b_2 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimb = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      idimb_sort = h3 + int_mb(k_range+h3b-1) * ((h1 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h1 )_fx + = 1 * Sum ( p7 ) * x ( p7 h1 )_x * i2 ( h3 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h1b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,irrep_x)) THEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p7b_1 = p7b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7_1',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_1',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_7_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h1 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER h1b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_7_1',0)
      size = 0
      DO h3b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h1b - 1 + noab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p7 )_f + = 1 * f ( h3 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p7b
      INTEGER h3b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_1 = h3b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_1_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_1_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h3b_1 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h3 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_1_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsd_x1_7_1_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_1_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_1_1',5
     &)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_7_1_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_7_1_1',0)
      size = 0
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p7 )_vt + = -1 * Sum ( h5 p4 ) * t ( p4 h5 )_t * v ( h3 h5 p4 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b
      INTEGER h5b
      INTEGER p4b_1
      INTEGER h5b_1
      INTEGER h3b_2
      INTEGER h5b_2
      INTEGER p7b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p4b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h5b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p4b_1 = p4b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h3b_2 = h3b
      h5b_2 = h5b
      p7b_2 = p7b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+h5b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_1_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_1_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((p4 - 1))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_1_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_1_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7_1_2',4)
      IF ((h5b .lt. h3b) .and. (p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h5 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .lt. h3b) .and. (p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h5 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h5b) .and. (p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h3 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h5b) .and. (p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h3 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7_1_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7_1_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7_1_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_1_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7_1_2',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7_1_2',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_1_2',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h1 )_vx + = 1 * Sum ( h4 p5 ) * x ( p5 h4 )_x * v ( h3 h4 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h1b
      INTEGER p5b
      INTEGER h4b
      INTEGER p5b_1
      INTEGER h4b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p5b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h4b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p5b_1 = p5b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      h1b_2 = h1b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7_2',4)
      IF ((h4b .lt. h3b) .and. (h1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h4b) .and. (h1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7_2',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7_2',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_2',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h1 )_vx + = 1/2 * Sum ( h4 p5 p6 ) * x ( p5 p6 h1 h4 )_x * v ( h3 h4 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h1b
      INTEGER p5b
      INTEGER p6b
      INTEGER h4b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h4b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h4
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+h4b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_3',1)
      IF ((h4b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - n
     &oab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7_3',4)
      IF ((h4b .lt. h3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7_3',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7_3',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 h1 )_vxt + = 1 * Sum ( p4 ) * t ( p4 h1 )_t * i2 ( h3 p4 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h1b
      INTEGER p4b
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER h3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_x,irrep_t))) THEN
      DO p4b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p4b_1 = p4b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p4b-1).eq
     &.4)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h3b_2 = h3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_4',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_4',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p4 - 1))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_4',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_4',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7_4',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h3 - 1))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7_4',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7_4',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7_4',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_4',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7_4',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7_4',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_4',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_7_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p4 )_vx + = 1 * Sum ( h5 p6 ) * x ( p6 h5 )_x * v ( h3 h5 p4 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p4b
      INTEGER p6b
      INTEGER h5b
      INTEGER p6b_1
      INTEGER h5b_1
      INTEGER h3b_2
      INTEGER h5b_2
      INTEGER p4b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p4b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p4b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p6b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h5b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h5b-1).eq
     &.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p6b_1 = p6b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h3b_2 = h3b
      h5b_2 = h5b
      p4b_2 = p4b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h5b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_4_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_7_4_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_7_4_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_7_4_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_7_4_1',4)
      IF ((h5b .lt. h3b) .and. (p6b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h5 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .lt. h3b) .and. (p4b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h3b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h5 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h5b) .and. (p6b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h5b) .and. (p4b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h3 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_7_4_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_7_4_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_7_4_1',7)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((p4 - 1))
      idimc = p4 + int_mb(k_range+p4b-1) * ((h3 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (h3b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_7_4_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_7_4_1',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_7_4_1',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_7_4_1',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_7_4_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 p4 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h3b
      INTEGER p4b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_7_4_1',0)
      size = 0
      DO h3b = 1,noab
      DO p4b = noab+1,noab+nvab
      IF (int_mb(k_spin+h3b-1) .eq. int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+p4b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p4b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p4b - noab - 1 + nvab * (h3b - 1)) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+p4b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_vxt + = 1 * Sum ( p3 ) * t ( p3 h1 )_t * i1 ( p2 p3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p3b
      INTEGER p3b_1
      INTEGER h1b_1
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_x,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p3b_1 = p3b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      p2b_2 = p2b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_8',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_8',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_8',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_8',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_8',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_8',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_8',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_8',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_8',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_8',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_8',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_8',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_8_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p3 )_vx + = -1 * Sum ( h4 p5 ) * x ( p5 h4 )_x * v ( h4 p2 p3 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER p3b
      INTEGER p5b
      INTEGER h4b
      INTEGER p5b_1
      INTEGER h4b_1
      INTEGER p2b_2
      INTEGER h4b_2
      INTEGER p3b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p5b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h4b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p5b_1 = p5b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      p2b_2 = p2b
      h4b_2 = h4b
      p3b_2 = p3b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_8_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_8_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_8_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_8_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_8_1',4)
      IF ((h4b .le. p2b) .and. (p5b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. p2b) .and. (p3b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_8_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_8_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_8_1',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((p3 - 1))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_8_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_8_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_8_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_8_1',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_8_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p2b
      INTEGER p3b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_8_1',0)
      size = 0
      DO p2b = noab+1,noab+nvab
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p3b - noab - 1 + nvab * (p2b - noab - 1)) = si
     &ze
      size = size + int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_vxt + = 1 * Sum ( h4 p3 ) * t ( p2 p3 h1 h4 )_t * i1 ( h4 p3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p3b
      INTEGER h4b
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h1b_1
      INTEGER h4b_1
      INTEGER h4b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p2
      INTEGER h4
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_x,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p2b_1 = p2b
      p3b_1 = p3b
      h1b_1 = h1b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h4b_2 = h4b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p2b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_9',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_9',1)
      IF ((p3b .lt. p2b) .and. (h4b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .lt. p2b) .and. (h1b .le. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p3b) .and. (h4b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p3b) .and. (h1b .le. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_9',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_9',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_9',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_9',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_9',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_9',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_9',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_9',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_9',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_9',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_9_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 p3 )_vx + = 1 * Sum ( h5 p6 ) * x ( p6 h5 )_x * v ( h4 h5 p3 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER p3b
      INTEGER p6b
      INTEGER h5b
      INTEGER p6b_1
      INTEGER h5b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER p3b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p3b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),int_mb(k_sym+p3b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p6b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h5b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h5b-1).eq
     &.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p6b_1 = p6b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h4b_2 = h4b
      h5b_2 = h5b
      p3b_2 = p3b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h5b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_9_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_9_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_9_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_9_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_9_1',4)
      IF ((h5b .lt. h4b) .and. (p6b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h5 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .lt. h4b) .and. (p3b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h5 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h5b) .and. (p6b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h5b) .and. (p3b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_9_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_9_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_9_1',7)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p3 - 1))
      idimc = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (h4b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_9_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_9_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_9_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_9_1',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_9_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 p3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h4b
      INTEGER p3b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsd_x1_9_1',0)
      size = 0
      DO h4b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),int_mb(k_sym+p3b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p3b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p3b - noab - 1 + nvab * (h4b - 1)) = size
      size = size + int_mb(k_range+h4b-1) * int_mb(k_range+p3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsd_x1_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_vxt + = -1/2 * Sum ( h4 h5 p3 ) * t ( p2 p3 h4 h5 )_t * i1 ( h4 h5 h1 p3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER p3b
      INTEGER h4b
      INTEGER h5b
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h5b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER h1b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p2
      INTEGER h4
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_x,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      DO h5b = h4b,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &4b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h4b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p2b_1 = p2b
      p3b_1 = p3b
      h4b_1 = h4b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h4b_2 = h4b
      h5b_2 = h5b
      h1b_2 = h1b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_10',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_10',1)
      IF ((p3b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_10',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_10',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_10',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h5b_2 - 1 + noab * (h4b_2 - 1
     &)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_10',5)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h4b .eq. h5b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_10',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_10',7)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_10',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_10',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_10',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_10',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsd_x1_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 h5 h1 p3 )_vx + = -1 * Sum ( p6 ) * x ( p6 h1 )_x * v ( h4 h5 p3 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER h5b
      INTEGER h1b
      INTEGER p3b
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER p3b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER h5
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO h1b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p3b-1).ne.8)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p3b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p6b_1 = p6b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h4b_2 = h4b
      h5b_2 = h5b
      p3b_2 = p3b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+h5b-1) * int_mb
     &(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsd_x1_10_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsd_x1_10_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsd_x1_10_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsd_x1_10_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsd_x1_10_1',4)
      IF ((p6b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsd_x1_10_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsd_x1_10_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsd_x1_10_1',7)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p3 - 1))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (h1b - 1 + noab * (h5b - 1 + noab * (
     &h4b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsd_x1_10_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsd_x1_10_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsd_x1_10_1',10
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsd_x1_10_1',11
     &)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsd_x1_10_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsd_x1.F,v 1.1 2003-09-16 21:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 h5 h1 p3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h4b
      INTEGER h5b
      INTEGER h1b
      INTEGER p3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsd_x1_10_1',0)
      size = 0
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO h1b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p3b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p3b-1).ne.8)) THEN
      int_mb(k_a_offset + p3b - noab - 1 + nvab * (h1b - 1 + noab * (h5b
     & - 1 + noab * (h4b - 1)))) = size
      size = size + int_mb(k_range+h4b-1) * int_mb(k_range+h5b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
