      SUBROUTINE ccsdtq_t3_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: ccsdtq_t3_8.F,v 1.1 2003-09-16 21:50:34 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_tf + = 1 * Sum ( p11 h12 ) * t ( p4 p5 p6 p11 h1 h2 h3 h12 )_t * i1 ( h12 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p11b
      INTEGER h12b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h12b_1
      INTEGER h12b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h12
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_t,irrep_f)) THEN
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     &+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b
     &-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+h1b-1),ie
     &or(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h12b-
     &1)))))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+p11b-1)+int_mb(k_spin+h1b-1)+int_
     &mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h12b-1).eq.16)
     &) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      p11b_1 = p11b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p11b-1).
     &eq.4)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h12b_2 = h12b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * 
     &int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_t3_8',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_t3_8',1)
      IF ((p11b .lt. p4b) .and. (h12b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p11b_1 - noab - 1)))))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1
     &))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h1b .le. h12b) .and. (h12b .lt. h2b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p11b_1 - noab - 1)))))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1
     &))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h2b .le. h12b) .and. (h12b .lt. h3b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p11b_1 - noab - 1)))))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1
     &))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h3b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h3b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p11b_1 - noab - 1)))))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1
     &))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h12b .lt. h1b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h1b .le. h12b) .a
     &nd. (h12b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h2b .le. h12b) .a
     &nd. (h12b .lt. h3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h3b .le. h12b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h3b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h12b .lt. h1b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p11 - 1) + in
     &t_mb(k_range+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h1b .le. h12b) .a
     &nd. (h12b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p11 - 1) + in
     &t_mb(k_range+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h2b .le. h12b) .a
     &nd. (h12b .lt. h3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p11 - 1) + in
     &t_mb(k_range+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h3b .le. h12b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h3b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p11 - 1) + in
     &t_mb(k_range+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p6b .le. p11b) .and. (h12b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noa
     &b * (p11b_1 - noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p6 - 1) + i
     &nt_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p6b .le. p11b) .and. (h1b .le. h12b) .and. (h12b .lt. h2b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p11b_1 - noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p6 - 1) + i
     &nt_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p6b .le. p11b) .and. (h2b .le. h12b) .and. (h12b .lt. h3b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p11b_1 - noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p6 - 1) + i
     &nt_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p6b .le. p11b) .and. (h3b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h3b_1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noa
     &b * (p11b_1 - noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p4b_1 - noab - 1)))))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_
     &range+h1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p6 - 1) + i
     &nt_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 
     &1))))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((
     &h3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_t3_8',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_t3_8',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_t3_8',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (h12b_2 - 1)))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((h12 - 1))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_t3_8',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_t3_8',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_t3_8',7)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_t3_8',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_t3_8',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_t3_8',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_t3_8',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
