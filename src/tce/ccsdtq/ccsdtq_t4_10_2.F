      SUBROUTINE ccsdtq_t4_10_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: ccsdtq_t4_10_2.F,v 1.2 2003-10-19 00:53:19 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 1 * P( 2 ) * Sum ( h9 h10 ) * t ( p5 p6 p7 h1 h9 h10 )_t * i2 ( h9 h10 h2 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER h1b
      INTEGER h2b
      INTEGER p14b
      INTEGER h9b
      INTEGER h10b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER p7
      INTEGER h9
      INTEGER h10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER p14
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+p14b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+p14b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h9b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1)+int_m
     &b(k_spin+h10b-1).eq.12)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      p7b_1 = p7b
      h1b_1 = h1b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+p14b-1).eq.8)) THEN
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p14b_2 = int_mb(k_alpha+p14b-1)
      ELSE
      h9b_2 = h9b
      h10b_2 = h10b
      h2b_2 = h2b
      p14b_2 = p14b
      END IF
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+p7b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_t4_10_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_t4_10_2',1,MA_ERR)
      IF ((h10b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (p7b_1 - noab - 
     &1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_
     &mb(k_range+p6b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h1b) .and. (h1b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p7b_1 - noab - 
     &1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_
     &mb(k_range+p6b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 
     &1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_
     &mb(k_range+p6b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_t4_10_2',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_t4_10_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_t4_10_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p14b_2 - n
     &oab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h9b_2 -
     & 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      idimb = p14 + int_mb(k_range+p14b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p14 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_t4_10_2',5,MA_ERR
     &)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h9b .eq. h10b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_t4_10_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_t4_10_2',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      idimc_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p14 - 1)))
     &)))
      idimc = p14 + int_mb(k_range+p14b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p14b - noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * 
     &(p7b - noab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)
     &))))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      idimc_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p14 - 1)))
     &)))
      idimc = p14 + int_mb(k_range+p14b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p14b - noab - 1 + nvab * (h1b - 1 + noab * (h2b - 1 + noab * 
     &(p7b - noab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)
     &))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_t4_10_2',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_t4_10_2',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_t4_10_2',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_t4_10_2',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
