      SUBROUTINE ccsdtq_t3_11_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: ccsdtq_t3_11_3.F,v 1.1 2003-09-16 21:50:29 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 p5 h1 h2 h3 )_vt + = 1 * P( 3 ) * Sum ( h9 p11 ) * t ( p4 p5 p11 h1 h2 h9 )_t * i2 ( h9 h12 h3 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p11b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h9b_1
      INTEGER h12b_2
      INTEGER h9b_2
      INTEGER h3b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER p4
      INTEGER p5
      INTEGER h9
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h12b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h12b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p11b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h9b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h9b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h9b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p11b_1 = p11b
      h1b_1 = h1b
      h2b_1 = h2b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+h3b-1)+int_mb(k_spin+p11b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h12b_2 = h12b
      h9b_2 = h9b
      h3b_2 = h3b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_t3_11_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_t3_11_3',1)
      IF ((p11b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h1b .le. h9b) .and. (h9b .lt. h2b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h9b .lt. h1b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p11b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h1b .le. h9b) .an
     &d. (h9b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p11b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (p11b .lt. p5b) .and. (h2b .le. h9b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p11b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p11b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (h1b .le. h9b) .and. (h9b .lt. h2b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p11b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_t3_11_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_t3_11_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_t3_11_3',4)
      IF ((h9b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (h3b_2 - 1 + noab * (h12b_2 - 1 + noab * (h9b_2 -
     & 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (h3b_2 - 1 + noab * (h9b_2 - 1 + noab * (h12b_2 -
     & 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_t3_11_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_t3_11_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_t3_11_3',7)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h12b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h12b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_r
     &ange+h12b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h12b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_t3_11_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_t3_11_3',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_t3_11_3',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_t3_11_3',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
