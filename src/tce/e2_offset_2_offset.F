      SUBROUTINE e2_offset_2_offset(l_a_offset,k_a_offset,
     &                              l_b_offset,k_b_offset,
     &                              l_c_offset,k_c_offset,length)
C     $Id: e2_offset_2_offset.F,v 1.1 2006-05-31 23:13:56 kowalski Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     v ( g3 g4 g1 g2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset,l_b_offset,l_c_offset
      INTEGER k_a_offset,k_b_offset,k_c_offset
      INTEGER length
      INTEGER addr
      INTEGER g3b
      INTEGER g4b 
      INTEGER g1b
      INTEGER g2b
      INTEGER i,j,k,l
      INTEGER i1,j1,k1,l1
      INTEGER irow,icol,ires
      INTEGER INDEX_PAIR

c
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('tce_offset_2_offset',0,MA_ERR)
c alternative approach to store l_b_offset: coding(g3b,g4b,g1b,g2b) as a 
c                                           single integer 
c declaring l_b_offset as a global array 
      IF (.not.MA_PUSH_GET(mt_int,4*length+1,'noname',l_b_offset,k_b_off
     &set)) CALL ERRQUIT('tce_offset_2_offset',0,MA_ERR)
c  here l_v2spin_offset
      IF (.not.MA_PUSH_GET(mt_int,length+1,'noname',l_c_offset,
     &k_c_offset)) CALL ERRQUIT('tce_offset_2_offset',0,MA_ERR)


      int_mb(k_a_offset) = length
      int_mb(k_b_offset) = length
      int_mb(k_c_offset) = length 
c initial  zeroing
      do i=1,length
        int_mb(k_a_offset+i)         = 0
        int_mb(k_a_offset+i+length)  = 0
        int_mb(k_b_offset+i)         = 0
        int_mb(k_b_offset+i+length)  = 0 
        int_mb(k_b_offset+i+2*length)= 0
        int_mb(k_b_offset+i+3*length)= 0
        int_mb(k_c_offset+i)         = 0
      end do
c
      addr = 0
      DO g3b = 1,noab+nvab   
      DO g4b = g3b,noab+nvab 
      DO g1b = 1,noab+nvab   
      DO g2b = g1b,noab+nvab 
      IF (int_mb(k_spin+g3b-1)+int_mb(k_spin+g4b-1) .eq. int_mb(k_spin+g
     &1b-1)+int_mb(k_spin+g2b-1)) THEN
      IF (ieor(int_mb(k_sym+g3b-1),ieor(int_mb(k_sym+g4b-1),ieor(int_mb(
     &k_sym+g1b-1),int_mb(k_sym+g2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+g3b-1)+int_mb(k_spin+g4b-1
     &)+int_mb(k_spin+g1b-1)+int_mb(k_spin+g2b-1).ne.8)) THEN
      addr = addr + 1
c first half
      j1 = int_mb(k_b2am+g3b-1)
      i1 = int_mb(k_b2am+g1b-1)
      l1 = int_mb(k_b2am+g4b-1)
      k1 = int_mb(k_b2am+g2b-1)
      if(i1.ge.j1) then
       i = i1
       j = j1
      else
       i = j1
       j = i1
      end if
      if(k1.ge.l1) then
       k = k1
       l = l1
      else
       k = l1
       l = k1
      end if
       irow = INDEX_PAIR(i,j)
       icol = INDEX_PAIR(k,l)
       if(irow.ge.icol) then
        ires = INDEX_PAIR(irow,icol)
       else
        ires = INDEX_PAIR(icol,irow)
       end if
       int_mb(k_a_offset+addr) = IRES
c  second half
      j1 = int_mb(k_b2am+g3b-1)
      i1 = int_mb(k_b2am+g2b-1)
      l1 = int_mb(k_b2am+g4b-1)
      k1 = int_mb(k_b2am+g1b-1)
      if(i1.ge.j1) then
       i = i1
       j = j1
      else
       i = j1
       j = i1
      end if
      if(k1.ge.l1) then
       k = k1
       l = l1
      else
       k = l1
       l = k1
      end if
       irow = INDEX_PAIR(i,j)
       icol = INDEX_PAIR(k,l)
       if(irow.ge.icol) then
        ires = INDEX_PAIR(irow,icol)
       else
        ires = INDEX_PAIR(icol,irow)
       end if
       int_mb(k_a_offset+length+addr) = ires
c
       int_mb(k_b_offset+addr) = g3b
       int_mb(k_b_offset+length+addr) = g4b
       int_mb(k_b_offset+2*length+addr) = g1b
       int_mb(k_b_offset+3*length+addr) = g2b
c
      int_mb(k_c_offset+addr) = g2b-1+(noab+nvab)*(g1b-1+
     &(noab+nvab)*(g4b-1+(noab+nvab)*(g3b-1)))
c
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
c
      RETURN
      END


