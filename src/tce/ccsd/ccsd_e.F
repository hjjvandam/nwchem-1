      SUBROUTINE ccsd_e(d_f1,d_i0,d_t1,d_t2,d_v2,k_f1_offset,k_i0_offset
     &,k_t1_offset,k_t2_offset,k_v2_offset)
C     $Id: ccsd_e.F,v 1.3 2003-10-19 00:52:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_tf + = 1 * Sum ( p5 h6 ) * t ( p5 h6 )_t * i1 ( h6 p5 )_f
C         i1 ( h6 p5 )_f + = 1 * f ( h6 p5 )_f
C         i1 ( h6 p5 )_vt + = 1/2 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 p3 p5 )_v
C     i0 ( )_vt + = 1/4 * Sum ( h3 h4 p1 p2 ) * t ( p1 p2 h3 h4 )_t * v ( h3 h4 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER l_i1_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER size_i1
      CHARACTER*255 filename
      CALL OFFSET_ccsd_e_1_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsd_e_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsd_e_1_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ccsd_e_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_offset
     &)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsd_e_1(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsd_e',-1,MA_ER
     &R)
      CALL ccsd_e_2(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i0,k_i0_offset)
      RETURN
      END
      SUBROUTINE ccsd_e_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: ccsd_e.F,v 1.3 2003-10-19 00:52:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_tf + = 1 * Sum ( p5 h6 ) * t ( p5 h6 )_t * i1 ( h6 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h6b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_t,irrep_f)) THEN
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1).eq
     &.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p5b_1 = p5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h6b_2 = h6b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsd_e_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsd_e_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_e_1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsd_e_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsd_e_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (h6b_2 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_e_1',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsd_e_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsd_e_1',7,MA_ERR)
      idimc_sort = 1
      idimc = 1
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_e_1',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsd_e_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsd_e_1',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsd_e_1',11,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_e_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsd_e.F,v 1.3 2003-10-19 00:52:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p5 )_f + = 1 * f ( h6 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p5b
      INTEGER h6b_1
      INTEGER p5b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h6
      INTEGER p5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h6b_1 = int_mb(k_alpha+h6b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      ELSE
      h6b_1 = h6b
      p5b_1 = p5b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsd_e_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsd_e_1_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p5b_1 - 1 
     &+ (noab+nvab) * (h6b_1 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_e_1_1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsd_e_1_1',3,MA_ERR)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p5b -
     & noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_e_1_1',4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsd_e_1_1',5,MA_ER
     &R)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsd_e_1_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: ccsd_e.F,v 1.3 2003-10-19 00:52:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER p5b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsd_e_1_1',0,MA_ERR)
      size = 0
      DO h6b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p5b - noab - 1 + nvab * (h6b - 1)) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsd_e_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: ccsd_e.F,v 1.3 2003-10-19 00:52:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p5 )_vt + = 1/2 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 p3 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p5b
      INTEGER p3b
      INTEGER h4b
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h6b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p3b_1 = p3b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h6b_2 = h6b
      h4b_2 = h4b
      p5b_2 = p5b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsd_e_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsd_e_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_e_1_2',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsd_e_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsd_e_1_2',4,MA_ERR)
      IF ((h4b .le. h6b) .and. (p3b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h6b) .and. (p5b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h4b) .and. (p3b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h4b) .and. (p5b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h6b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_e_1_2',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsd_e_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsd_e_1_2',7,MA_ERR)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimc_sort = h6 + int_mb(k_range+h6b-1) * ((p5 - 1))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h6 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p5b - noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_e_1_2',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsd_e_1_2',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsd_e_1_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsd_e_1_2',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_e_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: ccsd_e.F,v 1.3 2003-10-19 00:52:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_vt + = 1/4 * Sum ( h3 h4 p1 p2 ) * t ( p1 p2 h3 h4 )_t * v ( h3 h4 p1 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER h3
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_v,irrep_t)) THEN
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h3b = 1,noab
      DO h4b = h3b,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      h3b_1 = h3b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p1b_2 = p1b
      p2b_2 = p2b
      END IF
      dim_common = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_m
     &b(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsd_e_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsd_e_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h3b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_e_2',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsd_e_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsd_e_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_e_2',5,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p1b .eq. p2b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h3b .eq. h4b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsd_e_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,4.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsubh(1))/FACTORIAL(ns
     &ubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.
     &0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsd_e_2',7,MA_ERR)
      idimc_sort = 1
      idimc = 1
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_e_2',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsd_e_2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsd_e_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsd_e_2',11,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
