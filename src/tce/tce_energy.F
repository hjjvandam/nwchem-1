      logical function tce_energy(rtdb)
c
c $Id: tce_energy.F,v 1.2 2002-10-21 21:59:11 sohirata Exp $
c 
c Main routine for many-electron theory calculations.
c Some of the subroutines have been generated by 
c operator/tensor contraction engines.
c
c Written by So Hirata, Oct 2002. (c) Battelle, PNNL, 2002.
c
c =============================================================
c Besides the programs in nwchem/src/tce, we need to update the
c following codes in CVS, which are modified for this module:
c
c config/nwchem_config.h
c config/make_nwchem_config
c input/input_parse.F
c task/task_energy.F
c nwdft/scf_dft/dft_scf.F
c
c also needed (but not modified) are
c
c ddscf/fast/xlm_poles.F
c
      implicit none
#include "mafdecls.fh"
#include "tcgmsg.fh"
#include "global.fh"
#include "bas.fh"
#include "geom.fh"
#include "rtdb.fh"
#include "sym.fh"
#include "util.fh"
#include "msgids.fh"
#include "stdio.fh"
#include "tce.fh"
c
      integer rtdb             ! Run-time database
      logical nodezero         ! True if node 0
      double precision cpu     ! CPU sec counter
      integer g_ao1e(2)        ! GA handle for AO Fock matrices
      integer d_ao2e           ! SF handle for AO 2e integrals
      integer d_mo1e           ! SF handle for MO 1e integrals
      integer l_1e_offset      ! Offset for 1e integral file
      integer k_1e_offset      ! Offset for 1e integral file
      integer size_1e          ! File size in doubles
      integer d_mo2e           ! SF handle for MO 2e integrals
      integer l_2e_offset      ! Offset for 2e integral file
      integer k_2e_offset      ! Offset for 2e integral file
      integer size_2e          ! File size in doubles
      integer d_t1             ! SF handle for t1 amplitudes
      integer l_t1_offset      ! Offset for t1 file
      integer k_t1_offset      ! Offset for t1 file
      integer size_t1          ! File size in doubles
      integer d_t2             ! SF handle for t2 amplitudes
      integer l_t2_offset      ! Offset for t2 file
      integer k_t2_offset      ! Offset for t2 file
      integer size_t2          ! File size in doubles
      integer d_r1             ! SF handle for r1 amplitudes
      integer l_r1_offset      ! Offset for r1 file
      integer k_r1_offset      ! Offset for r1 file
      integer size_r1          ! File size in doubles
      integer d_r2             ! SF handle for r2 amplitudes
      integer l_r2_offset      ! Offset for r2 file
      integer k_r2_offset      ! Offset for r2 file
      integer size_r2          ! File size in doubles
      integer d_e              ! SF handle for e file
      integer l_e_offset       ! Offset for e file
      integer k_e_offset       ! Offset for e file
      integer size_e           ! File size in doubles
      double precision hf      ! Ground state energy
      double precision corr    ! Correlation energy
      double precision r1      ! Residual t1
      double precision r2      ! Residual t2
      double precision residual! Largest residual
      integer iter             ! Iteration counter
      character*20 filename
      logical dft_energy
      external dft_energy
c
      nodezero=(ga_nodeid().eq.0)
c
c     =========================
c     Ground-state HF/DFT first
c     =========================
c
      tce_energy = .false.
      if (.not.dft_energy(rtdb)) then
        return
      endif
      if (.not.rtdb_get(rtdb,'dft:energy',mt_dbl,1,hf))
     1  call errquit('tce_energy: failed to get dft energy',0)
c
c     ===================
c     Print utility start
c     ===================
c
      call util_print_push
      call util_print_rtdb_load(rtdb,'tce')
c
c     ==========
c     Initialize
c     ==========
c
      call tce_init(rtdb)
c
c     =========================
c     Reorder and tile orbitals
c     =========================
c
      call tce_tile
c
c     ================================
c     Parallel integral transformation
c     ================================
c
c     1-e integrals
c
      cpu = - util_cpusec()
      call tce_ao1e(rtdb,g_ao1e)
      call util_file_name('f1',.true.,.false.,filename)
      call tce_mo1e_offset(l_1e_offset,k_1e_offset,size_1e)
      call createfile(filename,d_mo1e,size_1e)
      call tce_mo1e(g_ao1e,d_mo1e)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('mo1e',print_default)) then
        write(LuOut,*)
        write(LuOut,9000) '1-e',size_1e
        write(LuOut,9010) '1-e',filename
        write(LuOut,9090) '1-e',d_mo1e
        write(LuOut,9020) cpu
      endif
c
c     2-e integrals first half
c
      cpu = - util_cpusec()
      call tce_ao2e(rtdb,d_ao2e)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('time',print_default))
     1  write(LuOut,9020) cpu
c
c     2-e integrals second half
c
      cpu = - util_cpusec()
      call util_file_name('v2',.true.,.false.,filename)
      call tce_mo2e_offset(l_2e_offset,k_2e_offset,size_2e)
      call createfile(filename,d_mo2e,size_2e)
      call tce_mo2e(rtdb,d_ao2e,d_mo2e)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('mo2e',print_default)) then
        write(LuOut,*)
        write(LuOut,9000) '2-e',size_2e
        write(LuOut,9010) '2-e',filename
        write(LuOut,9090) '2-e',d_mo2e
        write(LuOut,9020) cpu
      endif
c
c     ====================
c     Initial t amplitudes
c     ====================
c
c     t1 amplitudes
c
      cpu = - util_cpusec()
      call util_file_name('t1',.true.,.false.,filename)
      call tce_t1_offset(l_t1_offset,k_t1_offset,size_t1)
      call createfile(filename,d_t1,size_t1)
      call tce_guess_t1(d_t1,k_t1_offset)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('t1',print_default)) then
        write(LuOut,*)
        write(LuOut,9000) 't1',size_t1
        write(LuOut,9010) 't1',filename
        write(LuOut,9090) 't1',d_t1
        write(LuOut,9020) cpu
      endif
c
c     t2 amplitudes
c
      cpu = - util_cpusec()
      call util_file_name('t2',.true.,.false.,filename)
      call tce_t2_offset(l_t2_offset,k_t2_offset,size_t2)
      call createfile(filename,d_t2,size_t2)
      call tce_guess_t2(d_mo2e,k_2e_offset,d_t2,k_t2_offset)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('t2',print_default)) then
        write(LuOut,*)
        write(LuOut,9000) 't2',size_t2
        write(LuOut,9010) 't2',filename
        write(LuOut,9090) 't2',d_t2
        write(LuOut,9020) cpu
      endif
c
c     =======
c     MBPT(2)
c     =======
c
      cpu = - util_cpusec()
      call tce_mbpt2(d_mo2e,k_2e_offset,d_t2,k_t2_offset,corr)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('mp2',print_default)) then
        write(LuOut,*)
        write(LuOut,9030) corr
        write(LuOut,9040) hf + corr
        write(LuOut,9020) cpu
      endif
c
c     ======================
c     Coupled-cluster theory
c     ======================
c
c     Create residual files
c
      call util_file_name('e',.true.,.false.,filename)
      call tce_e_offset(l_e_offset,k_e_offset,size_e)
      call createfile(filename,d_e,size_e)
      if ((model.eq.'ccd').or.(model.eq.'CCD')) then
        call util_file_name('r2',.true.,.false.,filename)
        call tce_t2_offset(l_r2_offset,k_r2_offset,size_r2)
        call createfile(filename,d_r2,size_r2)
      else if ((model.eq.'lccd').or.(model.eq.'LCCD')) then
        call util_file_name('r2',.true.,.false.,filename)
        call tce_t2_offset(l_r2_offset,k_r2_offset,size_r2)
        call createfile(filename,d_r2,size_r2)
      else if ((model.eq.'ccsd').or.(model.eq.'CCSD')) then
        call util_file_name('r1',.true.,.false.,filename)
        call tce_t1_offset(l_r1_offset,k_r1_offset,size_r1)
        call createfile(filename,d_r1,size_r1)
        call util_file_name('r2',.true.,.false.,filename)
        call tce_t2_offset(l_r2_offset,k_r2_offset,size_r2)
        call createfile(filename,d_r2,size_r2)
      else
        call errquit('tce_energy: unknown theory',0)
      endif
c
c     CC iterations
c
      write(LuOut,9050)
      do iter=1,maxiter
        cpu=-util_cpusec()
        if ((model.eq.'ccd').or.(model.eq.'CCD')) then
          call ccd_e(d_e,k_e_offset,d_t2,k_t2_offset,
     1               d_mo2e,k_2e_offset)
          call ccd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                d_t2,k_t2_offset,d_mo1e,k_1e_offset)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = r2
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            write(LuOut,9060)
            write(LuOut,9070) "CCD",corr
            write(LuOut,9080) "CCD",hf + corr
            goto 100 
          endif
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        else if ((model.eq.'lccd').or.(model.eq.'LCCD')) then
          call lccd_e(d_e,k_e_offset,d_t2,k_t2_offset,
     1                d_mo2e,k_2e_offset)
          call lccd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                 d_mo1e,k_1e_offset,d_t2,k_t2_offset)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = r2
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            write(LuOut,9060)
            write(LuOut,9070) "LCCD",corr
            write(LuOut,9080) "LCCD",hf + corr
            goto 100 
          endif
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        else if ((model.eq.'ccsd').or.(model.eq.'CCSD')) then
          call ccsd_e(d_e,k_e_offset,d_t1,k_t1_offset,
     1                d_t2,k_t2_offset,d_mo2e,k_2e_offset,
     2                d_mo1e,k_1e_offset)
          call ccsd_t1(d_r1,k_r1_offset,d_mo1e,k_1e_offset,
     1                 d_t1,k_t1_offset,d_mo2e,k_2e_offset,
     2                 d_t2,k_t2_offset)
          call ccsd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                 d_t1,k_t1_offset,d_t2,k_t2_offset,
     2                 d_mo1e,k_1e_offset)
          call tce_residual_t1(d_r1,k_r1_offset,r1)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = max(r1,r2)
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            write(LuOut,9060)
            write(LuOut,9070) "CCSD",corr
            write(LuOut,9080) "CCSD",hf + corr
            goto 100 
          endif
          call tce_jacobi_t1(d_r1,k_r1_offset,d_t1,k_t1_offset)
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r1,size_r1)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        endif
      enddo
      call errquit('tce_energy: number of iterations exceeded maxiter',
     1  iter)
c
c     Write energy to RTDB
c
  100 continue
      if (.not.rtdb_put(rtdb,'tce:energy',mt_dbl,1,hf+corr))
     1  call errquit('tce_energy: RTDB problem',0)
      tce_energy=.true.
c
c     Delete files
c
      if ((model.eq.'ccd').or.(model.eq.'CCD')) then
        call deletefile(d_r2)
        if (.not.ma_pop_stack(l_r2_offset))
     1    call errquit("tce_energy: MA problem",21)
      else if ((model.eq.'lccd').or.(model.eq.'LCCD')) then
        call deletefile(d_r2)
        if (.not.ma_pop_stack(l_r2_offset))
     1    call errquit("tce_energy: MA problem",22)
      else if ((model.eq.'ccsd').or.(model.eq.'CCSD')) then
        call deletefile(d_r2)
        call deletefile(d_r1)
        if (.not.ma_pop_stack(l_r2_offset))
     1    call errquit("tce_energy: MA problem",23)
        if (.not.ma_pop_stack(l_r1_offset))
     1    call errquit("tce_energy: MA problem",24)
      endif
      call deletefile(d_e)
      if (.not.ma_pop_stack(l_e_offset))
     1  call errquit("tce_energy: MA problem",20)
c
c     ======
c     Return
c     ======
c
      if (.not.ma_pop_stack(l_t2_offset))
     1  call errquit("tce_energy: MA problem",0)
      if (.not.ma_pop_stack(l_t1_offset))
     1  call errquit("tce_energy: MA problem",1)
      if (.not.ma_pop_stack(l_2e_offset))
     1  call errquit("tce_energy: MA problem",2)
      if (.not.ma_pop_stack(l_1e_offset))
     1  call errquit("tce_energy: MA problem",3)
      if (.not.ma_pop_stack(l_offset))
     1  call errquit("tce_energy: MA problem",4)
      if (.not.ma_pop_stack(l_range))
     1  call errquit("tce_energy: MA problem",5)
      if (.not.ma_pop_stack(l_sym))
     1  call errquit("tce_energy: MA problem",6)
      if (.not.ma_pop_stack(l_spin))
     1  call errquit("tce_energy: MA problem",7)
      if (.not.ma_pop_stack(l_evl_sorted))
     1  call errquit("tce_energy: MA problem",8)
      if (.not.ma_pop_stack(l_irs_sorted))
     1  call errquit("tce_energy: MA problem",9)
      if (.not.ma_pop_stack(l_spin_sorted))
     1  call errquit("tce_energy: MA problem",10)
      if (.not.ma_pop_stack(l_movecs_sorted))
     1  call errquit("tce_energy: MA problem",11)
      call tce_tidy(rtdb)
      call util_print_pop
      return
c
c     ======
c     Format
c     ======
c
 9000 format(1x,A,' file size   = ',i10)
 9010 format(1x,A,' file name   = ',A)
 9090 format(1x,A,' file handle = ',i10)
 9020 format(1x,'Cpu time / sec',f15.1)
 9030 format(1x,'MBPT(2) correlation energy = ',f25.15,' hartree')
 9040 format(1x,'MBPT(2) total energy       = ',f25.15,' hartree')
 9050 format(/,
     1  1x,'-------------------------------------------------------',/
     2  1x,'Iter            Residuum         Correlation    Cpu/Sec',/
     3  1x,'-------------------------------------------------------')
 9060 format(
     1  1x,'-------------------------------------------------------',/
     2  1x,'CC iteration converged')
 9070 format(1x,A,' correlation energy = ',f25.15,' hartree')
 9080 format(1x,A,' total energy       = ',f25.15,' hartree')
 9100 format(2x,i4,2f20.15,f10.1)
      end
