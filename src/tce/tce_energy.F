      logical function tce_energy(rtdb)
c
c $Id: tce_energy.F,v 1.12 2002-10-30 21:49:14 sohirata Exp $
c 
c Main routine for many-electron theory calculations.
c Some of the subroutines have been generated by 
c operator/tensor contraction engines.
c
c Written by So Hirata, Oct 2002. (c) Battelle, PNNL, 2002.
c
c =============================================================
c Besides the programs in nwchem/src/tce, we need to update the
c following codes in CVS, which are modified for this module:
c
c config/nwchem_config.h
c config/make_nwchem_config
c input/input_parse.F
c task/task_energy.F
c nwdft/scf_dft/dft_scf.F
c tools/pario/sf/shared.files.c
c util/msgids.fh
c
c also needed (but not modified) are
c
c ddscf/fast/xlm_poles.F
c
      implicit none
#include "mafdecls.fh"
#include "tcgmsg.fh"
#include "global.fh"
#include "bas.fh"
#include "geom.fh"
#include "rtdb.fh"
#include "sym.fh"
#include "util.fh"
#include "msgids.fh"
#include "stdio.fh"
#include "sf.fh"
#include "tce.fh"
c
      integer rtdb             ! Run-time database
      logical nodezero         ! True if node 0
      double precision cpu     ! CPU sec counter
      integer g_ao1e(2)        ! GA handle for AO Fock matrices
      integer d_ao2e           ! SF handle for AO 2e integrals
      integer d_mo1e           ! SF handle for MO 1e integrals
      integer l_1e_offset      ! Offset for 1e integral file
      integer k_1e_offset      ! Offset for 1e integral file
      integer size_1e          ! File size in doubles
      integer d_mo2e           ! SF handle for MO 2e integrals
      integer l_2e_offset      ! Offset for 2e integral file
      integer k_2e_offset      ! Offset for 2e integral file
      integer size_2e          ! File size in doubles
      integer d_t1             ! SF handle for t1 amplitudes
      integer l_t1_offset      ! Offset for t1 file
      integer k_t1_offset      ! Offset for t1 file
      integer size_t1          ! File size in doubles
      integer d_t2             ! SF handle for t2 amplitudes
      integer l_t2_offset      ! Offset for t2 file
      integer k_t2_offset      ! Offset for t2 file
      integer size_t2          ! File size in doubles
      integer d_t3             ! SF handle for t3 amplitudes
      integer l_t3_offset      ! Offset for t3 file
      integer k_t3_offset      ! Offset for t3 file
      integer size_t3          ! File size in doubles
      integer d_t4             ! SF handle for t4 amplitudes
      integer l_t4_offset      ! Offset for t4 file
      integer k_t4_offset      ! Offset for t4 file
      integer size_t4          ! File size in doubles
      integer d_r1             ! SF handle for r1 amplitudes
      integer l_r1_offset      ! Offset for r1 file
      integer k_r1_offset      ! Offset for r1 file
      integer size_r1          ! File size in doubles
      integer d_r2             ! SF handle for r2 amplitudes
      integer l_r2_offset      ! Offset for r2 file
      integer k_r2_offset      ! Offset for r2 file
      integer size_r2          ! File size in doubles
      integer d_r3             ! SF handle for r3 amplitudes
      integer l_r3_offset      ! Offset for r3 file
      integer k_r3_offset      ! Offset for r3 file
      integer size_r3          ! File size in doubles
      integer d_r4             ! SF handle for r4 amplitudes
      integer l_r4_offset      ! Offset for r4 file
      integer k_r4_offset      ! Offset for r4 file
      integer size_r4          ! File size in doubles
      integer d_e              ! SF handle for e file
      integer l_e_offset       ! Offset for e file
      integer k_e_offset       ! Offset for e file
      integer size_e           ! File size in doubles
      double precision hf      ! Ground state energy
      double precision corr    ! Correlation energy
      double precision r1      ! Residual t1
      double precision r2      ! Residual t2
      double precision r3      ! Residual t3
      double precision r4      ! Residual t4
      double precision residual! Largest residual
      integer iter             ! Iteration counter
      logical needt1
      logical needt2
      logical needt3
      logical needt4
      character*255 filename
      logical dft_energy
      external dft_energy
c
      nodezero=(ga_nodeid().eq.0)
c
c     =========================
c     Ground-state HF/DFT first
c     =========================
c
      tce_energy = .false.
      if (.not.dft_energy(rtdb)) then
        return
      endif
      if (.not.rtdb_get(rtdb,'dft:energy',mt_dbl,1,hf))
     1  call errquit('tce_energy: failed to get dft energy',0)
c
c     ===================
c     Print utility start
c     ===================
c
      call util_print_push
      call util_print_rtdb_load(rtdb,'tce')
c
c     ==========
c     Initialize
c     ==========
c
      call tce_init(rtdb)
      call util_flush(LuOut)
c
c     ==============
c     Create a mutex
c     ==============
c
      if (.not.ga_create_mutexes(1))
     1  call errquit('tce_energy: GA problem',0)
c
c     =========================
c     Reorder and tile orbitals
c     =========================
c
      call tce_tile
      call sf_test
c
c     ================================
c     Parallel integral transformation
c     ================================
c
c     1-e integrals
c
      cpu = - util_cpusec()
      call tce_ao1e(rtdb,g_ao1e)
      call util_file_name('f1',.true.,.false.,filename)
      call tce_mo1e_offset(l_1e_offset,k_1e_offset,size_1e)
      call createfile(filename,d_mo1e,size_1e)
      call tce_mo1e(g_ao1e,d_mo1e)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('mo1e',print_default)) then
        write(LuOut,*)
        write(LuOut,9000) '1-e',size_1e
        write(LuOut,9010) '1-e',filename(1:20)
c       write(LuOut,9090) '1-e',d_mo1e
        write(LuOut,9020) cpu
        call util_flush(LuOut)
      endif
c
c     2-e integrals first half
c
      cpu = - util_cpusec()
      call tce_ao2e(rtdb,d_ao2e)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('time',print_default))
     1  write(LuOut,9020) cpu
      call util_flush(LuOut)
c
c     2-e integrals second half
c
      cpu = - util_cpusec()
      call util_file_name('v2',.true.,.false.,filename)
      call tce_mo2e_offset(l_2e_offset,k_2e_offset,size_2e)
      call createfile(filename,d_mo2e,size_2e)
      call tce_mo2e(rtdb,d_ao2e,d_mo2e,k_2e_offset)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('mo2e',print_default)) then
        write(LuOut,*)
        write(LuOut,9000) '2-e',size_2e
        write(LuOut,9010) '2-e',filename(1:20)
c       write(LuOut,9090) '2-e',d_mo2e
        write(LuOut,9020) cpu
        call util_flush(LuOut)
      endif
c
c     ====================
c     Initial t amplitudes
c     ====================
c
      needt1 = .false.
      needt2 = .false.
      needt3 = .false.
      needt4 = .false.
      if (model.eq.'ccd') then
        needt2 = .true.
      else if (model.eq.'lccd') then
        needt2 = .true.
      else if (model.eq.'ccsd') then
        needt1 = .true.
        needt2 = .true.
      else if (model.eq.'lccsd') then
        needt1 = .true.
        needt2 = .true.
      else if (model.eq.'ccsdt') then
        needt1 = .true.
        needt2 = .true.
        needt3 = .true.
      else if (model.eq.'ccsdtq') then
        needt1 = .true.
        needt2 = .true.
        needt3 = .true.
        needt4 = .true.
      endif
c
c     t1 amplitudes
c
      if (needt1) then
        cpu = - util_cpusec()
        call util_file_name('t1',.true.,.false.,filename)
        call tce_t1_offset(l_t1_offset,k_t1_offset,size_t1)
        call createfile(filename,d_t1,size_t1)
        call tce_guess_t1(d_t1,k_t1_offset)
        cpu = cpu + util_cpusec()
        if (nodezero.and.util_print('t1',print_default)) then
          write(LuOut,*)
          write(LuOut,9000) 't1',size_t1
          write(LuOut,9010) 't1',filename(1:20)
c         write(LuOut,9090) 't1',d_t1
          write(LuOut,9020) cpu
          call util_flush(LuOut)
        endif
      endif
c
c     t2 amplitudes
c
      if (needt2) then
        cpu = - util_cpusec()
        call util_file_name('t2',.true.,.false.,filename)
        call tce_t2_offset(l_t2_offset,k_t2_offset,size_t2)
        call createfile(filename,d_t2,size_t2)
        call tce_guess_t2(d_mo2e,k_2e_offset,d_t2,k_t2_offset)
        cpu = cpu + util_cpusec()
        if (nodezero.and.util_print('t2',print_default)) then
          write(LuOut,*)
          write(LuOut,9000) 't2',size_t2
          write(LuOut,9010) 't2',filename(1:20)
c         write(LuOut,9090) 't2',d_t2
          write(LuOut,9020) cpu
          call util_flush(LuOut)
        endif
      endif
c
c     t3 amplitudes
c
      if (needt3) then
        cpu = - util_cpusec()
        call util_file_name('t3',.true.,.false.,filename)
        call tce_t3_offset(l_t3_offset,k_t3_offset,size_t3)
        call createfile(filename,d_t3,size_t3)
        call tce_guess_t3(d_t3,k_t3_offset)
        cpu = cpu + util_cpusec()
        if (nodezero.and.util_print('t3',print_default)) then
          write(LuOut,*)
          write(LuOut,9000) 't3',size_t3
          write(LuOut,9010) 't3',filename(1:20)
c         write(LuOut,9090) 't3',d_t3
          write(LuOut,9020) cpu
          call util_flush(LuOut)
        endif
      endif
c
c     t4 amplitudes
c
      if (needt4) then
        cpu = - util_cpusec()
        call util_file_name('t4',.true.,.false.,filename)
        call tce_t4_offset(l_t4_offset,k_t4_offset,size_t4)
        call createfile(filename,d_t4,size_t4)
        call tce_guess_t4(d_t4,k_t4_offset)
        cpu = cpu + util_cpusec()
        if (nodezero.and.util_print('t4',print_default)) then
          write(LuOut,*)
          write(LuOut,9000) 't4',size_t4
          write(LuOut,9010) 't4',filename(1:20)
c         write(LuOut,9090) 't4',d_t4
          write(LuOut,9020) cpu
          call util_flush(LuOut)
        endif
      endif
c
c     =======
c     MBPT(2)
c     =======
c
      cpu = - util_cpusec()
      call tce_mbpt2(d_mo2e,k_2e_offset,d_t2,k_t2_offset,corr)
      cpu = cpu + util_cpusec()
      if (nodezero.and.util_print('mp2',print_default)) then
        write(LuOut,*)
        write(LuOut,9030) corr
        write(LuOut,9040) hf + corr
        write(LuOut,9020) cpu
        call util_flush(LuOut)
      endif
c
c     ======================
c     Coupled-cluster theory
c     ======================
c
c     Create residual files
c
      call util_file_name('e',.true.,.false.,filename)
      call tce_e_offset(l_e_offset,k_e_offset,size_e)
      call createfile(filename,d_e,size_e)
      if (needt1) then
        call util_file_name('r1',.true.,.false.,filename)
        call tce_t1_offset(l_r1_offset,k_r1_offset,size_r1)
        call createfile(filename,d_r1,size_r1)
c       write(LuOut,9090) 'r1',d_r1
      endif
      if (needt2) then
        call util_file_name('r2',.true.,.false.,filename)
        call tce_t2_offset(l_r2_offset,k_r2_offset,size_r2)
        call createfile(filename,d_r2,size_r2)
c       write(LuOut,9090) 'r2',d_r2
      endif
      if (needt3) then
        call util_file_name('r3',.true.,.false.,filename)
        call tce_t3_offset(l_r3_offset,k_r3_offset,size_r3)
        call createfile(filename,d_r3,size_r3)
c       write(LuOut,9090) 'r3',d_r3
      endif
      if (needt4) then
        call util_file_name('r4',.true.,.false.,filename)
        call tce_t4_offset(l_r4_offset,k_r4_offset,size_r4)
        call createfile(filename,d_r4,size_r4)
c       write(LuOut,9090) 'r4',d_r4
      endif
c
c     CC iterations
c
      if (nodezero) write(LuOut,9050)
      do iter=1,maxiter
        cpu=-util_cpusec()
        if (model.eq.'ccd') then
          call ccd_e(d_e,k_e_offset,d_t2,k_t2_offset,
     1               d_mo2e,k_2e_offset)
          call ccd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                d_t2,k_t2_offset,d_mo1e,k_1e_offset)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = r2
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          if (nodezero) write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            if (nodezero) then
              write(LuOut,9060)
              write(LuOut,9070) "CCD",corr
              write(LuOut,9080) "CCD",hf + corr
            endif
            goto 100 
          endif
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        else if (model.eq.'lccd') then
          call lccd_e(d_e,k_e_offset,d_t2,k_t2_offset,
     1                d_mo2e,k_2e_offset)
          call lccd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                 d_mo1e,k_1e_offset,d_t2,k_t2_offset)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = r2
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          if (nodezero) write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            if (nodezero) then
              write(LuOut,9060)
              write(LuOut,9070) "LCCD",corr
              write(LuOut,9080) "LCCD",hf + corr
            endif
            goto 100 
          endif
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        else if (model.eq.'ccsd') then
          call ccsd_e(d_e,k_e_offset,d_t1,k_t1_offset,
     1                d_t2,k_t2_offset,d_mo2e,k_2e_offset,
     2                d_mo1e,k_1e_offset)
          call ccsd_t1(d_r1,k_r1_offset,d_mo1e,k_1e_offset,
     1                 d_t1,k_t1_offset,d_mo2e,k_2e_offset,
     2                 d_t2,k_t2_offset)
          call ccsd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                 d_t1,k_t1_offset,d_t2,k_t2_offset,
     2                 d_mo1e,k_1e_offset)
          call tce_residual_t1(d_r1,k_r1_offset,r1)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = max(r1,r2)
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          if (nodezero) write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            if (nodezero) then
              write(LuOut,9060)
              write(LuOut,9070) "CCSD",corr
              write(LuOut,9080) "CCSD",hf + corr
            endif
            goto 100 
          endif
          call tce_jacobi_t1(d_r1,k_r1_offset,d_t1,k_t1_offset)
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r1,size_r1)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        else if (model.eq.'lccsd') then
          call lccsd_e(d_e,k_e_offset,d_mo1e,k_1e_offset,
     1                 d_t1,k_t1_offset,d_t2,k_t2_offset,
     2                 d_mo2e,k_2e_offset)
          call lccsd_t1(d_r1,k_r1_offset,d_mo1e,k_1e_offset,
     1                  d_t1,k_t1_offset,d_mo2e,k_2e_offset,
     2                  d_t2,k_t2_offset)
          call lccsd_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                  d_t1,k_t1_offset,d_mo1e,k_1e_offset,
     2                  d_t2,k_t2_offset)
          call tce_residual_t1(d_r1,k_r1_offset,r1)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          residual = max(r1,r2)
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          if (nodezero) write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            if (nodezero) then
              write(LuOut,9060)
              write(LuOut,9070) "LCCSD",corr
              write(LuOut,9080) "LCCSD",hf + corr
            endif
            goto 100 
          endif
          call tce_jacobi_t1(d_r1,k_r1_offset,d_t1,k_t1_offset)
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_zero(d_r1,size_r1)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_e,size_e)
        else if (model.eq.'ccsdt') then
          call ccsdt_e(d_e,k_e_offset,d_t1,k_t1_offset,
     1                 d_t2,k_t2_offset,d_mo2e,k_2e_offset,
     2                 d_mo1e,k_1e_offset)
          call ccsdt_t1(d_r1,k_r1_offset,d_mo1e,k_1e_offset,
     1                  d_t1,k_t1_offset,d_mo2e,k_2e_offset,
     2                  d_t2,k_t2_offset,d_t3,k_t3_offset)
          call ccsdt_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                  d_t1,k_t1_offset,d_t2,k_t2_offset,
     2                  d_t3,k_t3_offset,d_mo1e,k_1e_offset)
          call ccsdt_t3(d_r3,k_r3_offset,d_t2,k_t2_offset,
     1                  d_t3,k_t3_offset,d_mo2e,k_2e_offset,
     2                  d_t1,k_t1_offset,d_mo1e,k_1e_offset)
          call tce_residual_t1(d_r1,k_r1_offset,r1)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          call tce_residual_t3(d_r3,k_r3_offset,r3)
          residual = max(r1,r2,r3)
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          if (nodezero) write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            if (nodezero) then
              write(LuOut,9060)
              write(LuOut,9070) "CCSDT",corr
              write(LuOut,9080) "CCSDT",hf + corr
            endif
            goto 100 
          endif
          call tce_jacobi_t1(d_r1,k_r1_offset,d_t1,k_t1_offset)
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_jacobi_t3(d_r3,k_r3_offset,d_t3,k_t3_offset)
          call tce_zero(d_r1,size_r1)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_r3,size_r3)
          call tce_zero(d_e,size_e)
        else if (model.eq.'ccsdtq') then
          call ccsdtq_e(d_e,k_e_offset,d_t1,k_t1_offset,
     1                  d_t2,k_t2_offset,d_mo2e,k_2e_offset,
     2                  d_mo1e,k_1e_offset)
          call ccsdtq_t1(d_r1,k_r1_offset,d_mo1e,k_1e_offset,
     1                   d_t1,k_t1_offset,d_mo2e,k_2e_offset,
     2                   d_t2,k_t2_offset,d_t3,k_t3_offset)
          call ccsdtq_t2(d_r2,k_r2_offset,d_mo2e,k_2e_offset,
     1                   d_t1,k_t1_offset,d_t2,k_t2_offset,
     2                   d_t3,k_t3_offset,d_t4,k_t4_offset,
     3                   d_mo1e,k_1e_offset)
          call ccsdtq_t3(d_r3,k_r3_offset,d_t2,k_t2_offset,
     1                   d_t3,k_t3_offset,d_mo2e,k_2e_offset,
     2                   d_t4,k_t4_offset,d_t1,k_t1_offset,
     3                   d_mo1e,k_1e_offset)
          call ccsdtq_t4(d_r4,k_r4_offset,d_t3,k_t3_offset,
     1                   d_t4,k_t4_offset,d_mo2e,k_2e_offset,
     2                   d_t1,k_t1_offset,d_t2,k_t2_offset,
     3                   d_mo1e,k_1e_offset)
          call tce_residual_t1(d_r1,k_r1_offset,r1)
          call tce_residual_t2(d_r2,k_r2_offset,r2)
          call tce_residual_t3(d_r3,k_r3_offset,r3)
          call tce_residual_t4(d_r4,k_r4_offset,r4)
          residual = max(r1,r2,r3,r4)
          call get_block(d_e,corr,1,0)
          cpu=cpu+util_cpusec()
          if (nodezero) write(LuOut,9100) iter,residual,corr,cpu
          if (residual .lt. thresh) then
            if (nodezero) then
              write(LuOut,9060)
              write(LuOut,9070) "CCSDTQ",corr
              write(LuOut,9080) "CCSDTQ",hf + corr
            endif
            goto 100 
          endif
          call tce_jacobi_t1(d_r1,k_r1_offset,d_t1,k_t1_offset)
          call tce_jacobi_t2(d_r2,k_r2_offset,d_t2,k_t2_offset)
          call tce_jacobi_t3(d_r3,k_r3_offset,d_t3,k_t3_offset)
          call tce_jacobi_t4(d_r4,k_r4_offset,d_t4,k_t4_offset)
          call tce_zero(d_r1,size_r1)
          call tce_zero(d_r2,size_r2)
          call tce_zero(d_r3,size_r3)
          call tce_zero(d_r4,size_r4)
          call tce_zero(d_e,size_e)
        endif
        call util_flush(LuOut)
      enddo
      call errquit('tce_energy: number of iterations exceeded maxiter',
     1  iter)
c
c     Write energy to RTDB
c
  100 continue
      call util_flush(LuOut)
      if (.not.rtdb_put(rtdb,'tce:energy',mt_dbl,1,hf+corr))
     1  call errquit('tce_energy: RTDB problem',0)
      tce_energy=.true.
c
c     Delete files
c
      if (needt4) then
        call deletefile(d_r4)
        if (.not.ma_pop_stack(l_r4_offset))
     1    call errquit("tce_energy: MA problem",27)
      endif
      if (needt3) then
        call deletefile(d_r3)
        if (.not.ma_pop_stack(l_r3_offset))
     1    call errquit("tce_energy: MA problem",21)
      endif
      if (needt2) then
        call deletefile(d_r2)
        if (.not.ma_pop_stack(l_r2_offset))
     1    call errquit("tce_energy: MA problem",22)
      endif
      if (needt1) then
        call deletefile(d_r1)
        if (.not.ma_pop_stack(l_r1_offset))
     1    call errquit("tce_energy: MA problem",23)
      endif
      call deletefile(d_e)
      if (.not.ma_pop_stack(l_e_offset))
     1  call errquit("tce_energy: MA problem",24)
c
c     ======
c     Return
c     ======
c
      if (needt4) then
        if (.not.ma_pop_stack(l_t4_offset))
     1    call errquit("tce_energy: MA problem",26)
      endif
      if (needt3) then
        if (.not.ma_pop_stack(l_t3_offset))
     1    call errquit("tce_energy: MA problem",25)
      endif
      if (needt2) then
        if (.not.ma_pop_stack(l_t2_offset))
     1    call errquit("tce_energy: MA problem",0)
      endif
      if (needt1) then
        if (.not.ma_pop_stack(l_t1_offset))
     1    call errquit("tce_energy: MA problem",1)
      endif
      if (.not.ma_pop_stack(l_2e_offset))
     1  call errquit("tce_energy: MA problem",2)
      if (.not.ma_pop_stack(l_1e_offset))
     1  call errquit("tce_energy: MA problem",3)
      if (.not.ma_pop_stack(l_offset))
     1  call errquit("tce_energy: MA problem",4)
      if (.not.ma_pop_stack(l_range))
     1  call errquit("tce_energy: MA problem",5)
      if (.not.ma_pop_stack(l_sym))
     1  call errquit("tce_energy: MA problem",6)
      if (.not.ma_pop_stack(l_spin))
     1  call errquit("tce_energy: MA problem",7)
      if (.not.ma_pop_stack(l_evl_sorted))
     1  call errquit("tce_energy: MA problem",8)
      if (.not.ma_pop_stack(l_irs_sorted))
     1  call errquit("tce_energy: MA problem",9)
      if (.not.ma_pop_stack(l_spin_sorted))
     1  call errquit("tce_energy: MA problem",10)
      if (.not.ma_pop_stack(l_movecs_sorted))
     1  call errquit("tce_energy: MA problem",11)
c
c     ===============
c     Destroy a mutex
c     ===============
c
      if (.not.ga_destroy_mutexes())
     1  call errquit('tce_energy: GA problem',1)
c
c     =========
c     Terminate
c     =========
c
      call tce_tidy(rtdb)
      call util_print_pop
      return
c
c     ======
c     Format
c     ======
c
 9000 format(1x,A,' file size   = ',i10)
 9010 format(1x,A,' file name   = ',A)
 9090 format(1x,A,' file handle = ',i10)
 9020 format(1x,'Cpu time / sec',f15.1)
 9030 format(1x,'MBPT(2) correlation energy / hartree = ',f25.15)
 9040 format(1x,'MBPT(2) total energy / hartree       = ',f25.15)
 9050 format(/,
     1  1x,'-------------------------------------------------------',/
     2  1x,'Iter             Residuum         Correlation   Cpu/Sec',/
     3  1x,'-------------------------------------------------------')
 9060 format(
     1  1x,'-------------------------------------------------------',/
     2  1x,'CC iteration converged')
 9070 format(1x,A,' correlation energy / hartree = ',f25.15)
 9080 format(1x,A,' total energy / hartree       = ',f25.15)
 9100 format(2x,i4,2f20.15,f10.1)
      end
