      SUBROUTINE mbpt2_t3(d_f1,d_i0,d_t11,d_t12,d_t22,d_t23,d_t24,d_v2,k
     &_f1_offset,k_i0_offset,k_t11_offset,k_t12_offset,k_t22_offset,k_t2
     &3_offset,k_t24_offset,k_v2_offset)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = 1 * P( 9 ) * t2 ( p1 p2 h9 h10 )_t2 * f ( p3 h11 )_f
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = -1 * P( 3 ) * Sum ( h4 ) * t2 ( p1 p2 p3 h4 h9 h10 )_t2 * f ( h4 h11 )_f
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = 1 * P( 3 ) * Sum ( p4 ) * t2 ( p1 p2 p4 h9 h10 h11 )_t2 * f ( p3 p4 )_f
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = -1 * Sum ( p5 h4 ) * t2 ( p1 p2 p3 p5 h4 h9 h10 h11 )_t2 * f ( h4 p5 )_f
C     i0 ( p1 p2 p3 h9 h10 h11 )_vt1 + = 1 * P( 9 ) * t1 ( p1 h9 )_t1 * v ( p2 p3 h10 h11 )_v
C     i0 ( p1 p2 p3 h9 h10 h11 )_vt1 + = 1 * P( 9 ) * Sum ( h4 ) * t1 ( p1 p2 h4 h9 )_t1 * v ( h4 p3 h10 h11 )_v
C     i0 ( p1 p2 p3 h9 h10 h11 )_vt1 + = -1 * P( 9 ) * Sum ( p4 ) * t1 ( p1 p4 h9 h10 )_t1 * v ( p2 p3 h11 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_t22
      INTEGER k_t22_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER d_t23
      INTEGER k_t23_offset
      INTEGER d_t24
      INTEGER k_t24_offset
      INTEGER d_t11
      INTEGER k_t11_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_t12
      INTEGER k_t12_offset
      CALL mbpt2_t3_1(d_t22,k_t22_offset,d_f1,k_f1_offset,d_i0,k_i0_offs
     &et)
      CALL mbpt2_t3_2(d_t23,k_t23_offset,d_f1,k_f1_offset,d_i0,k_i0_offs
     &et)
      CALL mbpt2_t3_3(d_t23,k_t23_offset,d_f1,k_f1_offset,d_i0,k_i0_offs
     &et)
      CALL mbpt2_t3_4(d_t24,k_t24_offset,d_f1,k_f1_offset,d_i0,k_i0_offs
     &et)
      CALL mbpt2_t3_5(d_t11,k_t11_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL mbpt2_t3_6(d_t12,k_t12_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      CALL mbpt2_t3_7(d_t12,k_t12_offset,d_v2,k_v2_offset,d_i0,k_i0_offs
     &et)
      RETURN
      END
      SUBROUTINE mbpt2_t3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = 1 * P( 9 ) * t2 ( p1 p2 h9 h10 )_t2 * f ( p3 h11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p3b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_t2,irrep_f)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t2) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h11b-1).e
     &q.4)) THEN
      p3b_2 = int_mb(k_alpha+p3b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      ELSE
      p3b_2 = p3b
      h11b_2 = h11b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - 
     &noab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h11b_2 - 1
     & + (noab+nvab) * (p3b_2 - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimb = h11 + int_mb(k_range+h11b-1) * ((p3 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h11 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_1',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_1',7,MA_ERR)
      IF ((p2b .le. p3b) .and. (h10b .le. h11b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p2b .le. p3b) .and. (h11b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p2b .le. p3b) .and. (h9b .le. h11b) .and. (h11b .le. h10b)) T
     &HEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h10b .le. h11b)) THEN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h11b .le. h9b)) THEN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h9b .le. h11b) .and. (h11b .le. h10b)) T
     &HEN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (h10b .le. h11b)) TH
     &EN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (h11b .le. h9b)) THE
     &N
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (h9b .le. h11b) .and
     &. (h11b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_1',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_1',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_1',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_1',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = -1 * P( 3 ) * Sum ( h4 ) * t2 ( p1 p2 p3 h4 h9 h10 )_t2 * f ( h4 h11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h4b_1
      INTEGER h4b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER h4
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_t2,irrep_f)) THEN
      DO h4b = 1,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h4b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h4b-1)))))) .eq. irrep_t2) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_
     &mb(k_spin+h4b-1).eq.12)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      h9b_1 = h9b
      h10b_1 = h10b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h11b-1).e
     &q.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      ELSE
      h4b_2 = h4b
      h11b_2 = h11b
      END IF
      dim_common = int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+p3b-1) * int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_2',1,MA_ERR)
      IF ((h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (h4b_1 - 1 + noab * (p3b_1 - noab - 
     &1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1)))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p3 - 1) + int_mb(k_
     &range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h4b) .and. (h4b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (h9b_1 - 1 + noab * (p3b_1 - noab - 
     &1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1)))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(k_
     &range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (p3b_1 - noab - 
     &1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1)))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(k_
     &range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_2',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h11b_2 - 1
     & + (noab+nvab) * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimb = h11 + int_mb(k_range+h11b-1) * ((h4 - 1))
      idimb_sort = h4 + int_mb(k_range+h4b-1) * ((h11 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_2',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_2',7,MA_ERR)
      IF ((h10b .le. h11b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((h11b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((h9b .le. h11b) .and. (h11b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_2',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_2',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_2',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = 1 * P( 3 ) * Sum ( p4 ) * t2 ( p1 p2 p4 h9 h10 h11 )_t2 * f ( p3 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER p4b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p4b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h11b_1
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p1
      INTEGER p2
      INTEGER h9
      INTEGER h10
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h11b = h10b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_t2,irrep_f)) THEN
      DO p4b = noab+1,noab+nvab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p4b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p4b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. irrep_t2) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_
     &mb(k_spin+h11b-1).eq.12)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      p4b_1 = p4b
      h9b_1 = h9b
      h10b_1 = h10b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq
     &.4)) THEN
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+h9b-1) * int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_3',1,MA_ERR)
      IF ((p4b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (p2b_1 - noab -
     & 1 + nvab * (p1b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1)))))
     &)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p4b) .and. (p4b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (p2b_1 - noab -
     & 1 + nvab * (p4b_1 - noab - 1 + nvab * (p1b_1 - noab - 1)))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1)))))
     &)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1)))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_3',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((p3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_3',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_3',7,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1
     &))))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b)) THEN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1
     &))))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1) + int_m
     &b(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1
     &))))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_3',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_3',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_3',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_3',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t3_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_t2f + = -1 * Sum ( p5 h4 ) * t2 ( p1 p2 p3 p5 h4 h9 h10 h11 )_t2 * f ( h4 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER p5b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h11b_1
      INTEGER h4b_1
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER h4
      INTEGER h9
      INTEGER h10
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h11b = h10b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_t2,irrep_f)) THEN
      DO p5b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     &+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b
     &-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h9b-1),ieo
     &r(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+h4b-
     &1)))))))) .eq. irrep_t2) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h9b-1)+int_m
     &b(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h4b-1).eq.16)
     &) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      p5b_1 = p5b
      h9b_1 = h9b
      h10b_1 = h10b
      h11b_1 = h11b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p5b-1).eq
     &.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h4b_2 = h4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+p3b-1) * int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1) *
     & int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_4',1,MA_ERR)
      IF ((p5b .lt. p1b) .and. (h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h4b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 
     &- noab - 1 + nvab * (p5b_1 - noab - 1)))))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p5 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .lt. p1b) .and. (h9b .lt. h4b) .and. (h4b .le. h10b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h4b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 
     &- noab - 1 + nvab * (p5b_1 - noab - 1)))))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p5 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .lt. p1b) .and. (h10b .lt. h4b) .and. (h4b .le. h11b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 
     &- noab - 1 + nvab * (p5b_1 - noab - 1)))))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p5 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .lt. p1b) .and. (h11b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 
     &- noab - 1 + nvab * (p5b_1 - noab - 1)))))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p5 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b) .and. (p5b .lt. p2b) .and. (h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h4b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b) .and. (p5b .lt. p2b) .and. (h9b .lt. h4b) .and.
     & (h4b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h4b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b) .and. (p5b .lt. p2b) .and. (h10b .lt. h4b) .and
     &. (h4b .le. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b) .and. (p5b .lt. p2b) .and. (h11b .lt. h4b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p5b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1) + i
     &nt_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p5b) .and. (p5b .lt. p3b) .and. (h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h4b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p5b) .and. (p5b .lt. p3b) .and. (h9b .lt. h4b) .and.
     & (h4b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h4b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p5b) .and. (p5b .lt. p3b) .and. (h10b .lt. h4b) .and
     &. (h4b .le. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p5b) .and. (p5b .lt. p3b) .and. (h11b .lt. h4b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p5b) .and. (h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h4b_1 - 1 + no
     &ab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p3 - 1) + i
     &nt_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p5b) .and. (h9b .lt. h4b) .and. (h4b .le. h10b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h4b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p3 - 1) + i
     &nt_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p5b) .and. (h10b .lt. h4b) .and. (h4b .le. h11b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p3 - 1) + i
     &nt_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p5b) .and. (h11b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + no
     &ab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 
     &- noab - 1 + nvab * (p1b_1 - noab - 1)))))))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(
     &k_range+h9b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p3 - 1) + i
     &nt_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 
     &1))))))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + 
     &int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1
     &1 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_4',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h4 - 1))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_4',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_4',7,MA_ERR)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + int_mb
     &(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_4',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_4',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_4',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_4',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t3_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_vt1 + = 1 * P( 9 ) * t1 ( p1 h9 )_t1 * v ( p2 p3 h10 h11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER p1b_1
      INTEGER h9b_1
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER p3
      INTEGER h10
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      DO h10b = 1,noab
      DO h11b = h10b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_v,irrep_t1)) THEN
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t1) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p1b_1 = p1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      ELSE
      p2b_2 = p2b
      p3b_2 = p3b
      h10b_2 = h10b
      h11b_2 = h11b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_5',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p1b_1 - noab - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p1 - 1))
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_5',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_5',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h11b_2 - 1
     & + (noab+nvab) * (h10b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nv
     &ab) * (p2b_2 - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimb = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))
      idimb_sort = p2 + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_ran
     &ge+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_5',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_5',7,MA_ERR)
      IF ((p1b .le. p2b) .and. (h9b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p2b) .and. (h10b .le. h9b) .and. (h9b .le. h11b)) TH
     &EN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h9b - 1 + noab * (h10b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p2b) .and. (h11b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h11b - 1 + noab * (h10b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p2b .le. p1b) .and. (p1b .le. p3b) .and. (h9b .le. h10b)) THE
     &N
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p2b .le. p1b) .and. (p1b .le. p3b) .and. (h10b .le. h9b) .and
     &. (h9b .le. h11b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h9b - 1 + noab * (h10b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p2b .le. p1b) .and. (p1b .le. p3b) .and. (h11b .le. h9b)) THE
     &N
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h11b - 1 + noab * (h10b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h9b .le. h10b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p1b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h10b .le. h9b) .and. (h9b .le. h11b)) TH
     &EN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h9b - 1 + noab * (h10b - 1 + noab * (p1b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h11b .le. h9b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h11b - 1 + noab * (h10b - 1 + noab * (p1b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_5',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_5',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_5',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_5',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t3_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_vt1 + = 1 * P( 9 ) * Sum ( h4 ) * t1 ( p1 p2 h4 h9 )_t1 * v ( h4 p3 h10 h11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h9b_1
      INTEGER h4b_1
      INTEGER p3b_2
      INTEGER h4b_2
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER h4
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER h10
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = 1,noab
      DO h11b = h10b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_v,irrep_t1)) THEN
      DO h4b = 1,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t1) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      h9b_1 = h9b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      p3b_2 = int_mb(k_alpha+p3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      ELSE
      p3b_2 = p3b
      h4b_2 = h4b
      h10b_2 = h10b
      h11b_2 = h11b
      END IF
      dim_common = int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_6',1,MA_ERR)
      IF ((h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_6',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_6',4,MA_ERR)
      IF ((h4b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h11b_2 - 1
     & + (noab+nvab) * (h10b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nv
     &ab) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimb = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h4 - 1))))
      idimb_sort = h4 + int_mb(k_range+h4b-1) * ((p3 - 1) + int_mb(k_ran
     &ge+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_6',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_6',7,MA_ERR)
      IF ((p2b .le. p3b) .and. (h9b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p2b .le. p3b) .and. (h10b .le. h9b) .and. (h9b .le. h11b)) TH
     &EN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h9b - 1 + noab * (h10b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p2b .le. p3b) .and. (h11b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h11b - 1 + noab * (h10b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h9b .le. h10b)) THEN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h10b .le. h9b) .and. (h9b .le. h11b)) TH
     &EN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h9b - 1 + noab * (h10b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h11b .le. h9b)) THEN
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h11b - 1 + noab * (h10b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (h9b .le. h10b)) THE
     &N
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (h10b .le. h9b) .and
     &. (h9b .le. h11b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h9b - 1 + noab * (h10b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (h11b .le. h9b)) THE
     &N
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb
     &(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_mb(
     &k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h11b - 1 + noab * (h10b - 1 + noab * (p2b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_6',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_6',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_6',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_6',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t3_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset
     &)
C     $Id: mbpt2_t3.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 p3 h9 h10 h11 )_vt1 + = -1 * P( 9 ) * Sum ( p4 ) * t1 ( p1 p4 h9 h10 )_t1 * v ( p2 p3 h11 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h10b
      INTEGER h11b
      INTEGER p4b
      INTEGER p1b_1
      INTEGER p4b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER h11b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p1
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER p3
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)
     & .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+p3b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_v,irrep_t1)) THEN
      DO p4b = noab+1,noab+nvab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t1) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p1b_1 = p1b
      p4b_1 = p4b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      p2b_2 = p2b
      p3b_2 = p3b
      h11b_2 = h11b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t3_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t3_7',1,MA_ERR)
      IF ((p4b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p1b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p1b_1 - 
     &noab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t3_7',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t3_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t3_7',4,MA_ERR)
      IF ((h11b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (h11b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nva
     &b) * (p2b_2 - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t3_7',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t3_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t3_7',7,MA_ERR)
      IF ((p1b .le. p2b) .and. (h10b .le. h11b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p2b) .and. (h11b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p1b .le. p2b) .and. (h9b .le. h11b) .and. (h11b .le. h10b)) T
     &HEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1)))))))
      END IF
      IF ((p2b .le. p1b) .and. (p1b .le. p3b) .and. (h10b .le. h11b)) TH
     &EN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p2b .le. p1b) .and. (p1b .le. p3b) .and. (h11b .le. h9b)) THE
     &N
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p2b .le. p1b) .and. (p1b .le. p3b) .and. (h9b .le. h11b) .and
     &. (h11b .le. h10b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(
     &k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p3b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h10b .le. h11b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (h9b - 1 + noab * (p1b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h11b .le. h9b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (h11b - 1 + noab * (p1b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF ((p3b .le. p1b) .and. (h9b .le. h11b) .and. (h11b .le. h10b)) T
     &HEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1) + int_
     &mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h11 - 1)
     &)))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h11b - 1 + noab * (h9b - 1 + noab * (p1b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t3_7',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t3_7',9,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t3_7',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t3_7',11,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
