      SUBROUTINE mbpt2_t2_b(d_f1,d_i0,d_t11,d_t12,d_t21,d_t22,d_v2,k_f1_
     &offset,k_i0_offset,k_t11_offset,k_t12_offset,k_t21_offset,k_t22_of
     &fset,k_v2_offset)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_t2f + = 1 * P( 4 ) * t2 ( p1 h9 )_t2 * f ( p2 h10 )_f
C     i0 ( p1 p2 h9 h10 )_t2f + = 1 * P( 2 ) * Sum ( h3 ) * t2 ( p1 p2 h3 h9 )_t2 * f ( h3 h10 )_f
C     i0 ( p1 p2 h9 h10 )_t2f + = 1 * P( 2 ) * Sum ( p3 ) * t2 ( p1 p3 h9 h10 )_t2 * f ( p2 p3 )_f
C     i0 ( p1 p2 h9 h10 )_vt1 + = -1 * P( 2 ) * Sum ( h3 ) * t1 ( p1 h3 )_t1 * v ( h3 p2 h9 h10 )_v
C     i0 ( p1 p2 h9 h10 )_vt1 + = -1 * P( 2 ) * Sum ( p3 ) * t1 ( p3 h9 )_t1 * v ( p1 p2 h10 p3 )_v
C     i0 ( p1 p2 h9 h10 )_vt1 + = 1/2 * Sum ( h3 h4 ) * t1 ( p1 p2 h3 h4 )_t1 * v ( h3 h4 h9 h10 )_v
C     i0 ( p1 p2 h9 h10 )_vt1 + = 1 * P( 4 ) * Sum ( h4 p3 ) * t1 ( p1 p3 h4 h9 )_t1 * v ( h4 p2 h10 p3 )_v
C     i0 ( p1 p2 h9 h10 )_vt1 + = 1/2 * Sum ( p3 p4 ) * t1 ( p3 p4 h9 h10 )_t1 * v ( p1 p2 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_t21
      INTEGER k_t21_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER d_t22
      INTEGER k_t22_offset
      INTEGER d_t11
      INTEGER k_t11_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_t12
      INTEGER k_t12_offset
      CALL mbpt2_t2_b_1(d_t21,k_t21_offset,d_f1,k_f1_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_2(d_t22,k_t22_offset,d_f1,k_f1_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_3(d_t22,k_t22_offset,d_f1,k_f1_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_4(d_t11,k_t11_offset,d_v2,k_v2_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_5(d_t11,k_t11_offset,d_v2,k_v2_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_6(d_t12,k_t12_offset,d_v2,k_v2_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_7(d_t12,k_t12_offset,d_v2,k_v2_offset,d_i0,k_i0_of
     &fset)
      CALL mbpt2_t2_b_8(d_t12,k_t12_offset,d_v2,k_v2_offset,d_i0,k_i0_of
     &fset)
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_t2f + = 1 * P( 4 ) * t2 ( p1 h9 )_t2 * f ( p2 h10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER p1b_1
      INTEGER h9b_1
      INTEGER p2b_2
      INTEGER h10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_t2,irrep_f)) 
     &THEN
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t2) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p1b_1 = p1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      ELSE
      p2b_2 = p2b
      h10b_2 = h10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p1b_1 - noab - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p1 - 1))
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h10b_2 - 1
     & + (noab+nvab) * (p2b_2 - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimb = h10 + int_mb(k_range+h10b-1) * ((p2 - 1))
      idimb_sort = p2 + int_mb(k_range+p2b-1) * ((h10 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_1',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_1',7,MA_ERR)
      IF ((p1b .le. p2b) .and. (h9b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((p1b .le. p2b) .and. (h10b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((p2b .le. p1b) .and. (h9b .le. h10b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p1b - noab - 1 + nvab * 
     &(p2b - noab - 1)))))
      END IF
      IF ((p2b .le. p1b) .and. (h10b .le. h9b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (p1b - noab - 1 + nvab * 
     &(p2b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_1',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_1',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_1',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_1',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_t2f + = 1 * P( 2 ) * Sum ( h3 ) * t2 ( p1 p2 h3 h9 )_t2 * f ( h3 h10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER h3b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h9b_1
      INTEGER h3b_1
      INTEGER h3b_2
      INTEGER h10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER h3
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h9b = 1,noab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_t2,irrep_f)) 
     &THEN
      DO h3b = 1,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h3b-1)))) .eq. irrep_t2) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h3b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      h9b_1 = h9b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      ELSE
      h3b_2 = h3b
      h10b_2 = h10b
      END IF
      dim_common = int_mb(k_range+h3b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_2',1,MA_ERR)
      IF ((h3b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h3b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_2',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h10b_2 - 1
     & + (noab+nvab) * (h3b_2 - 1)))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimb = h10 + int_mb(k_range+h10b-1) * ((h3 - 1))
      idimb_sort = h3 + int_mb(k_range+h3b-1) * ((h10 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_2',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_2',7,MA_ERR)
      IF ((h9b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((h10b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_2',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_2',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_2',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_t2f + = 1 * P( 2 ) * Sum ( p3 ) * t2 ( p1 p3 h9 h10 )_t2 * f ( p2 p3 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER p3b
      INTEGER p1b_1
      INTEGER p3b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p1
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_t2,irrep_f)) 
     &THEN
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t2) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p1b_1 = p1b
      p3b_1 = p3b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      p2b_2 = p2b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_3',1,MA_ERR)
      IF ((p3b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p1b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p1b_1 - 
     &noab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_3',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p2b_2 - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_3',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_3',7,MA_ERR)
      IF ((p1b .le. p2b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p2 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p1b - noab - 1 + nvab * 
     &(p2b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_3',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_3',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_3',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_3',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_vt1 + = -1 * P( 2 ) * Sum ( h3 ) * t1 ( p1 h3 )_t1 * v ( h3 p2 h9 h10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER h3b
      INTEGER p1b_1
      INTEGER h3b_1
      INTEGER p2b_2
      INTEGER h3b_2
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER h9
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t1)) 
     &THEN
      DO h3b = 1,noab
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h3b-1)) .eq. irrep_t1) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h3b-1).eq
     &.4)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p1b_1 = p1b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h3b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      ELSE
      p2b_2 = p2b
      h3b_2 = h3b
      h9b_2 = h9b
      h10b_2 = h10b
      END IF
      dim_common = int_mb(k_range+h3b-1)
      dima_sort = int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_4',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (p1b_1 - noab - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((p1 - 1))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_4',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_4',4,MA_ERR)
      IF ((h3b .le. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h10b_2 - 1
     & + (noab+nvab) * (h9b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nva
     &b) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimb = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h3 - 1))))
      idimb_sort = h3 + int_mb(k_range+h3b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_4',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_4',7,MA_ERR)
      IF ((p1b .le. p2b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p1b - noab - 1 + nvab * 
     &(p2b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_4',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_4',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_4',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_4',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_vt1 + = -1 * P( 2 ) * Sum ( p3 ) * t1 ( p3 h9 )_t1 * v ( p1 p2 h10 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER p3b
      INTEGER p3b_1
      INTEGER h9b_1
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER h10b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER p2
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h9b = 1,noab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t1)) 
     &THEN
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t1) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p3b_1 = p3b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      p1b_2 = p1b
      p2b_2 = p2b
      h10b_2 = h10b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb
     &(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_5',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_5',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_5',4,MA_ERR)
      IF ((h10b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (h10b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nva
     &b) * (p1b_2 - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_5',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_5',7,MA_ERR)
      IF ((h9b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((h10b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_5',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_5',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_5',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_5',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_vt1 + = 1/2 * Sum ( h3 h4 ) * t1 ( p1 p2 h3 h4 )_t1 * v ( h3 h4 h9 h10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER h3
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h9
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t1)) 
     &THEN
      DO h3b = 1,noab
      DO h4b = h3b,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t1) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      h3b_1 = h3b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      h9b_2 = h9b
      h10b_2 = h10b
      END IF
      dim_common = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_6',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h3b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_6',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_6',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h10b_2 - 1
     & + (noab+nvab) * (h9b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nva
     &b) * (h3b_2 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimb = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      idimb_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_6',5,MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h3b .eq. h4b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_6',7,MA_ERR)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_6',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_6',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_6',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_6',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_vt1 + = 1 * P( 4 ) * Sum ( h4 p3 ) * t1 ( p1 p3 h4 h9 )_t1 * v ( h4 p2 h10 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER p3b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER p3b_1
      INTEGER h9b_1
      INTEGER h4b_1
      INTEGER p2b_2
      INTEGER h4b_2
      INTEGER h10b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p1
      INTEGER h4
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t1)) 
     &THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t1) THEN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      p3b_1 = p3b
      h9b_1 = h9b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      p2b_2 = p2b
      h4b_2 = h4b
      h10b_2 = h10b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_7',1,MA_ERR)
      IF ((p3b .lt. p1b) .and. (h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p1b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .lt. p1b) .and. (h9b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p1b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p3b) .and. (h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p3b) .and. (h9b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p1b_1 - n
     &oab - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_7',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_7',4,MA_ERR)
      IF ((h4b .le. p2b) .and. (h10b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (h10b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nva
     &b) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_7',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_7',7,MA_ERR)
      IF ((p1b .le. p2b) .and. (h9b .le. h10b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((p1b .le. p2b) .and. (h10b .le. h9b)) THEN
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      END IF
      IF ((p2b .le. p1b) .and. (h9b .le. h10b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p1b - noab - 1 + nvab * 
     &(p2b - noab - 1)))))
      END IF
      IF ((p2b .le. p1b) .and. (h10b .le. h9b)) THEN
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h10 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (h10b - 1 + noab * (p1b - noab - 1 + nvab * 
     &(p2b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_7',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_7',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_7',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_7',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE mbpt2_t2_b_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: mbpt2_t2_b.F,v 1.2 2003-10-19 01:03:38 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p1 p2 h9 h10 )_vt1 + = 1/2 * Sum ( p3 p4 ) * t1 ( p3 p4 h9 h10 )_t1 * v ( p1 p2 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER h9b
      INTEGER h10b
      INTEGER p3b
      INTEGER p4b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. ieor(irrep_v,irrep_t1)) 
     &THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t1) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      p1b_2 = p1b
      p2b_2 = p2b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dima_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_8',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &mbpt2_t2_b_8',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('mbpt2_t2_b_8',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('mbpt2_t2_b_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &mbpt2_t2_b_8',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p2b_2 - 1 + (noab+nvab
     &) * (p1b_2 - 1)))))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('mbpt2_t2_b_8',5,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('mbpt2_t2_b_8',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('mbpt2_t2_b_8',7,MA_ERR)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (h9b - 1 + noab * (p2b - noab - 1 + nvab * 
     &(p1b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('mbpt2_t2_b_8',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('mbpt2_t2_b_8',9,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('mbpt2_t2_b_8',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('mbpt2_t2_b_8',11,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
