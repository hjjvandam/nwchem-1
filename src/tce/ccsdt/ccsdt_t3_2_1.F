      SUBROUTINE ccsdt_t3_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt_t3_2_1.F,v 1.1 2003-09-15 01:28:37 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_v + = 1 * v ( p4 p5 h1 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p12b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER p12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p12b_1 = int_mb(k_alpha+p12b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h1b_1 = h1b
      p12b_1 = p12b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_t3_2_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_t3_2_1',1)
      IF ((h1b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p12b_1 - 1
     & + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noab+nva
     &b) * (p4b_1 - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_t3_2_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdt_t3_2_1',3)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p12b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + nvab * (p4
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_t3_2_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_t3_2_1',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
