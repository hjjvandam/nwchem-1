      SUBROUTINE OFFSET_ccsdtq_lambda3_20_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: OFFSET_ccsdtq_lambda3_20_1.F,v 1.2 2003-10-19 00:53:56 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 h11 p8 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h4b
      INTEGER h11b
      INTEGER p8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*nvab*nvab*nvab*nvab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda3_20_1',0,MA_E
     &RR)
      size = 0
      DO h4b = 1,noab
      DO h11b = 1,noab
      DO p8b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p8b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+p8b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+p3b-1).ne.12)) THEN
      int_mb(k_a_offset + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (p8b - noab - 1 + nvab * (h11b - 1 + n
     &oab * (h4b - 1)))))) = size
      size = size + int_mb(k_range+h4b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+p8b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     & * int_mb(k_range+p3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
