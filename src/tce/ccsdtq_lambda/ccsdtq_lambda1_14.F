      SUBROUTINE ccsdtq_lambda1_14(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda1_14.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h2 p1 )_ytv + = -1/2 * Sum ( p13 h14 h16 ) * i1 ( h2 p13 h14 h16 )_yt * v ( h14 h16 p1 p13 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p1b
      INTEGER p13b
      INTEGER h14b
      INTEGER h16b
      INTEGER h2b_1
      INTEGER p13b_1
      INTEGER h14b_1
      INTEGER h16b_1
      INTEGER h14b_2
      INTEGER h16b_2
      INTEGER p1b_2
      INTEGER p13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h2
      INTEGER p13
      INTEGER h14
      INTEGER h16
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,ieor(irrep_t,irrep_v))) THEN
      DO p13b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h16b = h14b,noab
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+p13b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+h16b-1)))) .eq. ieor(irrep_y,irrep_t))
     & THEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p13b-1)+i
     &nt_mb(k_spin+h14b-1)+int_mb(k_spin+h16b-1).eq.8)) THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      p13b_1 = int_mb(k_alpha+p13b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      h16b_1 = int_mb(k_alpha+h16b-1)
      ELSE
      h2b_1 = h2b
      p13b_1 = p13b
      h14b_1 = h14b
      h16b_1 = h16b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h14b-1)+int_mb(k_spin+h16b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p13b-1).eq.8)) THEN
      h14b_2 = int_mb(k_alpha+h14b-1)
      h16b_2 = int_mb(k_alpha+h16b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p13b_2 = int_mb(k_alpha+p13b-1)
      ELSE
      h14b_2 = h14b
      h16b_2 = h16b
      p1b_2 = p1b
      p13b_2 = p13b
      END IF
      dim_common = int_mb(k_range+p13b-1) * int_mb(k_range+h14b-1) * int
     &_mb(k_range+h16b-1)
      dima_sort = int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_14',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (p13b_1 - noab - 1 + nvab * (h2b_1 
     &- 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h2 - 1))))
      idima_sort = p13 + int_mb(k_range+p13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_14',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_14',4,MA_ERR)
      IF ((p13b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p13b_2 - 1 + (noab+nvab) * (h16b_2 - 1 + (noab+nv
     &ab) * (h14b_2 - 1)))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p13 - 1) + int_mb(k_range+p
     &13b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((h14 - 1))))
      idimb_sort = p13 + int_mb(k_range+p13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p13b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p13b_2 - 1
     & + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h16b_2 - 1 + (noab+nv
     &ab) * (h14b_2 - 1)))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idimb = p13 + int_mb(k_range+p13b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((h14 - 1))))
      idimb_sort = p13 + int_mb(k_range+p13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_14',5,MA_
     &ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h14b .eq. h16b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_14',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_14',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h2 + int_mb(k_range+h2b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_14',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_14',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_14',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_14',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
