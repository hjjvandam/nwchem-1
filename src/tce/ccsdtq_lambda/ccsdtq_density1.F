      SUBROUTINE ccsdtq_density1(d_d1,d_i0,d_t1,d_t2,d_t3,d_t4,d_y1,d_y2
     &,d_y3,d_y4,k_d1_offset,k_i0_offset,k_t1_offset,k_t2_offset,k_t3_of
     &fset,k_t4_offset,k_y1_offset,k_y2_offset,k_y3_offset,k_y4_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_yd + = 1 * Sum ( h4 p1 ) * y ( h4 p1 )_y * i1 ( p1 h4 )_d
C         i1 ( p1 h4 )_d + = 1 * d ( p1 h4 )_d
C         i1 ( p1 h4 )_dt + = 1 * Sum ( p2 ) * d ( p1 p2 )_d * t ( p2 h4 )_t
C     i0 ( )_td + = 1 * Sum ( p12 h13 ) * d ( h13 p12 )_d * i1 ( p12 h13 )_t
C         i1 ( p12 h13 )_t + = 1 * t ( p12 h13 )_t
C         i1 ( p12 h13 )_yt + = 1 * Sum ( h4 p3 ) * t ( p3 p12 h4 h13 )_t * y ( h4 p3 )_y
C         i1 ( p12 h13 )_yt + = 1/4 * Sum ( h6 h5 p4 p3 ) * t ( p3 p4 p12 h5 h6 h13 )_t * y ( h5 h6 p3 p4 )_y
C         i1 ( p12 h13 )_yt + = 1/36 * Sum ( h8 h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 p12 h6 h7 h8 h13 )_t * y ( h6 h7 h8 p3 p4 p5 )_y
C         i1 ( p12 h13 )_ytt + = -1 * Sum ( h1 ) * t ( p12 h1 )_t * i2 ( h1 h13 )_yt
C             i2 ( h1 h13 )_yt + = 1 * Sum ( p3 ) * t ( p3 h13 )_t * y ( h1 p3 )_y
C             i2 ( h1 h13 )_yt + = -1/2 * Sum ( h5 p4 p3 ) * t ( p3 p4 h5 h13 )_t * y ( h1 h5 p3 p4 )_y
C             i2 ( h1 h13 )_yt + = 1/12 * Sum ( h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 h6 h7 h13 )_t * y ( h1 h6 h7 p3 p4 p5 )_y
C             i2 ( h1 h13 )_yt + = -1/144 * Sum ( h9 h8 h7 p6 p5 p4 p3 ) * t ( p3 p4 p5 p6 h7 h8 h9 h13 )_t * y ( h1 h7 h8 h9 p3 p4 p5 p6 )_y
C         i1 ( p12 h13 )_ytt + = 1/2 * Sum ( h11 h2 p8 ) * t ( p8 p12 h2 h11 )_t * i2 ( h2 h11 h13 p8 )_yt
C             i2 ( h2 h11 h13 p8 )_yt + = 1 * Sum ( p6 ) * t ( p6 h13 )_t * y ( h2 h11 p6 p8 )_y
C             i2 ( h2 h11 h13 p8 )_yt + = -5/18 * Sum ( h7 p6 p5 ) * t ( p5 p6 h7 h13 )_t * i3 ( h2 h7 h11 p5 p6 p8 )_y
C                 i3 ( h2 h7 h11 p5 p6 p8 )_y + = 1 * y ( h2 h7 h11 p5 p6 p8 )_y
C                 i3 ( h2 h7 h11 p5 p6 p8 )_y + = 4/5 * y ( h2 h7 h11 p5 p6 p8 )_y
C             i2 ( h2 h11 h13 p8 )_yt + = 1/12 * Sum ( h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 h6 h7 h13 )_t * y ( h2 h6 h7 h11 p3 p4 p5 p8 )_y
C         i1 ( p12 h13 )_ytt + = -1/12 * Sum ( h5 h6 h7 p3 p4 ) * t ( p3 p4 p12 h5 h6 h7 )_t * i2 ( h5 h6 h7 h13 p3 p4 )_yt
C             i2 ( h5 h6 h7 h13 p3 p4 )_yt + = 1 * Sum ( p8 ) * t ( p8 h13 )_t * y ( h5 h6 h7 p3 p4 p8 )_y
C             i2 ( h5 h6 h7 h13 p3 p4 )_yt + = -1/2 * Sum ( h10 p9 p8 ) * t ( p8 p9 h10 h13 )_t * y ( h5 h6 h7 h10 p3 p4 p8 p9 )_y
C         i1 ( p12 h13 )_ytt + = -1/144 * Sum ( h6 h7 h8 h9 p3 p4 p5 ) * t ( p3 p4 p5 p12 h6 h7 h8 h9 )_t * i2 ( h6 h7 h8 h9 h13 p3 p4 p5 )_yt
C             i2 ( h6 h7 h8 h9 h13 p3 p4 p5 )_yt + = 1 * Sum ( p10 ) * t ( p10 h13 )_t * y ( h6 h7 h8 h9 p3 p4 p5 p10 )_y
C     i0 ( )_ytd + = -1 * Sum ( h2 h1 ) * d ( h1 h2 )_d * i1 ( h2 h1 )_yt
C         i1 ( h2 h1 )_yt + = 1 * Sum ( p3 ) * t ( p3 h1 )_t * y ( h2 p3 )_y
C         i1 ( h2 h1 )_yt + = 1/2 * Sum ( h5 p4 p3 ) * t ( p3 p4 h1 h5 )_t * y ( h2 h5 p3 p4 )_y
C         i1 ( h2 h1 )_yt + = 1/12 * Sum ( h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 h1 h6 h7 )_t * y ( h2 h6 h7 p3 p4 p5 )_y
C         i1 ( h2 h1 )_yt + = 1/144 * Sum ( h9 h8 h7 p6 p5 p4 p3 ) * t ( p3 p4 p5 p6 h1 h7 h8 h9 )_t * y ( h2 h7 h8 h9 p3 p4 p5 p6 )_y
C     i0 ( )_ytd + = -1/2 * Sum ( p2 p1 ) * d ( p1 p2 )_d * i1 ( p2 p1 )_yt
C         i1 ( p2 p1 )_yt + = -1 * Sum ( h5 h4 p3 ) * t ( p2 p3 h4 h5 )_t * y ( h4 h5 p1 p3 )_y
C         i1 ( p2 p1 )_yt + = -1/6 * Sum ( h7 h6 h5 p4 p3 ) * t ( p2 p3 p4 h5 h6 h7 )_t * y ( h5 h6 h7 p1 p3 p4 )_y
C         i1 ( p2 p1 )_yt + = -1/72 * Sum ( h9 h8 h7 h6 p5 p4 p3 ) * t ( p2 p3 p4 p5 h6 h7 h8 h9 )_t * y ( h6 h7 h8 h9 p1 p3 p4 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_y1
      INTEGER k_y1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_d1
      INTEGER k_d1_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER d_t3
      INTEGER k_t3_offset
      INTEGER d_y2
      INTEGER k_y2_offset
      INTEGER d_t4
      INTEGER k_t4_offset
      INTEGER d_y3
      INTEGER k_y3_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      INTEGER d_y4
      INTEGER k_y4_offset
      INTEGER d_i3
      INTEGER k_i3_offset
      INTEGER l_i3_offset
      INTEGER size_i3
      CHARACTER*255 filename
#if !defined(CCSDTQ)
      CALL ERRQUIT('CCSDTQ not compiled',0,CAPMIS_ERR)
      RETURN
      END
#else
      CALL OFFSET_ccsdtq_density1_1_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_density1_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_density1_1_1(d_d1,k_d1_offset,d_i1,k_i1_offset)
      CALL ccsdtq_density1_1_2(d_d1,k_d1_offset,d_t1,k_t1_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_density1_1(d_y1,k_y1_offset,d_i1,k_i1_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_density1'
     &,-1,MA_ERR)
      CALL OFFSET_ccsdtq_density1_2_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_density1_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_density1_2_1(d_t1,k_t1_offset,d_i1,k_i1_offset)
      CALL ccsdtq_density1_2_2(d_t2,k_t2_offset,d_y1,k_y1_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_2_3(d_t3,k_t3_offset,d_y2,k_y2_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_2_4(d_t4,k_t4_offset,d_y3,k_y3_offset,d_i1,k_
     &i1_offset)
      CALL OFFSET_ccsdtq_density1_2_5_1(d_i2,l_i2_offset,k_i2_offset,siz
     &e_i2)
      CALL TCE_FILENAME('ccsdtq_density1_2_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_density1_2_5_1(d_t1,k_t1_offset,d_y1,k_y1_offset,d_i2,
     &k_i2_offset)
      CALL ccsdtq_density1_2_5_2(d_t2,k_t2_offset,d_y2,k_y2_offset,d_i2,
     &k_i2_offset)
      CALL ccsdtq_density1_2_5_3(d_t3,k_t3_offset,d_y3,k_y3_offset,d_i2,
     &k_i2_offset)
      CALL ccsdtq_density1_2_5_4(d_t4,k_t4_offset,d_y4,k_y4_offset,d_i2,
     &k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_density1_2_5(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_
     &i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_density1_
     &2',-1,MA_ERR)
      CALL OFFSET_ccsdtq_density1_2_6_1(d_i2,l_i2_offset,k_i2_offset,siz
     &e_i2)
      CALL TCE_FILENAME('ccsdtq_density1_2_6_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_density1_2_6_1(d_t1,k_t1_offset,d_y2,k_y2_offset,d_i2,
     &k_i2_offset)
      CALL OFFSET_ccsdtq_density1_2_6_2_1(d_i3,l_i3_offset,k_i3_offset,s
     &ize_i3)
      CALL TCE_FILENAME('ccsdtq_density1_2_6_2_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL ccsdtq_density1_2_6_2_1(d_y3,k_y3_offset,d_i3,k_i3_offset)
      CALL ccsdtq_density1_2_6_2_2(d_y3,k_y3_offset,d_i3,k_i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL ccsdtq_density1_2_6_2(d_t2,k_t2_offset,d_i3,k_i3_offset,d_i2,
     &k_i2_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ccsdtq_density1_
     &2_6',-1,MA_ERR)
      CALL ccsdtq_density1_2_6_3(d_t3,k_t3_offset,d_y4,k_y4_offset,d_i2,
     &k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_density1_2_6(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_
     &i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_density1_
     &2',-1,MA_ERR)
      CALL OFFSET_ccsdtq_density1_2_7_1(d_i2,l_i2_offset,k_i2_offset,siz
     &e_i2)
      CALL TCE_FILENAME('ccsdtq_density1_2_7_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_density1_2_7_1(d_t1,k_t1_offset,d_y3,k_y3_offset,d_i2,
     &k_i2_offset)
      CALL ccsdtq_density1_2_7_2(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i2,
     &k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_density1_2_7(d_t3,k_t3_offset,d_i2,k_i2_offset,d_i1,k_
     &i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_density1_
     &2',-1,MA_ERR)
      CALL OFFSET_ccsdtq_density1_2_8_1(d_i2,l_i2_offset,k_i2_offset,siz
     &e_i2)
      CALL TCE_FILENAME('ccsdtq_density1_2_8_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_density1_2_8_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i2,
     &k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_density1_2_8(d_t4,k_t4_offset,d_i2,k_i2_offset,d_i1,k_
     &i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_density1_
     &2',-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_density1_2(d_d1,k_d1_offset,d_i1,k_i1_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_density1'
     &,-1,MA_ERR)
      CALL OFFSET_ccsdtq_density1_3_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_density1_3_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_density1_3_1(d_t1,k_t1_offset,d_y1,k_y1_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_3_2(d_t2,k_t2_offset,d_y2,k_y2_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_3_3(d_t3,k_t3_offset,d_y3,k_y3_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_3_4(d_t4,k_t4_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_density1_3(d_d1,k_d1_offset,d_i1,k_i1_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_density1'
     &,-1,MA_ERR)
      CALL OFFSET_ccsdtq_density1_4_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_density1_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_density1_4_1(d_t2,k_t2_offset,d_y2,k_y2_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_4_2(d_t3,k_t3_offset,d_y3,k_y3_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_density1_4_3(d_t4,k_t4_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_density1_4(d_d1,k_d1_offset,d_i1,k_i1_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_density1'
     &,-1,MA_ERR)
      RETURN
      END
      SUBROUTINE ccsdtq_density1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_yd + = 1 * Sum ( h4 p1 ) * y ( h4 p1 )_y * i1 ( p1 h4 )_d
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER p1b
      INTEGER h4b_1
      INTEGER p1b_1
      INTEGER p1b_2
      INTEGER h4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h4
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_y,irrep_d)) THEN
      DO h4b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),int_mb(k_sym+p1b-1)) .eq. irrep_y) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      h4b_1 = int_mb(k_alpha+h4b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      h4b_1 = h4b
      p1b_1 = p1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p1b_2 = int_mb(k_alpha+p1b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_2 = p1b
      h4b_2 = h4b
      END IF
      dim_common = int_mb(k_range+h4b-1) * int_mb(k_range+p1b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (h4b_1 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h4 - 1))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h4b_2 - 1 
     &+ noab * (p1b_2 - noab - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idimb = h4 + int_mb(k_range+h4b-1) * ((p1 - 1))
      idimb_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_1',7,MA_ERR)
      idimc_sort = 1
      idimc = 1
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p1 h4 )_d + = 1 * d ( p1 h4 )_d
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER h4b
      INTEGER p1b_1
      INTEGER h4b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h4b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. irrep_d) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p1b_1 = p1b
      h4b_1 = h4b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_1_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ (noab+nvab) * (p1b_1 - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p1 - 1))
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((h4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_1_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_density1_1_1',3,MA_ERR)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((h4 - 1))
      idimc = h4 + int_mb(k_range+h4b-1) * ((p1 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h4b -
     & 1 + noab * (p1b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_1_1',4,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_1_1
     &',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_1_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p1 h4 )_d
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p1b
      INTEGER h4b
      IF (.not.MA_PUSH_GET(mt_int,nvab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_density1_1_1',0,MA_ERR)
      size = 0
      DO p1b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. irrep_d) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h4b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h4b - 1 + noab * (p1b - noab - 1)) = size
      size = size + int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p1 h4 )_dt + = 1 * Sum ( p2 ) * d ( p1 p2 )_d * t ( p2 h4 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER h4b
      INTEGER p2b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p2b_2
      INTEGER h4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p1b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p1b-1)+int_mb(k_spin+h4b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+h4b-1)) .eq. ieor(irrep_
     &d,irrep_t)) THEN
      DO p2b = noab+1,noab+nvab
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b-1)) .eq. irrep_d) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq
     &.4)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h4b-1).eq
     &.4)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      ELSE
      p2b_2 = p2b
      h4b_2 = h4b
      END IF
      dim_common = int_mb(k_range+p2b-1)
      dima_sort = int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - 1 
     &+ (noab+nvab) * (p1b_1 - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1))
      idima_sort = p2 + int_mb(k_range+p2b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_1_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_1_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h4b_2 - 1 
     &+ noab * (p2b_2 - noab - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idimb = h4 + int_mb(k_range+h4b-1) * ((p2 - 1))
      idimb_sort = p2 + int_mb(k_range+p2b-1) * ((h4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_1_2',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_1_2',7,MA_ERR)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((h4 - 1))
      idimc = h4 + int_mb(k_range+h4b-1) * ((p1 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h4b - 1 + noab * (p1b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_1_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_1_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_1_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_1_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_td + = 1 * Sum ( p12 h13 ) * d ( h13 p12 )_d * i1 ( p12 h13 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h13b
      INTEGER p12b
      INTEGER h13b_1
      INTEGER p12b_1
      INTEGER p12b_2
      INTEGER h13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h13
      INTEGER p12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_t,irrep_d)) THEN
      DO h13b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),int_mb(k_sym+p12b-1)) .eq. irrep_d) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p12b-1).
     &eq.4)) THEN
      h13b_1 = int_mb(k_alpha+h13b-1)
      p12b_1 = int_mb(k_alpha+p12b-1)
      ELSE
      h13b_1 = h13b
      p12b_1 = p12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b-1).
     &eq.4)) THEN
      p12b_2 = int_mb(k_alpha+p12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      ELSE
      p12b_2 = p12b
      h13b_2 = h13b
      END IF
      dim_common = int_mb(k_range+h13b-1) * int_mb(k_range+p12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p12b_1 - 1
     & + (noab+nvab) * (h13b_1 - 1)))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h13b_2 - 1
     & + noab * (p12b_2 - noab - 1)))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimb = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2',7,MA_ERR)
      idimc_sort = 1
      idimc = 1
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_t + = 1 * t ( p12 h13 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p12b_1
      INTEGER h13b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p12
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b-1).
     &eq.4)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p12b_1 = p12b
      h13b_1 = h13b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p12b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p12b_1 - noab - 1)))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      idima_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_density1_2_1',3,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h13b 
     &- 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_1',4,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_1
     &',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_2_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p12b
      INTEGER h13b
      IF (.not.MA_PUSH_GET(mt_int,nvab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_density1_2_1',0,MA_ERR)
      size = 0
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      int_mb(k_a_offset + h13b - 1 + noab * (p12b - noab - 1)) = size
      size = size + int_mb(k_range+p12b-1) * int_mb(k_range+h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_yt + = 1 * Sum ( h4 p3 ) * t ( p3 p12 h4 h13 )_t * y ( h4 p3 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p3b
      INTEGER h4b
      INTEGER p12b_1
      INTEGER p3b_1
      INTEGER h13b_1
      INTEGER h4b_1
      INTEGER h4b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p12
      INTEGER h4
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+h4b-1).eq.8)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p12b_1 = p12b
      p3b_1 = p3b
      h13b_1 = h13b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h4b_2 = h4b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p12b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_2',1,MA_ERR)
      IF ((p3b .le. p12b) .and. (h4b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (p12b_1 - noab - 1 + nvab * (p3b_1 -
     & noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (h13b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (p12b_1 - noab - 1 + nvab * (p3b_1 -
     & noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h4b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h4b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p12b_1 -
     & noab - 1)))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h4 - 1) + int_mb(k_range+
     &h4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h13b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p12b_1 -
     & noab - 1)))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_2',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_2',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_yt + = 1/4 * Sum ( h6 h5 p4 p3 ) * t ( p3 p4 p12 h5 h6 h13 )_t * y ( h5 h6 p3 p4 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER h6b
      INTEGER p12b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h13b_1
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p12
      INTEGER h5
      INTEGER h6
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      DO h6b = h5b,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h5b-1),i
     &nt_mb(k_sym+h6b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h5b-1)+int
     &_mb(k_spin+h6b-1).eq.12)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p12b_1 = p12b
      p3b_1 = p3b
      p4b_1 = p4b
      h13b_1 = h13b
      h5b_1 = h5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p12b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_3',1,MA_ERR)
      IF ((p4b .le. p12b) .and. (h6b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p12b_1 - noab -
     & 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_range+
     &h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p12 - 1) + int_mb(k
     &_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (h5b .le. h13b) .and. (h13b .lt. h6b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h5b_1 - 1 + noab * (p12b_1 - noab -
     & 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p12 - 1) + int_mb(k
     &_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (h13b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (h13b_1 - 1 + noab * (p12b_1 - noab -
     & 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p12 - 1) + int_mb(k
     &_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h6b .le. h13b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 
     &1 + nvab * (p12b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_range+
     &h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_
     &range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h5b .le. h13b) .a
     &nd. (h13b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 
     &1 + nvab * (p12b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_
     &range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h13b .lt. h5b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (h13b_1 - 1 + noab * (p4b_1 - noab - 
     &1 + nvab * (p12b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p4 - 1) + int_mb(k_
     &range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h6b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 
     &1 + nvab * (p3b_1 - noab - 1 + nvab * (p12b_1 - noab - 1)))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_range+
     &h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_
     &range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h5b .le. h13b) .and. (h13b .lt. h6b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 
     &1 + nvab * (p3b_1 - noab - 1 + nvab * (p12b_1 - noab - 1)))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_
     &range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h13b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (h13b_1 - 1 + noab * (p4b_1 - noab - 
     &1 + nvab * (p3b_1 - noab - 1 + nvab * (p12b_1 - noab - 1)))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p4 - 1) + int_mb(k_
     &range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h13 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_3',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5
     &b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_3',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h5b .eq. h6b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,4.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsubh(1))/FACTORIAL(ns
     &ubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.
     &0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_3',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_3',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_3
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_3
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_3
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_yt + = 1/36 * Sum ( h8 h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 p12 h6 h7 h8 h13 )_t * y ( h6 h7 h8 p3 p4 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p12b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER p12
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(3)
      INTEGER isuperp
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h6
     &b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),i
     &eor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h8b-
     &1)))))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1)+int
     &_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).eq.16)
     &) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p12b_1 = p12b
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      h13b_1 = h13b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_m
     &b(k_spin+p5b-1).eq.12)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1) *
     & int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p12b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_4',1,MA_ERR)
      IF ((p5b .le. p12b) .and. (h8b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p12b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h8 - 1) + int_mb(k_range+
     &h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p12b) .and. (h7b .le. h13b) .and. (h13b .lt. h8b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p12b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p12b) .and. (h6b .le. h13b) .and. (h13b .lt. h7b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h13b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p12b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p12b) .and. (h13b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h13b_1 - 1 + noa
     &b * (p12b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p5 - 1) + i
     &nt_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (p12b .lt. p5b) .and. (h8b .le. h13b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p12b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h8 - 1) + int_mb(k_range+
     &h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1) + in
     &t_mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (p12b .lt. p5b) .and. (h7b .le. h13b) .a
     &nd. (h13b .lt. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p12b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1) + in
     &t_mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (p12b .lt. p5b) .and. (h6b .le. h13b) .a
     &nd. (h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h13b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p12b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1) + in
     &t_mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (p12b .lt. p5b) .and. (h13b .lt. h6b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h13b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p12b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1) + in
     &t_mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h8b .le. h13b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p12b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h8 - 1) + int_mb(k_range+
     &h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h7b .le. h13b) .a
     &nd. (h13b .lt. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p12b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h6b .le. h13b) .a
     &nd. (h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h13b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p12b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b) .and. (h13b .lt. h6b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h13b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p12b_1 
     &- noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 
     &1))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h8b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 -
     & noab - 1 + nvab * (p12b_1 - noab - 1)))))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h8 - 1) + int_mb(k_range+
     &h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1
     &))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h7b .le. h13b) .and. (h13b .lt. h8b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 -
     & noab - 1 + nvab * (p12b_1 - noab - 1)))))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1
     &))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h6b .le. h13b) .and. (h13b .lt. h7b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h13b_1 - 1 + noab * (h6b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 -
     & noab - 1 + nvab * (p12b_1 - noab - 1)))))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1
     &))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b) .and. (h13b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h13b_1 - 1 + noa
     &b * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 -
     & noab - 1 + nvab * (p12b_1 - noab - 1)))))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int
     &_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1
     &))))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_4',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h8b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_ra
     &nge+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_4',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,36.0d0/FACTORIAL
     &(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIAL
     &(nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(nsubh(3)),dbl_mb(k_a_sort
     &),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),di
     &ma_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_4',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/36.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_4',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_4
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_4
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_4
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_ytt + = -1 * Sum ( h1 ) * t ( p12 h1 )_t * i2 ( h1 h13 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h1b_2
      INTEGER h13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p12
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,ieor(irrep_t,irrep_t))) THEN
      DO h1b = 1,noab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p12b_1 = p12b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      h1b_2 = int_mb(k_alpha+h1b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      ELSE
      h1b_2 = h1b
      h13b_2 = h13b
      END IF
      dim_common = int_mb(k_range+h1b-1)
      dima_sort = int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_5',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p12b_1 - noab - 1)))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p12 - 1))
      idima_sort = h1 + int_mb(k_range+h1b-1) * ((p12 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_5',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_5',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h13b_2 - 1
     & + noab * (h1b_2 - 1)))
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimb = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      idimb_sort = h1 + int_mb(k_range+h1b-1) * ((h13 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_5',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_5',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_5',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_5_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h1 h13 )_yt + = 1 * Sum ( p3 ) * t ( p3 h13 )_t * y ( h1 p3 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h1b
      INTEGER h13b
      INTEGER p3b
      INTEGER p3b_1
      INTEGER h13b_1
      INTEGER h1b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h1b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p3b_1 = p3b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h1b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      h1b_2 = int_mb(k_alpha+h1b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h1b_2 = h1b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_5_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1)))
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h1 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h1 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_5_1',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_5_1',7,MA_ERR)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h1b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_5_1',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_2_5_1(d_a,l_a_offset,k_a_offset,
     &size)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h1 h13 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h1b
      INTEGER h13b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_density1_2_5_1',0,MA_ERR)
      size = 0
      DO h1b = 1,noab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + h13b - 1 + noab * (h1b - 1)) = size
      size = size + int_mb(k_range+h1b-1) * int_mb(k_range+h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h1 h13 )_yt + = -1/2 * Sum ( h5 p4 p3 ) * t ( p3 p4 h5 h13 )_t * y ( h1 h5 p3 p4 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h1b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h13b_1
      INTEGER h5b_1
      INTEGER h1b_2
      INTEGER h5b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER h5
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h1b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      h13b_1 = h13b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h1b_2 = int_mb(k_alpha+h1b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h1b_2 = h1b
      h5b_2 = h5b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_2',1,MA_ERR)
      IF ((h5b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_range+
     &h5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_5_2',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_2',4,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h1b_2 - 1 + noab * (h5
     &b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h5 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h5b_2 - 1 + noab * (h1
     &b_2 - 1)))))
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_5_2',5
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_5_2',7,MA_ERR)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h1b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_5_2',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_2',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h1 h13 )_yt + = 1/12 * Sum ( h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 h6 h7 h13 )_t * y ( h1 h6 h7 p3 p4 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h1b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h1b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER h6
      INTEGER h7
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(3)
      INTEGER isuperp
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h1b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h6b-1),in
     &t_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h6b-1)+int_
     &mb(k_spin+h7b-1).eq.12)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      h13b_1 = h13b
      h6b_1 = h6b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_m
     &b(k_spin+p5b-1).eq.12)) THEN
      h1b_2 = int_mb(k_alpha+h1b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h1b_2 = h1b
      h6b_2 = h6b
      h7b_2 = h7b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_3',1,MA_ERR)
      IF ((h7b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_range+
     &h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h13b) .and. (h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h13b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_5_3',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_3',4,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h1b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h1 - 1) + int_mb(k_ra
     &nge+h1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h1b) .and. (h1b .le. h7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h1b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h6 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h1b_2 - 1)))))))
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h1 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_5_3',5
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,12.0d0/FACTORIAL
     &(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIAL
     &(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(
     &k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_5_3',7,MA_ERR)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/12.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h1b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_5_3',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_3',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_3',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_5_4(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h1 h13 )_yt + = -1/144 * Sum ( h9 h8 h7 p6 p5 p4 p3 ) * t ( p3 p4 p5 p6 h7 h8 h9 h13 )_t * y ( h1 h7 h8 h9 p3 p4 p5 p6 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h1b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h13b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h1b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h8
      INTEGER h9
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(4)
      INTEGER isuperp
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h1b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     &+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h7b
     &-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+h13b-1),ie
     &or(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h9b-1
     &)))))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h13b-1)+int_
     &mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.16))
     & THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h13b_1 = h13b
      h7b_1 = h7b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+p3b-1)+int_m
     &b(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.16)) 
     &THEN
      h1b_2 = int_mb(k_alpha+h1b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h1b_2 = h1b
      h7b_2 = h7b
      h8b_2 = h8b
      h9b_2 = h9b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1) *
     & int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_4',1,MA_ERR)
      IF ((h9b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h13 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h13b) .and. (h13b .lt. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h13 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h13b) .and. (h13b .lt. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h13b_1 - 1 + noab * (h7b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h13 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h13b_1 - 1 + noa
     &b * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h13 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_5_4',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_5_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_5_4',4,MA_ERR)
      IF ((h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h1b_2 - 1 + noab * (h9b_2 - 1 + no
     &ab * (h8b_2 - 1 + noab * (h7b_2 - 1)))))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h9 - 1) + int_m
     &b(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h1b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h1b_2 - 1 + no
     &ab * (h8b_2 - 1 + noab * (h7b_2 - 1)))))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 - 1) + int_m
     &b(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h1b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h1b_2 - 1 + noab * (h7b_2 - 1)))))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h7 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h7b_2 - 1 + noab * (h1b_2 - 1)))))))))
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_5_4',5
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      nsuperp(4) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,144.0d0/FACTORIA
     &L(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIA
     &L(nsuperp(4))/FACTORIAL(nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(ns
     &ubh(3)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.
     &0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_5_4',7,MA_ERR)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h1 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/144.0d0 * dbl_mb(k_c_sort + idimc
     &_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h1b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_5_4',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_4',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_5
     &_4',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_ytt + = 1/2 * Sum ( h11 h2 p8 ) * t ( p8 p12 h2 h11 )_t * i2 ( h2 h11 h13 p8 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p8b
      INTEGER h2b
      INTEGER h11b
      INTEGER p12b_1
      INTEGER p8b_1
      INTEGER h2b_1
      INTEGER h11b_1
      INTEGER h2b_2
      INTEGER h11b_2
      INTEGER h13b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p12
      INTEGER h2
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,ieor(irrep_t,irrep_t))) THEN
      DO p8b = noab+1,noab+nvab
      DO h2b = 1,noab
      DO h11b = h2b,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+
     &h2b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb
     &(k_sym+h2b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p8b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p12b_1 = p12b
      p8b_1 = p8b
      h2b_1 = h2b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h2b_2 = h2b
      h11b_2 = h11b
      h13b_2 = h13b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h11b-1)
      dima_sort = int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_6',1,MA_ERR)
      IF ((p8b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h2b_1 - 1 + noab * (p12b_1 - noab - 1 + nvab * (p8b_1 -
     & noab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h2b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p12b_1 -
     & noab - 1)))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p12 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_6',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_6',4,MA_ERR)
      IF ((h13b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h13b_2 - 1 + noab * (h11b_2 - 1 + noab * (h2b_2 -
     & 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h13 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_6',5,M
     &A_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h2b .eq. h11b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_6',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_6',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_6_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 h11 h13 p8 )_yt + = 1 * Sum ( p6 ) * t ( p6 h13 )_t * y ( h2 h11 p6 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h11b
      INTEGER h13b
      INTEGER p8b
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h13b_1
      INTEGER h2b_2
      INTEGER h11b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p6
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER h11
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h11b = h2b,noab
      DO h13b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_y,irrep_t)) 
     &THEN
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p6b_1 = int_mb(k_alpha+p6b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p6b_1 = p6b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p8b-1)+int_mb(k_spin+p6b-1).eq.8)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h2b_2 = h2b
      h11b_2 = h11b
      p8b_2 = p8b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p6b_1 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p6 - 1))
      idima_sort = p6 + int_mb(k_range+p6b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_6_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_1',4,MA_ERR)
      IF ((p6b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h
     &2b_2 - 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .lt. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h
     &2b_2 - 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimb_sort = p6 + int_mb(k_range+p6b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_6_1',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_6_1',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h2 - 1) + int_mb(k_r
     &ange+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h13b - 1 + noab * (h11b - 1 + noab *
     & (h2b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_6_1',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_2_6_1(d_a,l_a_offset,k_a_offset,
     &size)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 h11 h13 p8 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h2b
      INTEGER h11b
      INTEGER h13b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('ccsdtq_density1_2_6_1',0,MA_ERR)
      size = 0
      DO h2b = 1,noab
      DO h11b = h2b,noab
      DO h13b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_y,irrep_t)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h13b - 1 + noab * (h1
     &1b - 1 + noab * (h2b - 1)))) = size
      size = size + int_mb(k_range+h2b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h13b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 h11 h13 p8 )_yt + = -5/18 * Sum ( h7 p6 p5 ) * t ( p5 p6 h7 h13 )_t * i3 ( h2 h7 h11 p5 p6 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h11b
      INTEGER h13b
      INTEGER p8b
      INTEGER p5b
      INTEGER p6b
      INTEGER h7b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h13b_1
      INTEGER h7b_1
      INTEGER h2b_2
      INTEGER h11b_2
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER h11
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h11b = h2b,noab
      DO h13b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_y,irrep_t)) 
     &THEN
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h7b-1).eq.8)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p5b_1 = p5b
      p6b_1 = p6b
      h13b_1 = h13b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p5b-1)+int_
     &mb(k_spin+p6b-1).eq.12)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h2b_2 = h2b
      h11b_2 = h11b
      h7b_2 = h7b
      p8b_2 = p8b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+h7b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_2',1,MA_ERR)
      IF ((h7b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - 
     &noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_range+
     &h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_1 - 
     &noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_6_2',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_2',4,MA_ERR)
      IF ((h7b .lt. h2b) .and. (p6b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (p5b_2 - noab - 1 + nva
     &b * (h11b_2 - 1 + noab * (h2b_2 - 1 + noab * (h7b_2 - 1)))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h7 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p5b .le. p8b) .and. (p8b .lt. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p5b_2 - noab - 1 + nva
     &b * (h11b_2 - 1 + noab * (h2b_2 - 1 + noab * (h7b_2 - 1)))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h7 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (h11b_2 - 1 + noab * (h2b_2 - 1 + noab * (h7b_2 - 1)))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h7 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h7b) .and. (h7b .le. h11b) .and. (p6b .le. p8b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (p5b_2 - noab - 1 + nva
     &b * (h11b_2 - 1 + noab * (h7b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h7b) .and. (h7b .le. h11b) .and. (p5b .le. p8b) .and
     &. (p8b .lt. p6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p5b_2 - noab - 1 + nva
     &b * (h11b_2 - 1 + noab * (h7b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h7b) .and. (h7b .le. h11b) .and. (p8b .lt. p5b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (h11b_2 - 1 + noab * (h7b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h7b) .and. (p6b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (p5b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h7b) .and. (p5b .le. p8b) .and. (p8b .lt. p6b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p5b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h7b) .and. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_ran
     &ge+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_6_2',5
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_6_2',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h2 - 1) + int_mb(k_r
     &ange+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      dbl_mb(k_c + idimc - 1) = -5.0d0/18.0d0 * dbl_mb(k_c_sort + idimc_
     &sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h13b - 1 + noab * (h11b - 1 + noab *
     & (h2b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_6_2',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_2',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_6_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h2 h7 h11 p5 p6 p8 )_y + = 1 * y ( h2 h7 h11 p5 p6 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h7b
      INTEGER h11b
      INTEGER p5b
      INTEGER p6b
      INTEGER p8b
      INTEGER h2b_1
      INTEGER h7b_1
      INTEGER h11b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h2
      INTEGER h7
      INTEGER h11
      INTEGER p5
      INTEGER p6
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h7b = h2b,noab
      DO h11b = h7b,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p8b = p6b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+
     &int_mb(k_spin+p8b-1).ne.12)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p8b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),in
     &t_mb(k_sym+p8b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_
     &mb(k_spin+p8b-1).eq.12)) THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h2b_1 = h2b
      h7b_1 = h7b
      h11b_1 = h11b
      p5b_1 = p5b
      p6b_1 = p6b
      p8b_1 = p8b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h7b-1) * int_mb
     &(k_range+h11b-1) * int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) *
     & int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nva
     &b * (h11b_1 - 1 + noab * (h7b_1 - 1 + noab * (h2b_1 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_6_2_1'
     &,2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_density1_2_6_2_1',3,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p8 - 1))
     &))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p8b -
     & noab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1 + nvab
     & * (h11b - 1 + noab * (h7b - 1 + noab * (h2b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_6_2_1'
     &,4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_2_6_2_1(d_a,l_a_offset,k_a_offse
     &t,size)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h2 h7 h11 p5 p6 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h2b
      INTEGER h7b
      INTEGER h11b
      INTEGER p5b
      INTEGER p6b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab*nvab*nvab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_density1_2_6_2_1',0,
     &MA_ERR)
      size = 0
      DO h2b = 1,noab
      DO h7b = h2b,noab
      DO h11b = h7b,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p8b = p6b,noab+nvab
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p8b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),in
     &t_mb(k_sym+p8b-1)))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+
     &int_mb(k_spin+p8b-1).ne.12)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (p6b - noab - 1 + nvab
     & * (p5b - noab - 1 + nvab * (h11b - 1 + noab * (h7b - 1 + noab * (
     &h2b - 1)))))) = size
      size = size + int_mb(k_range+h2b-1) * int_mb(k_range+h7b-1) * int_
     &mb(k_range+h11b-1) * int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
     & * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_6_2_2(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h2 h7 h11 p5 p6 p8 )_y + = 4/5 * y ( h2 h7 h11 p5 p6 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h7b
      INTEGER h11b
      INTEGER p5b
      INTEGER p6b
      INTEGER p8b
      INTEGER h2b_1
      INTEGER h7b_1
      INTEGER h11b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h2
      INTEGER h7
      INTEGER h11
      INTEGER p5
      INTEGER p6
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h7b = h2b,noab
      DO h11b = h7b,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p8b = p6b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+
     &int_mb(k_spin+p8b-1).ne.12)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p8b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),in
     &t_mb(k_sym+p8b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_
     &mb(k_spin+p8b-1).eq.12)) THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h2b_1 = h2b
      h7b_1 = h7b
      h11b_1 = h11b
      p5b_1 = p5b
      p6b_1 = p6b
      p8b_1 = p8b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h7b-1) * int_mb
     &(k_range+h11b-1) * int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) *
     & int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nva
     &b * (h11b_1 - 1 + noab * (h7b_1 - 1 + noab * (h2b_1 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p8 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_6_2_2'
     &,2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_density1_2_6_2_2',3,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p8 - 1))
     &))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((p6 - 1) + int_mb(k_range+p6
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))))
      dbl_mb(k_c + idimc - 1) = 4.0d0/5.0d0 * dbl_mb(k_a_sort + idima_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p8b -
     & noab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1 + nvab
     & * (h11b - 1 + noab * (h7b - 1 + noab * (h2b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_6_2_2'
     &,4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_2_2',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 h11 h13 p8 )_yt + = 1/12 * Sum ( h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 h6 h7 h13 )_t * y ( h2 h6 h7 h11 p3 p4 p5 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h11b
      INTEGER h13b
      INTEGER p8b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h2b_2
      INTEGER h11b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER h6
      INTEGER h7
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER h11
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(3)
      INTEGER isuperp
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h11b = h2b,noab
      DO h13b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_y,irrep_t)) 
     &THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h6b-1),in
     &t_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h6b-1)+int_
     &mb(k_spin+h7b-1).eq.12)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      h13b_1 = h13b
      h6b_1 = h6b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1)+int_
     &mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).eq.16))
     & THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h2b_2 = h2b
      h11b_2 = h11b
      h6b_2 = h6b
      h7b_2 = h7b
      p8b_2 = p8b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_3',1,MA_ERR)
      IF ((h7b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_range+
     &h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h13b) .and. (h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h13b_1 - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h13b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_6_3',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_6_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_6_3',4,MA_ERR)
      IF ((h7b .lt. h2b) .and. (p5b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h2b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1) + int
     &_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p4b .le. p8b) .and. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h2b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1) + int
     &_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p3b .le. p8b) .and. (p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h2b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1) + int
     &_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h2b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1) + int
     &_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (h7b .le. h11b) .and
     &. (p5b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (h7b .le. h11b) .and
     &. (p4b .le. p8b) .and. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (h7b .le. h11b) .and
     &. (p3b .le. p8b) .and. (p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (h7b .le. h11b) .and
     &. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h11b .lt. h7b) .and. (p5b .le. p8b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h11b .lt. h7b) .and. (p4b .le. p8b) .and
     &. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h11b .lt. h7b) .and. (p3b .le. p8b) .and
     &. (p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h11b .lt. h7b) .and. (p8b .lt. p3b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h7b .le. h11b) .and. (p5b .le. p8b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h7b .le. h11b) .and. (p4b .le. p8b) .and
     &. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h7b .le. h11b) .and. (p3b .le. p8b) .and
     &. (p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h7b .le. h11b) .and. (p8b .lt. p3b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h6b .le. h11b) .and. (h11b .lt. h7b) .an
     &d. (p5b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h6b .le. h11b) .and. (h11b .lt. h7b) .an
     &d. (p4b .le. p8b) .and. (p8b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h6b .le. h11b) .and. (h11b .lt. h7b) .an
     &d. (p3b .le. p8b) .and. (p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (h6b .le. h11b) .and. (h11b .lt. h7b) .an
     &d. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h6b) .and. (p5b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h6b) .and. (p4b .le. p8b) .and. (p8b .lt. p5b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h6b) .and. (p3b .le. p8b) .and. (p8b .lt. p4b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h6b) .and. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1) + 
     &int_mb(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_6_3',5
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,12.0d0/FACTORIAL
     &(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIAL
     &(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(
     &k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_6_3',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h2 - 1) + int_mb(k_r
     &ange+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/12.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h13b - 1 + noab * (h11b - 1 + noab *
     & (h2b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_6_3',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_3',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_6
     &_3',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_ytt + = -1/12 * Sum ( h5 h6 h7 p3 p4 ) * t ( p3 p4 p12 h5 h6 h7 )_t * i2 ( h5 h6 h7 h13 p3 p4 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p12b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h13b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p12
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,ieor(irrep_t,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &) .eq. int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),in
     &t_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_
     &mb(k_spin+h7b-1).eq.12)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p12b_1 = p12b
      p3b_1 = p3b
      p4b_1 = p4b
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+int_
     &mb(k_spin+p4b-1).eq.12)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h13b_2 = h13b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_7',1,MA_ERR)
      IF ((p4b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p12b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p12 - 1) + int_mb(k_r
     &ange+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p12 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p12b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p12 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p3b_1 - noab - 1 + nvab * (p12b_1 - noab - 1)))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p12 - 1)))
     &)))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_7',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_7',4,MA_ERR)
      IF ((h13b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h13b_2 - 1 + noab * (h
     &7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_7',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h5b .eq. h6b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,12.0d0/FACTORIAL
     &(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsubh(1))/FACTORIAL(n
     &subh(2))/FACTORIAL(nsubh(3)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_
     &b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_7',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/12.0d0 * dbl_mb(k_c_sort + idimc_
     &sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_7',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_7_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h13 p3 p4 )_yt + = 1 * Sum ( p8 ) * t ( p8 h13 )_t * y ( h5 h6 h7 p3 p4 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h13b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+
     &int_mb(k_spin+p4b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p3b-1),in
     &t_mb(k_sym+p4b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p8b_1 = p8b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_m
     &b(k_spin+p8b-1).eq.12)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      p3b_2 = p3b
      p4b_2 = p4b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_7_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_7_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_7_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_7_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_7_1',4,MA_ERR)
      IF ((p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p8b) .and. (p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_7_1',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_7_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_7_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))
     &))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (h13b - 1 + 
     &noab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_7_1',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_2_7_1(d_a,l_a_offset,k_a_offset,
     &size)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h13 p3 p4 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*nvab*nvab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_density1_2_7_1',0,MA
     &_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h13b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p3b-1),in
     &t_mb(k_sym+p4b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+
     &int_mb(k_spin+p4b-1).ne.12)) THEN
      int_mb(k_a_offset + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (h13b - 1 + noab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1
     &)))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h13b-1) * int_mb(k_range+p3b-1)
     & * int_mb(k_range+p4b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h13 p3 p4 )_yt + = -1/2 * Sum ( h10 p9 p8 ) * t ( p8 p9 h10 h13 )_t * y ( h5 h6 h7 h10 p3 p4 p8 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p8b
      INTEGER p9b
      INTEGER h10b
      INTEGER p8b_1
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h10b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p9
      INTEGER h10
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h13b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+
     &int_mb(k_spin+p4b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p3b-1),in
     &t_mb(k_sym+p4b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO p9b = p8b,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p8b_1 = p8b
      p9b_1 = p9b
      h13b_1 = h13b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1)+int_
     &mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h10b_2 = h10b
      p3b_2 = p3b
      p4b_2 = p4b
      p8b_2 = p8b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+p9b-1) * int_m
     &b(k_range+h10b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_7_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_7_2',1,MA_ERR)
      IF ((h10b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p8b_1 -
     & noab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p8b_1 -
     & noab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_7_2',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_7_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_7_2',4,MA_ERR)
      IF ((h10b .lt. h5b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h10b_2 - 1)))))))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))
     &))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h5b) .and. (p8b .lt. p3b) .and. (p3b .le. p9b) .and
     &. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h10b_2 - 1)))))))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))
     &))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h5b) .and. (p8b .lt. p3b) .and. (p4b .le. p9b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h10b_2 - 1)))))))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))
     &))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h5b) .and. (p3b .le. p8b) .and. (p9b .lt. p4b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h10b_2 - 1)))))))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))
     &))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h5b) .and. (p3b .le. p8b) .and. (p8b .lt. p4b) .and
     &. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h10b_2 - 1)))))))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))
     &))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h5b) .and. (p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h10b_2 - 1)))))))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))
     &))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h10b .lt. h6b) .and. (p9b .lt. p3b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h10b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h10b .lt. h6b) .and. (p8b .lt. p3b) .an
     &d. (p3b .le. p9b) .and. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h10b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h10b .lt. h6b) .and. (p8b .lt. p3b) .an
     &d. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h10b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h10b .lt. h6b) .and. (p3b .le. p8b) .an
     &d. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h10b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h10b .lt. h6b) .and. (p3b .le. p8b) .an
     &d. (p8b .lt. p4b) .and. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h10b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h10b .lt. h6b) .and. (p4b .le. p8b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h10b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h10b) .and. (h10b .lt. h7b) .and. (p9b .lt. p3b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h10b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h10 - 1) + int_
     &mb(k_range+h10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h10b) .and. (h10b .lt. h7b) .and. (p8b .lt. p3b) .an
     &d. (p3b .le. p9b) .and. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h10b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h10 - 1) + int_
     &mb(k_range+h10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h10b) .and. (h10b .lt. h7b) .and. (p8b .lt. p3b) .an
     &d. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h10b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h10 - 1) + int_
     &mb(k_range+h10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h10b) .and. (h10b .lt. h7b) .and. (p3b .le. p8b) .an
     &d. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h10b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h10 - 1) + int_
     &mb(k_range+h10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h10b) .and. (h10b .lt. h7b) .and. (p3b .le. p8b) .an
     &d. (p8b .lt. p4b) .and. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h10b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h10 - 1) + int_
     &mb(k_range+h10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h10b) .and. (h10b .lt. h7b) .and. (p4b .le. p8b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h10b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h10 - 1) + int_
     &mb(k_range+h10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h10b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h10b) .and. (p8b .lt. p3b) .and. (p3b .le. p9b) .and
     &. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h10b) .and. (p8b .lt. p3b) .and. (p4b .le. p9b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p8b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h10b) .and. (p3b .le. p8b) .and. (p9b .lt. p4b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h10b) .and. (p3b .le. p8b) .and. (p8b .lt. p4b) .and
     &. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p8b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h10b) .and. (p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1) + int_
     &mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) 
     &+ int_mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_7_2',5
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p8b .eq. p9b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_7_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_7_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))
     &))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (h13b - 1 + 
     &noab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_7_2',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &_2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_7
     &_2',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p12 h13 )_ytt + = -1/144 * Sum ( h6 h7 h8 h9 p3 p4 p5 ) * t ( p3 p4 p5 p12 h6 h7 h8 h9 )_t * i2 ( h6 h7 h8 h9 h13 p3 p4 p5 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p12b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p12b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER h13b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER p12
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(3)
      INTEGER isuperp
      INTEGER nsubh(4)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p12b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p12b-1)+int_mb(k_spin+h13b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irre
     &p_y,ieor(irrep_t,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b
     &-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h6b-1),ie
     &or(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h9b-1
     &)))))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1)+int_
     &mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.16))
     & THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p12b_1 = p12b
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h13b-1)+int_
     &mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).eq.16))
     & THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      h9b_2 = h9b
      h13b_2 = h13b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1) *
     & int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_8',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_8',1,MA_ERR)
      IF ((p5b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p12b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p5 - 1) + int
     &_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p12 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b) .and. (p12b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p5b_1 - noab - 1 + nvab * (p12b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1) + int_
     &mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p12 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p12b) .and. (p12b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p12b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int_m
     &b(k_range+p4b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p3 - 1)
     &)))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p12 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1 + nvab * (p12b_1 - noab - 1)))))))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int_m
     &b(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p12 - 1))
     &))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p12 
     &- 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_8',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_8',4,MA_ERR)
      IF ((h13b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h13b_2 - 1 + noab * (h9b_2 - 1 + noab * (h8b_2 - 1 + noab * (
     &h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int
     &_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h13 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_8',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      nsubh(4) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_8',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,144.0d0/FACTORIA
     &L(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIA
     &L(nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(nsubh(3))/FACTORIAL(nsub
     &h(4)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d
     &0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_8',7,MA_ERR)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p12 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/144.0d0 * dbl_mb(k_c_sort + idimc
     &_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p12b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_8',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_8
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_8
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_8
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_2_8_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 h7 h8 h9 h13 p3 p4 p5 )_yt + = 1 * Sum ( p10 ) * t ( p10 h13 )_t * y ( h6 h7 h8 h9 p3 p4 p5 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER h9b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER h9
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO h9b = h8b,noab
      DO h13b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).ne.
     &16)) THEN
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)
     &+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b
     &-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h13b-1),ie
     &or(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p5b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h13b-1).
     &eq.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p10b_1 = p10b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+p3b-1)+int_m
     &b(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1).eq.16))
     & THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      h9b_2 = h9b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1) * int_mb
     &(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb(k_range+p3b-1) * 
     &int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_8_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_2_8_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_2_8_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_2_8_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_2_8_1',4,MA_ERR)
      IF ((p10b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p10b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int
     &_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h6 - 1) + int_mb(k_r
     &ange+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_
     &mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) 
     &+ int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p10b) .and. (p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p3 - 1) + int_mb(k_
     &range+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int
     &_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h6 - 1) + int_mb(k_r
     &ange+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_
     &mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) 
     &+ int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nv
     &ab * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_
     &range+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int
     &_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h6 - 1) + int_mb(k_r
     &ange+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_
     &mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) 
     &+ int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nv
     &ab * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + n
     &oab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p5 - 1) + int_mb(k_range+
     &p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_
     &range+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int
     &_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h6 - 1) + int_mb(k_r
     &ange+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_
     &mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) 
     &+ int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_2_8_1',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_8_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_2_8_1',7,MA_ERR)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_r
     &ange+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_
     &mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p3 - 1) 
     &+ int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5
     & - 1))))))))
      idimc = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h13 - 1) + int_mb(k_r
     &ange+h13b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int
     &_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)
     &)))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p5b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (h13b - 1 + noab * (h9b - 1 + noab * (h8b - 1 + noab 
     &* (h7b - 1 + noab * (h6b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_2_8_1',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_2_8
     &_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_2_8
     &_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_2_8
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_2_8_1(d_a,l_a_offset,k_a_offset,
     &size)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 h7 h8 h9 h13 p3 p4 p5 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER h9b
      INTEGER h13b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*noab*nvab*nvab*nva
     &b,'noname',l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_density1_2
     &_8_1',0,MA_ERR)
      size = 0
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO h9b = h8b,noab
      DO h13b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)
     &+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b
     &-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h13b-1),ie
     &or(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p5b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).ne.
     &16)) THEN
      int_mb(k_a_offset + p5b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h13b - 1 + noab * (h9b - 1 + noab * (
     &h8b - 1 + noab * (h7b - 1 + noab * (h6b - 1)))))))) = size
      size = size + int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1) * int_
     &mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb(k_range+h13b-1)
     & * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_range+
     &p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_ytd + = -1 * Sum ( h2 h1 ) * d ( h1 h2 )_d * i1 ( h2 h1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h1b
      INTEGER h2b
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h2b_2
      INTEGER h1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_y,ieor(irrep_t,irrep_d))) THEN
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)) .eq. irrep_d) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq
     &.4)) THEN
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      ELSE
      h2b_2 = h2b
      h1b_2 = h1b
      END IF
      dim_common = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1)))
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1))
      idima_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_3',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h1b_2 - 1 
     &+ noab * (h2b_2 - 1)))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimb = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      idimb_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_3',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_3',7,MA_ERR)
      idimc_sort = 1
      idimc = 1
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_3',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_3',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_3',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 h1 )_yt + = 1 * Sum ( p3 ) * t ( p3 h1 )_t * y ( h2 p3 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h1b
      INTEGER p3b
      INTEGER p3b_1
      INTEGER h1b_1
      INTEGER h2b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p3b_1 = p3b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h2b_2 = h2b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p3b_1 - noab - 1)))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p3 - 1))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_3_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_3_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1)))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h2 - 1))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_3_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_3_1',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_3_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_3_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_3_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_3_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 h1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h2b
      INTEGER h1b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_density1_3_1',0,MA_ERR)
      size = 0
      DO h2b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h1b - 1 + noab * (h2b - 1)) = size
      size = size + int_mb(k_range+h2b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 h1 )_yt + = 1/2 * Sum ( h5 p4 p3 ) * t ( p3 p4 h1 h5 )_t * y ( h2 h5 p3 p4 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h1b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER h5b_1
      INTEGER h2b_2
      INTEGER h5b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER h5
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      h1b_1 = h1b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h2b_2 = h2b
      h5b_2 = h5b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_3_2',1,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_3_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_3_2',4,MA_ERR)
      IF ((h5b .lt. h2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h5
     &b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h5 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h5b_2 - 1 + noab * (h2
     &b_2 - 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h2 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_3_2',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_3_2',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_3_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_3_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_3_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 h1 )_yt + = 1/12 * Sum ( h7 h6 p5 p4 p3 ) * t ( p3 p4 p5 h1 h6 h7 )_t * y ( h2 h6 h7 p3 p4 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h1b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h2b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER h6
      INTEGER h7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(3)
      INTEGER isuperp
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h6b-1),int
     &_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)+int_m
     &b(k_spin+h7b-1).eq.12)) THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      h1b_1 = h1b
      h6b_1 = h6b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_m
     &b(k_spin+p5b-1).eq.12)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h2b_2 = h2b
      h6b_2 = h6b
      h7b_2 = h7b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_3_3',1,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h1b) .and. (h1b .le. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_3_3',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_3_3',4,MA_ERR)
      IF ((h7b .lt. h2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h2 - 1) + int_mb(k_ra
     &nge+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_3_3',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,12.0d0/FACTORIAL
     &(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIAL
     &(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(
     &k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_3_3',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/12.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_3_3',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_3
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_3_3
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_3_3
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_3_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 h1 )_yt + = 1/144 * Sum ( h9 h8 h7 p6 p5 p4 p3 ) * t ( p3 p4 p5 p6 h1 h7 h8 h9 )_t * y ( h2 h7 h8 h9 p3 p4 p5 p6 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h1b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h2b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h8
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(4)
      INTEGER isuperp
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     &+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h7b-
     &1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h9b-1)
     &))))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_m
     &b(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.16)) 
     &THEN
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h7b_1 = h7b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+p3b-1)+int_m
     &b(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).eq.16)) 
     &THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      ELSE
      h2b_2 = h2b
      h7b_2 = h7b
      h8b_2 = h8b
      h9b_2 = h9b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      p6b_2 = p6b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1) *
     & int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_3_4',1,MA_ERR)
      IF ((h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab
     & * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h1b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab
     & * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h1b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab
     & * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab
     & * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1) + int_mb(k_ra
     &nge+h1b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_3_4',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_3_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_3_4',4,MA_ERR)
      IF ((h9b .lt. h2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h9b_2 - 1 + no
     &ab * (h8b_2 - 1 + noab * (h7b_2 - 1)))))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h9 - 1) + int_m
     &b(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h2 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .lt. h2b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h2b_2 - 1 + no
     &ab * (h8b_2 - 1 + noab * (h7b_2 - 1)))))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h2 - 1) + int_m
     &b(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h2 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h2b_2 - 1 + noab * (h7b_2 - 1)))))))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h7 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h2 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p6b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h7b_2 - 1 + noab * (h2b_2 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      idimb = p6 + int_mb(k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h2 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h2 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_3_4',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      nsuperp(4) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,144.0d0/FACTORIA
     &L(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIA
     &L(nsuperp(4))/FACTORIAL(nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(ns
     &ubh(3)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.
     &0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_3_4',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/144.0d0 * dbl_mb(k_c_sort + idimc_
     &sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_3_4',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_3_4
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_3_4
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_3_4
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_ytd + = -1/2 * Sum ( p2 p1 ) * d ( p1 p2 )_d * i1 ( p2 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p1b
      INTEGER p2b
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p2b_2
      INTEGER p1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_y,ieor(irrep_t,irrep_d))) THEN
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (int_mb(k_spin+p1b-1) .eq. int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b-1)) .eq. irrep_d) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq
     &.4)) THEN
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      ELSE
      p1b_1 = p1b
      p2b_1 = p2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      p2b_2 = int_mb(k_alpha+p2b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      ELSE
      p2b_2 = p2b
      p1b_2 = p1b
      END IF
      dim_common = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_4',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - 1 
     &+ (noab+nvab) * (p1b_1 - 1)))
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1))
      idima_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_4',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1)))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p2 - 1))
      idimb_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_4',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_4',7,MA_ERR)
      idimc_sort = 1
      idimc = 1
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_4',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_4',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_4',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_4',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p1 )_yt + = -1 * Sum ( h5 h4 p3 ) * t ( p2 p3 h4 h5 )_t * y ( h4 h5 p1 p3 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER p1b
      INTEGER p3b
      INTEGER h4b
      INTEGER h5b
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h5b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER p1b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p2
      INTEGER h4
      INTEGER h5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      DO h5b = h4b,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &4b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h4b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p2b_1 = p2b
      p3b_1 = p3b
      h4b_1 = h4b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p3b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h4b_2 = h4b
      h5b_2 = h5b
      p1b_2 = p1b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_4_1',1,MA_ERR)
      IF ((p3b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p3b_1 - n
     &oab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h4b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - n
     &oab - 1)))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h4 - 1) + int_mb(k_range+h4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_4_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_4_1',4,MA_ERR)
      IF ((p3b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h5b_2 - 1 + noab * (h4
     &b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h5b_2 - 1 + noab * (h4
     &b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_4_1',5,M
     &A_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h4b .eq. h5b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_4_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_4_1',7,MA_ERR)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_4_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_4_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_4_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_4_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_density1_4_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p1 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p2b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_density1_4_1',0,MA_ERR)
      size = 0
      DO p2b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (p2b - noab - 1)) = si
     &ze
      size = size + int_mb(k_range+p2b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_density1_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p1 )_yt + = -1/6 * Sum ( h7 h6 h5 p4 p3 ) * t ( p2 p3 p4 h5 h6 h7 )_t * y ( h5 h6 h7 p1 p3 p4 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER p1b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p1b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p2
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     & .eq. int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+p4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),int
     &_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_m
     &b(k_spin+h7b-1).eq.12)) THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p2b_1 = p2b
      p3b_1 = p3b
      p4b_1 = p4b
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b-1)+int_m
     &b(k_spin+p4b-1).eq.12)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      p1b_2 = p1b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_4_2',1,MA_ERR)
      IF ((p4b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p2b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p2 - 1) + int_mb(k_ra
     &nge+p2b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .lt. p2b) .and. (p2b .le. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p2b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1)))))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_4_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_4_2',4,MA_ERR)
      IF ((p4b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .lt. p1b) .and. (p1b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_4_2',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h5b .eq. h6b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,12.0d0/FACTORIAL
     &(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsubh(1))/FACTORIAL(n
     &subh(2))/FACTORIAL(nsubh(3)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_
     &b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_4_2',7,MA_ERR)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/6.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_4_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_4_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_4_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_4_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_density1_4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_density1.F,v 1.2 2003-10-19 00:53:58 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p2 p1 )_yt + = -1/72 * Sum ( h9 h8 h7 h6 p5 p4 p3 ) * t ( p2 p3 p4 p5 h6 h7 h8 h9 )_t * y ( h6 h7 h8 h9 p1 p3 p4 p5 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER p1b
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p1b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p5
      INTEGER p2
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(3)
      INTEGER isuperp
      INTEGER nsubh(4)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_t)) THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-
     &1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h6b-1),ieo
     &r(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h9b-1)
     &))))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h6b-1)+int_m
     &b(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.16)) 
     &THEN
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p2b_1 = p2b
      p3b_1 = p3b
      p4b_1 = p4b
      p5b_1 = p5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).eq.16)) 
     &THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      h9b_2 = h9b
      p1b_2 = p1b
      p3b_2 = p3b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_mb(k_range+h7b-1) *
     & int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_density1_4_3',1,MA_ERR)
      IF ((p5b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p2b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .lt. p2b) .and. (p2b .le. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p5b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p2 - 1) + int_m
     &b(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .lt. p2b) .and. (p2b .le. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p2b_1 - 
     &noab - 1 + nvab * (p3b_1 - noab - 1)))))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int_m
     &b(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab
     & * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1 + nvab * (p2b_1 - noab - 1)))))))))
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1) + int_m
     &b(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p2 - 1)))
     &)))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p2 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_density1_4_3',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_density1_4_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_density1_4_3',4,MA_ERR)
      IF ((p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .lt. p1b) .and. (p1b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p4b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .lt. p1b) .and. (p1b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p3b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h9b_2 - 1 + noab * (h8b_2 - 1 + no
     &ab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1)))
     &)))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p1 -
     & 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_density1_4_3',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      nsuperp(3) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      nsubh(4) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_density1_4_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,144.0d0/FACTORIA
     &L(nsuperp(1))/FACTORIAL(nsuperp(2))/FACTORIAL(nsuperp(3))/FACTORIA
     &L(nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(nsubh(3))/FACTORIAL(nsub
     &h(4)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d
     &0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_density1_4_3',7,MA_ERR)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p2 + int_mb(k_range+p2b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/72.0d0 * dbl_mb(k_c_sort + idimc_
     &sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_density1_4_3',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_density1_4_3
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_density1_4_3
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_density1_4_3
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
#endif
