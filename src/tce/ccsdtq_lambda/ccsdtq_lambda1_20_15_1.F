      SUBROUTINE ccsdtq_lambda1_20_15_1(d_a,k_a_offset,d_b,k_b_offset,d_
     &c,k_c_offset)
C     $Id: ccsdtq_lambda1_20_15_1.F,v 1.2 2003-10-19 00:54:03 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h6 p17 h13 h16 )_ft + = 1 * Sum ( p4 ) * t ( p4 p17 h13 h16 )_t * i3 ( h6 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p17b
      INTEGER h6b
      INTEGER h13b
      INTEGER h16b
      INTEGER p4b
      INTEGER p17b_1
      INTEGER p4b_1
      INTEGER h13b_1
      INTEGER h16b_1
      INTEGER h6b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p17
      INTEGER h13
      INTEGER h16
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p17b = noab+1,noab+nvab
      DO h6b = 1,noab
      DO h13b = 1,noab
      DO h16b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p17b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h16b-1).ne.8)) THEN
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+p17b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h16b-1)))) .eq. ieor(irrep_f,irrep_t))
     & THEN
      DO p4b = noab+1,noab+nvab
      IF (int_mb(k_spin+p17b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p17b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h16b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p17b-1)+int_mb(k_spin+p4b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+h16b-1).eq.8)) THEN
      p17b_1 = int_mb(k_alpha+p17b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h16b_1 = int_mb(k_alpha+h16b-1)
      ELSE
      p17b_1 = p17b
      p4b_1 = p4b
      h13b_1 = h13b
      h16b_1 = h16b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p4b-1).eq
     &.4)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h6b_2 = h6b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1)
      dima_sort = int_mb(k_range+p17b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h16b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_15_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_15_1',1,MA_ERR)
      IF ((p4b .le. p17b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p17b_1 - noab - 1 + nvab * (p4b_1 
     &- noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p17 - 1) + int_mb(k_ra
     &nge+p17b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h16 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p17b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p17b_1 
     &- noab - 1)))))
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p17 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p17 - 1) + int_mb(k_ra
     &nge+p17b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h16 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_15_1',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_15_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_15_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (h6b_2 - 1)))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h6 - 1))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h6 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_20_15_1',
     &5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_15_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_20_15_1',7,MA_ERR)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p17 + int_mb(k_range+p17b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((h6 - 1))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((h6 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (h13b - 1 + noab * (p17b - noab - 1 + nvab 
     &* (h6b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_15_1',
     &8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_1
     &5_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_1
     &5_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_1
     &5_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
