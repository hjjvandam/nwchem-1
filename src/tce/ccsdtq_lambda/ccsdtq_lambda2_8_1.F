      SUBROUTINE ccsdtq_lambda2_8_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda2_8_1.F,v 1.1 2003-09-16 21:52:32 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p7 h9 p1 )_v + = 1 * v ( h3 p7 h9 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p7b
      INTEGER p1b
      INTEGER h9b
      INTEGER h3b_1
      INTEGER p7b_1
      INTEGER p1b_1
      INTEGER h9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h3
      INTEGER p7
      INTEGER h9
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p7b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      h3b_1 = h3b
      p7b_1 = p7b
      p1b_1 = p1b
      h9b_1 = h9b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p7b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda2_8_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda2_8_1',1)
      IF ((h3b .le. p7b) .and. (h9b .le. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h9b_1 - 1 + (noab+nvab) * (p7b_1 - 1 + (noab+nvab
     &) * (h3b_1 - 1)))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda2_8_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda2_8_1',3)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima_sort = h3 + int_mb(k_range+h3b-1) * ((p7 - 1) + int_mb(k_ran
     &ge+p7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h9 - 1))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h9b -
     & 1 + noab * (p1b - noab - 1 + nvab * (p7b - noab - 1 + nvab * (h3b
     & - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda2_8_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda2_8_1'
     &,5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
