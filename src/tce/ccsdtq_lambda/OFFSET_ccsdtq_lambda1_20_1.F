      SUBROUTINE OFFSET_ccsdtq_lambda1_20_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: OFFSET_ccsdtq_lambda1_20_1.F,v 1.2 2003-10-19 00:53:43 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p15 p17 p18 h13 h14 h16 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p15b
      INTEGER p17b
      INTEGER p18b
      INTEGER h13b
      INTEGER h14b
      INTEGER h16b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda1_20_1',0,MA_E
     &RR)
      size = 0
      DO p15b = noab+1,noab+nvab
      DO p17b = p15b,noab+nvab
      DO p18b = p17b,noab+nvab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      DO h16b = h14b,noab
      IF (int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b-1)+int_mb(k_spin+p18b
     &-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin
     &+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p15b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_m
     &b(k_sym+p18b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1
     &),int_mb(k_sym+h16b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b
     &-1)+int_mb(k_spin+p18b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h16b-1).ne.12)) THEN
      int_mb(k_a_offset + h16b - 1 + noab * (h14b - 1 + noab * (h13b - 1
     & + noab * (p18b - noab - 1 + nvab * (p17b - noab - 1 + nvab * (p15
     &b - noab - 1)))))) = size
      size = size + int_mb(k_range+p15b-1) * int_mb(k_range+p17b-1) * in
     &t_mb(k_range+p18b-1) * int_mb(k_range+h13b-1) * int_mb(k_range+h14
     &b-1) * int_mb(k_range+h16b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
