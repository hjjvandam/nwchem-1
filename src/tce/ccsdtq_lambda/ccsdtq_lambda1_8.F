      SUBROUTINE ccsdtq_lambda1_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda1_8.F,v 1.1 2003-09-16 21:52:00 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h2 p1 )_yv + = 1/4 * Sum ( h13 h12 p15 p14 ) * y ( h2 h12 h13 p1 p14 p15 )_y * i1 ( p14 p15 h12 h13 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p1b
      INTEGER h12b
      INTEGER h13b
      INTEGER p14b
      INTEGER p15b
      INTEGER h2b_1
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER p1b_1
      INTEGER p14b_1
      INTEGER p15b_1
      INTEGER p14b_2
      INTEGER p15b_2
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h12
      INTEGER h13
      INTEGER h2
      INTEGER p14
      INTEGER p15
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperh(2)
      INTEGER isuperh
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,irrep_v)) THEN
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO p14b = noab+1,noab+nvab
      DO p15b = p14b,noab+nvab
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-
     &1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p14b-1)+int_mb(k_spin+p
     &15b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p14b-1),
     &int_mb(k_sym+p15b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p14b-1)+in
     &t_mb(k_spin+p15b-1).eq.12)) THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p14b_1 = int_mb(k_alpha+p14b-1)
      p15b_1 = int_mb(k_alpha+p15b-1)
      ELSE
      h2b_1 = h2b
      h12b_1 = h12b
      h13b_1 = h13b
      p1b_1 = p1b
      p14b_1 = p14b
      p15b_1 = p15b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p15b-1)+
     &int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).eq.8)) THEN
      p14b_2 = int_mb(k_alpha+p14b-1)
      p15b_2 = int_mb(k_alpha+p15b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      ELSE
      p14b_2 = p14b
      p15b_2 = p15b
      h12b_2 = h12b
      h13b_2 = h13b
      END IF
      dim_common = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int
     &_mb(k_range+p14b-1) * int_mb(k_range+p15b-1)
      dima_sort = int_mb(k_range+h2b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_8',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_8',1)
      IF ((h13b .lt. h2b) .and. (p15b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p15b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + n
     &vab * (h2b_1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p15 - 1) + int_mb(k_range+p
     &15b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h2 - 1) + int_mb(
     &k_range+h2b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))
     &))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h2b) .and. (p14b .lt. p1b) .and. (p1b .le. p15b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p15b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + n
     &vab * (h2b_1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      idima = p15 + int_mb(k_range+p15b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h2 - 1) + int_mb(
     &k_range+h2b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))
     &))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h2b) .and. (p1b .le. p14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p15b_1 - n
     &oab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + n
     &vab * (h2b_1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      idima = p15 + int_mb(k_range+p15b-1) * ((p14 - 1) + int_mb(k_range
     &+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h2 - 1) + int_mb(
     &k_range+h2b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))
     &))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h2b) .and. (h2b .le. h13b) .and. (p15b .lt. p1b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p15b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + n
     &vab * (h13b_1 - 1 + noab * (h2b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p15 - 1) + int_mb(k_range+p
     &15b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h13 - 1) + int_mb
     &(k_range+h13b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1))
     &))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h2b) .and. (h2b .le. h13b) .and. (p14b .lt. p1b) .a
     &nd. (p1b .le. p15b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p15b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + n
     &vab * (h13b_1 - 1 + noab * (h2b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      idima = p15 + int_mb(k_range+p15b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h13 - 1) + int_mb
     &(k_range+h13b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1))
     &))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h2b) .and. (h2b .le. h13b) .and. (p1b .le. p14b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p15b_1 - n
     &oab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + n
     &vab * (h13b_1 - 1 + noab * (h2b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      idima = p15 + int_mb(k_range+p15b-1) * ((p14 - 1) + int_mb(k_range
     &+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h13 - 1) + int_mb
     &(k_range+h13b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1))
     &))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h12b) .and. (p15b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p15b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + n
     &vab * (h13b_1 - 1 + noab * (h12b_1 - 1 + noab * (h2b_1 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p15 - 1) + int_mb(k_range+p
     &15b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h13 - 1) + int_mb
     &(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1)
     &)))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h12b) .and. (p14b .lt. p1b) .and. (p1b .le. p15b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p15b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + n
     &vab * (h13b_1 - 1 + noab * (h12b_1 - 1 + noab * (h2b_1 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      idima = p15 + int_mb(k_range+p15b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h13 - 1) + int_mb
     &(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1)
     &)))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h12b) .and. (p1b .le. p14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p15b_1 - n
     &oab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + n
     &vab * (h13b_1 - 1 + noab * (h12b_1 - 1 + noab * (h2b_1 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      idima = p15 + int_mb(k_range+p15b-1) * ((p14 - 1) + int_mb(k_range
     &+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h13 - 1) + int_mb
     &(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1)
     &)))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1) +
     & int_mb(k_range+p15b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p1
     & - 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_8',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_8',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_8',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h13b_2 - 1
     & + noab * (h12b_2 - 1 + noab * (p15b_2 - noab - 1 + nvab * (p14b_2
     & - noab - 1)))))
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimb = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((p14 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p15 - 1)))
     &)
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_8',5)
      nsuperh(1) = 1
      nsuperh(2) = 1
      isuperh = 1
      IF (h12b .eq. h13b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p14b .eq. p15b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_8',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,4.0d0/FACTORIAL(
     &nsuperh(1))/FACTORIAL(nsuperh(2))/FACTORIAL(nsubp(1))/FACTORIAL(ns
     &ubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.
     &0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_8',7)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h2 + int_mb(k_range+h2b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_8',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_8',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_8',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_8',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
