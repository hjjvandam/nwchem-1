      SUBROUTINE ccsdtq_lambda1_21_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda1_21_1_1.F,v 1.2 2003-10-19 00:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 p19 h17 p5 )_v + = 1 * v ( h2 p19 h17 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p19b
      INTEGER h17b
      INTEGER p5b
      INTEGER h2b_1
      INTEGER p19b_1
      INTEGER h17b_1
      INTEGER p5b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h2
      INTEGER p19
      INTEGER h17
      INTEGER p5
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO p19b = noab+1,noab+nvab
      DO h17b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p19b-
     &1)+int_mb(k_spin+h17b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+p19b-1) .eq. int_mb(k_spin+
     &h17b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+p19b-1),ieor(int_mb
     &(k_sym+h17b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p19b-1)+i
     &nt_mb(k_spin+h17b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      p19b_1 = int_mb(k_alpha+p19b-1)
      h17b_1 = int_mb(k_alpha+h17b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      ELSE
      h2b_1 = h2b
      p19b_1 = p19b
      h17b_1 = h17b
      p5b_1 = p5b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h2b-1) * int_mb(k_range+p19b-1) * int_m
     &b(k_range+h17b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_21_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_21_1_1',1,MA_ERR)
      IF ((h2b .le. p19b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p5b_1 - 1 
     &+ (noab+nvab) * (h17b_1 - 1 + (noab+nvab) * (p19b_1 - 1 + (noab+nv
     &ab) * (h2b_1 - 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p19 = 1,int_mb(k_range+p19b-1)
      DO h17 = 1,int_mb(k_range+h17b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima = p5 + int_mb(k_range+p5b-1) * ((h17 - 1) + int_mb(k_range+h
     &17b-1) * ((p19 - 1) + int_mb(k_range+p19b-1) * ((h2 - 1))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((p19 - 1) + int_mb(k_ra
     &nge+p19b-1) * ((h17 - 1) + int_mb(k_range+h17b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_21_1_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda1_21_1_1',3,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p19 = 1,int_mb(k_range+p19b-1)
      DO h17 = 1,int_mb(k_range+h17b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((p19 - 1) + int_mb(k_ra
     &nge+p19b-1) * ((h17 - 1) + int_mb(k_range+h17b-1) * ((p5 - 1))))
      idimc = p5 + int_mb(k_range+p5b-1) * ((h17 - 1) + int_mb(k_range+h
     &17b-1) * ((p19 - 1) + int_mb(k_range+p19b-1) * ((h2 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p5b -
     & noab - 1 + nvab * (h17b - 1 + noab * (p19b - noab - 1 + nvab * (h
     &2b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_21_1_1',4
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_21_1
     &_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
