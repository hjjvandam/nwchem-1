      SUBROUTINE ccsdtq_lambda3_26_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda3_26_2.F,v 1.2 2003-10-19 00:54:27 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 h5 p14 h13 p1 p2 )_ytt + = 1 * Sum ( h9 h10 p7 ) * t ( p7 p14 h9 h10 )_t * i2 ( h4 h5 h9 h10 h13 p1 p2 p7 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER h5b
      INTEGER p14b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER p7b
      INTEGER h9b
      INTEGER h10b
      INTEGER p14b_1
      INTEGER p7b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER h13b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p14
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER h5
      INTEGER p1
      INTEGER p2
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+h13b-1).ne.12)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+p14b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+p14b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) 
     &THEN
      DO p7b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (int_mb(k_spin+p14b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+
     &h9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb
     &(k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p7b-1)+i
     &nt_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p14b_1 = int_mb(k_alpha+p14b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p14b_1 = p14b
      p7b_1 = p7b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p7b-1).eq.16)
     &) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h4b_2 = h4b
      h5b_2 = h5b
      h9b_2 = h9b
      h10b_2 = h10b
      p1b_2 = p1b
      p2b_2 = p2b
      h13b_2 = h13b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h9b-1) * int_m
     &b(k_range+h10b-1)
      dima_sort = int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+h5b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_26_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda3_26_2',1,MA_ERR)
      IF ((p7b .le. p14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p14b_1 - noab - 1 + nvab * (p7b_1 -
     & noab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p14 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p14b .lt. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p14b_1 -
     & noab - 1)))))
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p14 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p14 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda3_26_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_26_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda3_26_2',4,MA_ERR)
      IF ((h13b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h13b_2 - 1 + noab * (p2b_2 - noab - 1 + nvab * (p
     &1b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab * (h9b_2 - 1 + noab * 
     &(h5b_2 - 1 + noab * (h4b_2 - 1)))))))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1) + i
     &nt_mb(k_range+h9b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 
     &1))))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h4 - 1) + int_
     &mb(k_range+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1
     &3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda3_26_2',5,M
     &A_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h9b .eq. h10b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_26_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda3_26_2',7,MA_ERR)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p14 + int_mb(k_range+p14b-1) * ((h4 - 1) + int_mb(k_r
     &ange+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1) + int_
     &mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h13 - 1)
     &)))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p14 - 1) + int_mb(k
     &_range+p14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + 
     &nvab * (p14b - noab - 1 + nvab * (h5b - 1 + noab * (h4b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda3_26_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_26_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda3_26_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda3_26_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
