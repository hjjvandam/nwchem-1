      SUBROUTINE ccsdtq_lambda1_23_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda1_23_2.F,v 1.2 2003-10-19 00:54:07 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p13 p14 h16 p1 )_ytt + = 1/2 * Sum ( h6 h7 h8 p3 ) * t ( p3 p13 p14 h6 h7 h8 )_t * i2 ( h6 h7 h8 h16 p1 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p13b
      INTEGER p14b
      INTEGER p1b
      INTEGER h16b
      INTEGER p3b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p13b_1
      INTEGER p14b_1
      INTEGER p3b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER h16b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p13
      INTEGER p14
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER h16
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p13b = noab+1,noab+nvab
      DO p14b = p13b,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h16b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p13b-1)+int_mb(k_spin+p14b
     &-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h16b-1).ne.8)) THEN
      IF (int_mb(k_spin+p13b-1)+int_mb(k_spin+p14b-1) .eq. int_mb(k_spin
     &+p1b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+p14b-1),ieor(int_m
     &b(k_sym+p1b-1),int_mb(k_sym+h16b-1)))) .eq. ieor(irrep_y,ieor(irre
     &p_t,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p13b-1)+int_mb(k_spin+p14b-1)+int_mb(k_spin+p3b-
     &1) .eq. int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+p14b-1),ieor(int_m
     &b(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+h7b-1),i
     &nt_mb(k_sym+h8b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p13b-1)+int_mb(k_spin+p14b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+int
     &_mb(k_spin+h8b-1).eq.12)) THEN
      p13b_1 = int_mb(k_alpha+p13b-1)
      p14b_1 = int_mb(k_alpha+p14b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p13b_1 = p13b
      p14b_1 = p14b
      p3b_1 = p3b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h16b-1)+int_
     &mb(k_spin+p3b-1).eq.12)) THEN
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h16b_2 = int_mb(k_alpha+h16b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      h16b_2 = h16b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p13b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1) * int_mb(k_range+h16b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_23_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_23_2',1,MA_ERR)
      IF ((p3b .le. p13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (p14b_1 - noab - 
     &1 + nvab * (p13b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p14 - 1) + int_mb(k_r
     &ange+p14b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p3 - 1)))))
     &)
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p14 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p13b .lt. p3b) .and. (p3b .le. p14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (p14b_1 - noab - 
     &1 + nvab * (p3b_1 - noab - 1 + nvab * (p13b_1 - noab - 1)))))))
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p14 - 1) + int_mb(k_r
     &ange+p14b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p13 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p14 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p14b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (p3b_1 - noab - 1
     & + nvab * (p14b_1 - noab - 1 + nvab * (p13b_1 - noab - 1)))))))
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p13 - 1))))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p14 - 1)
     &)))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_23_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_23_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_23_2',4,MA_ERR)
      IF ((h16b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h16b_2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h
     &8b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h16 - 1) + int_mb(k_range+h
     &16b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h8 - 1) + int_mb(k_
     &range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h16 - 1)))
     &)))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_23_2',5,M
     &A_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,6.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(nsubh(3)),dbl_mb(k_a_sort)
     &,dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dim
     &a_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_23_2',7,MA_ERR)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p13 + int_mb(k_range+p13b-1) * ((p14 - 1) + int_mb(k_
     &range+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h16 - 1))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p13 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (p1b - noab - 1 + nvab * (p14b - noab - 1 +
     & nvab * (p13b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_23_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
