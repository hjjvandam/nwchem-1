      SUBROUTINE ccsdtq_lambda2_13_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda2_13_1.F,v 1.1 2003-09-16 21:52:11 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p16 p17 h14 h15 )_v + = 1 * v ( p16 p17 h14 h15 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p16b
      INTEGER p17b
      INTEGER h14b
      INTEGER h15b
      INTEGER p16b_1
      INTEGER p17b_1
      INTEGER h14b_1
      INTEGER h15b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p16
      INTEGER p17
      INTEGER h14
      INTEGER h15
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p16b = noab+1,noab+nvab
      DO p17b = p16b,noab+nvab
      DO h14b = 1,noab
      DO h15b = h14b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p16b-1)+int_mb(k_spin+p17b
     &-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h15b-1).ne.8)) THEN
      IF (int_mb(k_spin+p16b-1)+int_mb(k_spin+p17b-1) .eq. int_mb(k_spin
     &+h14b-1)+int_mb(k_spin+h15b-1)) THEN
      IF (ieor(int_mb(k_sym+p16b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_m
     &b(k_sym+h14b-1),int_mb(k_sym+h15b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p16b-1)+int_mb(k_spin+p17b-1)+
     &int_mb(k_spin+h14b-1)+int_mb(k_spin+h15b-1).eq.8)) THEN
      p16b_1 = int_mb(k_alpha+p16b-1)
      p17b_1 = int_mb(k_alpha+p17b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      h15b_1 = int_mb(k_alpha+h15b-1)
      ELSE
      p16b_1 = p16b
      p17b_1 = p17b
      h14b_1 = h14b
      h15b_1 = h15b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p16b-1) * int_mb(k_range+p17b-1) * int_
     &mb(k_range+h14b-1) * int_mb(k_range+h15b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda2_13_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda2_13_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h15b_1 - 1
     & + (noab+nvab) * (h14b_1 - 1 + (noab+nvab) * (p17b_1 - 1 + (noab+n
     &vab) * (p16b_1 - 1)))))
      DO p16 = 1,int_mb(k_range+p16b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h15 = 1,int_mb(k_range+h15b-1)
      idima = h15 + int_mb(k_range+h15b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((p16 - 1))))
      idima_sort = p16 + int_mb(k_range+p16b-1) * ((p17 - 1) + int_mb(k_
     &range+p17b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h15 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda2_13_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda2_13_1',3)
      DO p16 = 1,int_mb(k_range+p16b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h15 = 1,int_mb(k_range+h15b-1)
      idima_sort = p16 + int_mb(k_range+p16b-1) * ((p17 - 1) + int_mb(k_
     &range+p17b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h15 - 1)))
     &)
      idimc = h15 + int_mb(k_range+h15b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((p16 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h15b 
     &- 1 + noab * (h14b - 1 + noab * (p17b - noab - 1 + nvab * (p16b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda2_13_1',4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda2_13_1
     &',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
