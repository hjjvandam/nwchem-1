      SUBROUTINE ccsdtq_lambda3_27(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda3_27.F,v 1.2 2003-10-19 00:54:27 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h4 h5 h6 p1 p2 p3 )_yttv + = 1/2 * P( 3 ) * Sum ( p13 h10 h12 ) * i1 ( h4 h5 h6 p13 h10 h12 p1 p2 )_ytt * v ( h10 h12 p3 p13 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p13b
      INTEGER h10b
      INTEGER h12b
      INTEGER h4b_1
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p13b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h10b_1
      INTEGER h12b_1
      INTEGER h10b_2
      INTEGER h12b_2
      INTEGER p3b_2
      INTEGER p13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h4
      INTEGER h5
      INTEGER h6
      INTEGER p13
      INTEGER p1
      INTEGER p2
      INTEGER h10
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+i
     &nt_mb(k_spin+p3b-1).ne.12)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h6b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,ieor(irrep_t,ieor(irrep_t,
     &irrep_v)))) THEN
      DO p13b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h12b = h10b,noab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)
     &+int_mb(k_spin+p13b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h6b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+h12b
     &-1)))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) THEN
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+h6b-1)+int_mb(k_spin+p13b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1).eq.16
     &)) THEN
      h4b_1 = int_mb(k_alpha+h4b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      p13b_1 = int_mb(k_alpha+p13b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      h4b_1 = h4b
      h5b_1 = h5b
      h6b_1 = h6b
      p13b_1 = p13b
      p1b_1 = p1b
      p2b_1 = p2b
      h10b_1 = h10b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p13b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p13b_2 = int_mb(k_alpha+p13b-1)
      ELSE
      h10b_2 = h10b
      h12b_2 = h12b
      p3b_2 = p3b
      p13b_2 = p13b
      END IF
      dim_common = int_mb(k_range+p13b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+h4b-1) * int_mb(k_range+h5b-1) * int_mb
     &(k_range+h6b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_27',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda3_27',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 -
     & noab - 1 + nvab * (p13b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab *
     & (h5b_1 - 1 + noab * (h4b_1 - 1)))))))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h6 - 1) +
     & int_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 
     &- 1))))))))
      idima_sort = p13 + int_mb(k_range+p13b-1) * ((h10 - 1) + int_mb(k_
     &range+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h4 - 1) + 
     &int_mb(k_range+h4b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 -
     & 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * 
     &((p2 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda3_27',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_27',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda3_27',4,MA_ERR)
      IF ((p13b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p13b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p13 - 1) + int_mb(k_range+p
     &13b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p13 + int_mb(k_range+p13b-1) * ((h10 - 1) + int_mb(k_
     &range+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p13b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p13b_2 - 1
     & + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idimb = p13 + int_mb(k_range+p13b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p13 + int_mb(k_range+p13b-1) * ((h10 - 1) + int_mb(k_
     &range+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda3_27',5,MA_
     &ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h10b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_27',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda3_27',7,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
     &))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      END IF
      IF ((p3b .le. p1b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda3_27',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_27',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda3_27',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda3_27',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
