      SUBROUTINE ccsdtq_lambda1_20_2_6_1_1(d_a,k_a_offset,d_c,k_c_offset
     &)
C     $Id: ccsdtq_lambda1_20_2_6_1_1.F,v 1.2 2003-10-19 00:54:05 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i4 ( h10 h12 p4 p8 )_v + = 1 * v ( h10 h12 p4 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h12b
      INTEGER p4b
      INTEGER p8b
      INTEGER h10b_1
      INTEGER h12b_1
      INTEGER p4b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h10
      INTEGER h12
      INTEGER p4
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h12b = h10b,noab
      DO p4b = noab+1,noab+nvab
      DO p8b = p4b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+p4b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+p4b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_1 = int_mb(k_alpha+h10b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_1 = h10b
      h12b_1 = h12b
      p4b_1 = p4b
      p8b_1 = p8b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+p4b-1) * int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_2_6_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_2_6_1_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - 1 
     &+ (noab+nvab) * (p4b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h10b_1 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_2_6_1_
     &1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda1_20_2_6_1_1',3,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p8b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (h12b - 1 + noab * (h1
     &0b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_2_6_1_
     &1',4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_2
     &_6_1_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
