      SUBROUTINE ccsdtq_lambda1_23_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda1_23_3.F,v 1.1 2003-09-16 21:51:54 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p13 p14 h16 p1 )_yttt + = -3 * Sum ( h4 ) * t ( p13 h4 )_t * i2 ( h4 p14 h16 p1 )_ytt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p13b
      INTEGER p14b
      INTEGER p1b
      INTEGER h16b
      INTEGER h4b
      INTEGER p13b_1
      INTEGER h4b_1
      INTEGER p14b_2
      INTEGER h4b_2
      INTEGER p1b_2
      INTEGER h16b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p13
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p14
      INTEGER p1
      INTEGER h16
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p13b = noab+1,noab+nvab
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h16b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p13b-1)+int_mb(k_spin+p14b
     &-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h16b-1).ne.8)) THEN
      IF (int_mb(k_spin+p13b-1)+int_mb(k_spin+p14b-1) .eq. int_mb(k_spin
     &+p1b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+p14b-1),ieor(int_m
     &b(k_sym+p1b-1),int_mb(k_sym+h16b-1)))) .eq. ieor(irrep_y,ieor(irre
     &p_t,ieor(irrep_t,irrep_t)))) THEN
      DO h4b = 1,noab
      IF (int_mb(k_spin+p13b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p13b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p13b-1)+int_mb(k_spin+h4b-1).e
     &q.4)) THEN
      p13b_1 = int_mb(k_alpha+p13b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p13b_1 = p13b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+h4b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+h16b-1).eq.8)) THEN
      p14b_2 = int_mb(k_alpha+p14b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h16b_2 = int_mb(k_alpha+h16b-1)
      ELSE
      p14b_2 = p14b
      h4b_2 = h4b
      p1b_2 = p1b
      h16b_2 = h16b
      END IF
      dim_common = int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+h16b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_23_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_23_3',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p13b_1 - noab - 1)))
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p13 - 1))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_23_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_23_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_23_3',4)
      IF ((h4b .le. p14b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h16b_2 - 1
     & + noab * (p1b_2 - noab - 1 + nvab * (p14b_2 - noab - 1 + nvab * (
     &h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimb = h16 + int_mb(k_range+h16b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h4 - 1))))
      idimb_sort = h4 + int_mb(k_range+h4b-1) * ((p14 - 1) + int_mb(k_ra
     &nge+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h16 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_23_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_23_3',7)
      IF ((p13b .le. p14b)) THEN
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p13 + int_mb(k_range+p13b-1) * ((p14 - 1) + int_mb(k_
     &range+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h16 - 1))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p13 - 1))))
      dbl_mb(k_c + idimc - 1) = -3.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (p1b - noab - 1 + nvab * (p14b - noab - 1 +
     & nvab * (p13b - noab - 1)))))
      END IF
      IF ((p14b .le. p13b)) THEN
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p13 + int_mb(k_range+p13b-1) * ((p14 - 1) + int_mb(k_
     &range+p14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h16 - 1))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p14 - 1))))
      dbl_mb(k_c + idimc - 1) = 3.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (p1b - noab - 1 + nvab * (p13b - noab - 1 +
     & nvab * (p14b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_23_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_3
     &',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_3
     &',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_23_3
     &',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
