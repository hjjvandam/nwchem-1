      SUBROUTINE ccsdtq_lambda3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda3_3.F,v 1.1 2003-09-16 21:52:43 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h4 h5 h6 p1 p2 p3 )_yv + = -1 * P( 9 ) * Sum ( h9 ) * y ( h4 h9 p1 p2 )_y * i1 ( h5 h6 h9 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER h4b_1
      INTEGER h9b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p3b_2
      INTEGER h9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h9
      INTEGER h4
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+i
     &nt_mb(k_spin+p3b-1).ne.12)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h6b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_v)) THEN
      DO h9b = 1,noab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h4b_1 = int_mb(k_alpha+h4b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      ELSE
      h4b_1 = h4b
      h9b_1 = h9b
      p1b_1 = p1b
      p2b_1 = p2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      p3b_2 = p3b
      h9b_2 = h9b
      END IF
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_3',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda3_3',1)
      IF ((h9b .lt. h4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h4b_1 - 1 + noab * (h9
     &b_1 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h9 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h9b_1 - 1 + noab * (h4
     &b_1 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h4 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda3_3',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_3',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda3_3',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h9b_2 - 1 
     &+ noab * (p3b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1
     &)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimb = h9 + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda3_3',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_3',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda3_3',7)
      IF ((h4b .le. h5b) .and. (p2b .le. p3b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      END IF
      IF ((h4b .le. h5b) .and. (p3b .le. p1b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      END IF
      IF ((h4b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b)) THEN
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      END IF
      IF ((h5b .le. h4b) .and. (h4b .le. h6b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h4b - 1 + noab * (h5b - 1)))))))
      END IF
      IF ((h5b .le. h4b) .and. (h4b .le. h6b) .and. (p3b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h4b - 1 + noab * (h5b - 1)))))))
      END IF
      IF ((h5b .le. h4b) .and. (h4b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h6b - 1 + noab * (h4b - 1 + noab * (h5b - 1)))))))
      END IF
      IF ((h6b .le. h4b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h4 - 1) + int_mb(k_ra
     &nge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h4b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      END IF
      IF ((h6b .le. h4b) .and. (p3b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h4 - 1) + int_mb(k_ra
     &nge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (h4b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      END IF
      IF ((h6b .le. h4b) .and. (p1b .le. p3b) .and. (p3b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h4 + int_mb(k_range+h4b-1) * ((p1 - 1) + int_mb(k_ran
     &ge+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h4 - 1) + int_mb(k_ra
     &nge+h4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (h4b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda3_3',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_3',9
     &)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda3_3',1
     &0)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda3_3',1
     &1)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
