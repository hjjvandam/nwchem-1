      SUBROUTINE ccsdtq_lambda3_23_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda3_23_1.F,v 1.1 2003-09-16 21:52:40 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 p7 p8 h10 h11 p1 )_vt + = 1 * Sum ( h12 p9 ) * t ( p7 p8 p9 h10 h11 h12 )_t * v ( h4 h12 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER p7b
      INTEGER p8b
      INTEGER p1b
      INTEGER h10b
      INTEGER h11b
      INTEGER p9b
      INTEGER h12b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h4b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p7
      INTEGER p8
      INTEGER h12
      INTEGER h10
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h11b = h10b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p7b-1
     &)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h11b-1).ne.12)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p8b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+h10b-1),in
     &t_mb(k_sym+h11b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)
     & .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1
     &2b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+p9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),i
     &nt_mb(k_sym+h12b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+int
     &_mb(k_spin+h12b-1).eq.12)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      p9b_1 = p9b
      h10b_1 = h10b
      h11b_1 = h11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h4b_2 = h4b
      h12b_2 = h12b
      p1b_2 = p1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_mb
     &(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_23_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda3_23_1',1)
      IF ((p9b .lt. p7b) .and. (h12b .lt. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h12b_1 - 1 + noab * (p8b_1 - noab 
     &- 1 + nvab * (p7b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1) + int_m
     &b(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p9 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p7b) .and. (h10b .le. h12b) .and. (h12b .lt. h11b)) 
     &THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (h10b_1 - 1 + noab * (p8b_1 - noab 
     &- 1 + nvab * (p7b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p8 - 1) + int_m
     &b(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p9 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p7b) .and. (h11b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (p8b_1 - noab 
     &- 1 + nvab * (p7b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p8 - 1) + int_m
     &b(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p9 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p9b) .and. (p9b .lt. p8b) .and. (h12b .lt. h10b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h12b_1 - 1 + noab * (p8b_1 - noab 
     &- 1 + nvab * (p9b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1) + int_m
     &b(k_range+p8b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p7 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p9b) .and. (p9b .lt. p8b) .and. (h10b .le. h12b) .an
     &d. (h12b .lt. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (h10b_1 - 1 + noab * (p8b_1 - noab 
     &- 1 + nvab * (p9b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p8 - 1) + int_m
     &b(k_range+p8b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p7 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p9b) .and. (p9b .lt. p8b) .and. (h11b .le. h12b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (p8b_1 - noab 
     &- 1 + nvab * (p9b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p8 - 1) + int_m
     &b(k_range+p8b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p7 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .le. p9b) .and. (h12b .lt. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h10b_1 - 1 + noab * (h12b_1 - 1 + noab * (p9b_1 - noab 
     &- 1 + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p9 - 1) + int_m
     &b(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .le. p9b) .and. (h10b .le. h12b) .and. (h12b .lt. h11b)) 
     &THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (h10b_1 - 1 + noab * (p9b_1 - noab 
     &- 1 + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p9 - 1) + int_m
     &b(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .le. p9b) .and. (h11b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (h10b_1 - 1 + noab * (p9b_1 - noab 
     &- 1 + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p9 - 1) + int_m
     &b(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1)))
     &)))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1) + int_
     &mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda3_23_1',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_23_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda3_23_1',4)
      IF ((h12b .lt. h4b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h4b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h12b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h4 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h12b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h4 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda3_23_1',5)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_23_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda3_23_1',7)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1) + int
     &_mb(k_range+h11b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 - 1
     &))))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p8 - 1) + int_mb(
     &k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h4 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (h10b - 1 + noab * (p1b - noab - 1 + nvab *
     & (p8b - noab - 1 + nvab * (p7b - noab - 1 + nvab * (h4b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda3_23_1',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_23_1
     &',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda3_23_1
     &',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda3_23_1
     &',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
