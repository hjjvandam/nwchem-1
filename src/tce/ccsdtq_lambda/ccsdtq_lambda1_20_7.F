      SUBROUTINE ccsdtq_lambda1_20_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda1_20_7.F,v 1.2 2003-10-19 00:54:06 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p15 p17 p18 h13 h14 h16 )_vt + = -1/6 * Sum ( p4 p5 ) * t ( p4 p5 p17 h13 h14 h16 )_t * v ( p15 p18 p4 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p17b
      INTEGER p15b
      INTEGER p18b
      INTEGER h13b
      INTEGER h14b
      INTEGER h16b
      INTEGER p4b
      INTEGER p5b
      INTEGER p17b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER h16b_1
      INTEGER p15b_2
      INTEGER p18b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER p17
      INTEGER h13
      INTEGER h14
      INTEGER h16
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p15
      INTEGER p18
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p17b = noab+1,noab+nvab
      DO p15b = noab+1,noab+nvab
      DO p18b = p15b,noab+nvab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      DO h16b = h14b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b
     &-1)+int_mb(k_spin+p18b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h16b-1).ne.12)) THEN
      IF (int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b-1)+int_mb(k_spin+p18b
     &-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin
     &+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p15b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_m
     &b(k_sym+p18b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1
     &),int_mb(k_sym+h16b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      IF (int_mb(k_spin+p17b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h
     &16b-1)) THEN
      IF (ieor(int_mb(k_sym+p17b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1),
     &int_mb(k_sym+h16b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p17b-1)+int_mb(k_spin+p4b-1)+i
     &nt_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+in
     &t_mb(k_spin+h16b-1).eq.12)) THEN
      p17b_1 = int_mb(k_alpha+p17b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      h16b_1 = int_mb(k_alpha+h16b-1)
      ELSE
      p17b_1 = p17b
      p4b_1 = p4b
      p5b_1 = p5b
      h13b_1 = h13b
      h14b_1 = h14b
      h16b_1 = h16b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p15b-1)+int_mb(k_spin+p18b-1)+
     &int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      p15b_2 = int_mb(k_alpha+p15b-1)
      p18b_2 = int_mb(k_alpha+p18b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      p15b_2 = p15b
      p18b_2 = p18b
      p4b_2 = p4b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+p17b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h14b-1) * int_mb(k_range+h16b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p15b-1) * int_mb(k_range+p18b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_7',1,MA_ERR)
      IF ((p5b .le. p17b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p17b_1 - noab
     & - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p17 - 1) + int_
     &mb(k_range+p17b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1)
     &)))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((h13 - 1) + int
     &_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 
     &- 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p17b) .and. (p17b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p5b_1 - noab 
     &- 1 + nvab * (p17b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((p4 - 1)
     &)))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((h13 - 1) + int
     &_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 
     &- 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p17b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p5b_1 - noab 
     &- 1 + nvab * (p4b_1 - noab - 1 + nvab * (p17b_1 - noab - 1)))))))
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p5 - 1) + int_m
     &b(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p17 - 1))
     &))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((h13 - 1) + int
     &_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 
     &- 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_7',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_7',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (p18b_2 - 1 + (noab+nva
     &b) * (p15b_2 - 1)))))
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p18 = 1,int_mb(k_range+p18b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p18 - 1) + int_mb(k_range+p18b-1) * ((p15 - 1))))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((p18 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_20_7',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_20_7',7,MA_ERR)
      IF ((p15b .le. p17b) .and. (p17b .le. p18b)) THEN
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO p18 = 1,int_mb(k_range+p18b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p17 + int_mb(k_range+p17b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 1) +
     & int_mb(k_range+h16b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((
     &p18 - 1))))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p18 - 1) + int_
     &mb(k_range+p18b-1) * ((p17 - 1) + int_mb(k_range+p17b-1) * ((p15 -
     & 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/18.0d0 * dbl_mb(k_c_sort + idimc_
     &sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p18b
     & - noab - 1 + nvab * (p17b - noab - 1 + nvab * (p15b - noab - 1)))
     &))))
      END IF
      IF ((p17b .le. p15b)) THEN
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p18 = 1,int_mb(k_range+p18b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p17 + int_mb(k_range+p17b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 1) +
     & int_mb(k_range+h16b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((
     &p18 - 1))))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p18 - 1) + int_
     &mb(k_range+p18b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((p17 -
     & 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/18.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p18b
     & - noab - 1 + nvab * (p15b - noab - 1 + nvab * (p17b - noab - 1)))
     &))))
      END IF
      IF ((p18b .le. p17b)) THEN
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p18 = 1,int_mb(k_range+p18b-1)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p17 + int_mb(k_range+p17b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 1) +
     & int_mb(k_range+h16b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((
     &p18 - 1))))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p17 - 1) + int_
     &mb(k_range+p17b-1) * ((p18 - 1) + int_mb(k_range+p18b-1) * ((p15 -
     & 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/18.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p17b
     & - noab - 1 + nvab * (p18b - noab - 1 + nvab * (p15b - noab - 1)))
     &))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_7',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_7
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_7
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_7
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
