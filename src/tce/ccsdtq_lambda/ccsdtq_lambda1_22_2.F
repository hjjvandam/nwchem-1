      SUBROUTINE ccsdtq_lambda1_22_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda1_22_2.F,v 1.1 2003-09-16 21:51:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p11 h15 p1 )_ytt + = 5/18 * Sum ( h5 h6 p3 ) * t ( p3 p11 h5 h6 )_t * i2 ( h5 h6 h14 h15 p1 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p11b
      INTEGER h14b
      INTEGER p1b
      INTEGER h15b
      INTEGER p3b
      INTEGER h5b
      INTEGER h6b
      INTEGER p11b_1
      INTEGER p3b_1
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h14b_2
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER h15b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p11
      INTEGER h5
      INTEGER h6
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h14
      INTEGER p1
      INTEGER h15
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p11b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h15b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p11b
     &-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h15b-1).ne.8)) THEN
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin
     &+p1b-1)+int_mb(k_spin+h15b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_m
     &b(k_sym+p1b-1),int_mb(k_sym+h15b-1)))) .eq. ieor(irrep_y,ieor(irre
     &p_t,irrep_t))) THEN
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h6b = h5b,noab
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h5b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h5b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1).eq.8)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p11b_1 = p11b
      p3b_1 = p3b
      h5b_1 = h5b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h14b-1)+int_mb(k_spin+h5b-1)+i
     &nt_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h15b-1)+int
     &_mb(k_spin+p3b-1).eq.12)) THEN
      h14b_2 = int_mb(k_alpha+h14b-1)
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h15b_2 = int_mb(k_alpha+h15b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h14b_2 = h14b
      h5b_2 = h5b
      h6b_2 = h6b
      p1b_2 = p1b
      h15b_2 = h15b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_m
     &b(k_range+h6b-1)
      dima_sort = int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+h15b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_22_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_22_2',1)
      IF ((p3b .le. p11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p3b_1 - 
     &noab - 1)))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p3 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p11 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h5b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p11b_1 - 
     &noab - 1)))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p11 - 1))))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p11 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_22_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_22_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_22_2',4)
      IF ((h6b .le. h14b) .and. (h15b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h15b_2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h
     &14b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h15 = 1,int_mb(k_range+h15b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h15 - 1) + int_mb(k_range+h
     &15b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1) + int_mb(k
     &_range+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))))
     &)
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1) + int_m
     &b(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h15 - 1)
     &)))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (h15b .le. p3b)) T
     &HEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h15b_2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h
     &6b_2 - 1 + noab * (h14b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h15 = 1,int_mb(k_range+h15b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h15 - 1) + int_mb(k_range+h
     &15b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h5 - 1)))))
     &)
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1) + int_m
     &b(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h15 - 1)
     &)))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h14b .lt. h5b) .and. (h15b .le. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h15b_2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h
     &6b_2 - 1 + noab * (h5b_2 - 1 + noab * (h14b_2 - 1)))))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h15 = 1,int_mb(k_range+h15b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h15 - 1) + int_mb(k_range+h
     &15b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h14 - 1))))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1) + int_m
     &b(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h15 - 1)
     &)))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_22_2',5)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h5b .eq. h6b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_22_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_22_2',7)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h15 = 1,int_mb(k_range+h15b-1)
      idimc_sort = p11 + int_mb(k_range+p11b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h15 - 1))))
      idimc = h15 + int_mb(k_range+h15b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h14 - 1))))
      dbl_mb(k_c + idimc - 1) = 5.0d0/18.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h15b - 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 +
     & nvab * (h14b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_22_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_22_2
     &',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_22_2
     &',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_22_2
     &',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
