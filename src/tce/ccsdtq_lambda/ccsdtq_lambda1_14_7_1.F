      SUBROUTINE ccsdtq_lambda1_14_7_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_lambda1_14_7_1.F,v 1.1 2003-09-16 21:51:35 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 h6 h7 h16 p3 p4 )_yt + = 1 * Sum ( p9 ) * t ( p9 h16 )_t * y ( h2 h6 h7 p3 p4 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h6b
      INTEGER h7b
      INTEGER h16b
      INTEGER p3b
      INTEGER p4b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h16b_1
      INTEGER h2b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h16
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h6
      INTEGER h7
      INTEGER h2
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      DO h16b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h16b-1)+int_mb(k_spin+p3b-1)+
     &int_mb(k_spin+p4b-1).ne.12)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h16b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h16b-1),ieor(int_mb(k_sym+p3b-1),in
     &t_mb(k_sym+p4b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h16b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h16b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h16b_1 = int_mb(k_alpha+h16b-1)
      ELSE
      p9b_1 = p9b
      h16b_1 = h16b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_m
     &b(k_spin+p9b-1).eq.12)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h2b_2 = h2b
      h6b_2 = h6b
      h7b_2 = h7b
      p3b_2 = p3b
      p4b_2 = p4b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h16b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14_7_1',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_14_7_1',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h16 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_14_7_1',2
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14_7_1',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_14_7_1',4)
      IF ((h7b .lt. h2b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ra
     &nge+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p3b .le. p9b) .and. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h2 - 1) + int_mb(k_ra
     &nge+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h2b) .and. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h2 - 1) + int_mb(k_ra
     &nge+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (p3b .le. p9b) .and.
     & (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .lt. h2b) .and. (h2b .le. h7b) .and. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h2b_2 - 1 + noab * (h6b_2 - 1)))))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (p3b .le. p9b) .and. (p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b) .and. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p4b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h2b_2 - 1)))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_14_7_1',5
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_7_1',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_14_7_1',7)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h16 + int_mb(k_range+h16b-1) * ((h2 - 1) + int_mb(k_r
     &ange+h2b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))
     &))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (h16b - 1 + 
     &noab * (h7b - 1 + noab * (h6b - 1 + noab * (h2b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_14_7_1',8
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_7
     &_1',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_7
     &_1',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_7
     &_1',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
