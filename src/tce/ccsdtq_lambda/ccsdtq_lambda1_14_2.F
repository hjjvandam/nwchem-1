      SUBROUTINE ccsdtq_lambda1_14_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda1_14_2.F,v 1.1 2003-09-16 21:51:33 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 p13 h14 h16 )_yt + = -1/2 * Sum ( h6 p4 p3 ) * t ( p3 p4 p13 h6 h14 h16 )_t * y ( h2 h6 p3 p4 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p13b
      INTEGER h14b
      INTEGER h16b
      INTEGER p3b
      INTEGER p4b
      INTEGER h6b
      INTEGER p13b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h14b_1
      INTEGER h16b_1
      INTEGER h6b_1
      INTEGER h2b_2
      INTEGER h6b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p3
      INTEGER p4
      INTEGER p13
      INTEGER h6
      INTEGER h14
      INTEGER h16
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO p13b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h16b = h14b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p13b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h16b-1).ne.8)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+p13b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+h16b-1)))) .eq. ieor(irrep_y,irrep_t))
     & THEN
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p13b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &) .eq. int_mb(k_spin+h14b-1)+int_mb(k_spin+h16b-1)+int_mb(k_spin+h
     &6b-1)) THEN
      IF (ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+h16b-1),
     &int_mb(k_sym+h6b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p13b-1)+int_mb(k_spin+p3b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h16b-1)+in
     &t_mb(k_spin+h6b-1).eq.12)) THEN
      p13b_1 = int_mb(k_alpha+p13b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      h16b_1 = int_mb(k_alpha+h16b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      ELSE
      p13b_1 = p13b
      p3b_1 = p3b
      p4b_1 = p4b
      h14b_1 = h14b
      h16b_1 = h16b
      h6b_1 = h6b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h2b_2 = int_mb(k_alpha+h2b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h2b_2 = h2b
      h6b_2 = h6b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h6b-1)
      dima_sort = int_mb(k_range+p13b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h16b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_14_2',1)
      IF ((p4b .le. p13b) .and. (h6b .le. h14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h6b_1 - 1 + noab * (p13b_1 - noab 
     &- 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_mb
     &(k_range+p13b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p13b) .and. (h14b .lt. h6b) .and. (h6b .le. h16b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h6b_1 - 1 + noab * (h14b_1 - 1 + noab * (p13b_1 - noab 
     &- 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h6 - 1) + int_mb(k_range+
     &h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p13 - 1) + int_mb
     &(k_range+p13b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p13b) .and. (h16b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h16b_1 - 1 + noab * (h14b_1 - 1 + noab * (p13b_1 - noab 
     &- 1 + nvab * (p4b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h16 - 1) + int_mb(k_range+h
     &16b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p13 - 1) + int_mb
     &(k_range+p13b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1)))
     &)))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p13b) .and. (p13b .lt. p4b) .and. (h6b .le. h14b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h6b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p13b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p3 - 1)))
     &)))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p13b) .and. (p13b .lt. p4b) .and. (h14b .lt. h6b) .a
     &nd. (h6b .le. h16b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h6b_1 - 1 + noab * (h14b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p13b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h6 - 1) + int_mb(k_range+
     &h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p3 - 1)))
     &)))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p13b) .and. (p13b .lt. p4b) .and. (h16b .lt. h6b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h16b_1 - 1 + noab * (h14b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p13b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h16 - 1) + int_mb(k_range+h
     &16b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p3 - 1)))
     &)))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p13b .lt. p3b) .and. (h6b .le. h14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h6b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p3b_1 - noab - 1 + nvab * (p13b_1 - noab - 1)))))))
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p13 - 1))))
     &))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p13b .lt. p3b) .and. (h14b .lt. h6b) .and. (h6b .le. h16b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h6b_1 - 1 + noab * (h14b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p3b_1 - noab - 1 + nvab * (p13b_1 - noab - 1)))))))
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h6 - 1) + int_mb(k_range+
     &h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p13 - 1))))
     &))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p13b .lt. p3b) .and. (h16b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h6b_1 - 1 
     &+ noab * (h16b_1 - 1 + noab * (h14b_1 - 1 + noab * (p4b_1 - noab -
     & 1 + nvab * (p3b_1 - noab - 1 + nvab * (p13b_1 - noab - 1)))))))
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      idima = h6 + int_mb(k_range+h6b-1) * ((h16 - 1) + int_mb(k_range+h
     &16b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p4 - 1) + int_mb(
     &k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p13 - 1))))
     &))
      idima_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p13 - 1) + int_m
     &b(k_range+p13b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h16 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_14_2',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_14_2',4)
      IF ((h6b .lt. h2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h6
     &b_2 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h6 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h6b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h2
     &b_2 - 1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))
      idimb_sort = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_14_2',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_14_2',7)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = p13 + int_mb(k_range+p13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h16 - 1) + int_mb(k_range+h16b-1) * ((h2 - 1))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h2 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (h14b - 1 + noab * (p13b - noab - 1 + nvab 
     &* (h2b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_14_2',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_2
     &',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_2
     &',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_2
     &',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
