      SUBROUTINE ccsdtq_lambda3_11_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda3_11_6.F,v 1.1 2003-09-16 21:52:35 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 p15 h13 h16 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h13 h16 )_t * v ( h4 p15 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h4b
      INTEGER p15b
      INTEGER h13b
      INTEGER h16b
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h13b_1
      INTEGER h16b_1
      INTEGER h4b_2
      INTEGER p15b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER h13
      INTEGER h16
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h4
      INTEGER p15
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h4b = 1,noab
      DO p15b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h16b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p15b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h16b-1).ne.8)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+p15b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+p15b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h16b-1)))) .eq. ieor(irrep_v,irrep_t))
     & THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h16b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h16b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h16b_1 = int_mb(k_alpha+h16b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      h13b_1 = h13b
      h16b_1 = h16b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p15b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p15b_2 = int_mb(k_alpha+p15b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h4b_2 = h4b
      p15b_2 = p15b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h13b-1) * int_mb(k_range+h16b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p15b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_11_6',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda3_11_6',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h16b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 -
     & noab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idima = h16 + int_mb(k_range+h16b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h16 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda3_11_6',2)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda3_11_6',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda3_11_6',4)
      IF ((h4b .le. p15b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p15b_2 - 1 + (noab+nva
     &b) * (h4b_2 - 1)))))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((h4 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p15 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda3_11_6',5)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_11_6',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda3_11_6',7)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h16 = 1,int_mb(k_range+h16b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h16 - 1) + int_mb(k_
     &range+h16b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p15 - 1))))
      idimc = h16 + int_mb(k_range+h16b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((h4 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h16b - 1 + noab * (h13b - 1 + noab * (p15b - noab - 1 + nvab 
     &* (h4b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda3_11_6',8)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda3_11_6
     &',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda3_11_6
     &',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda3_11_6
     &',11)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
