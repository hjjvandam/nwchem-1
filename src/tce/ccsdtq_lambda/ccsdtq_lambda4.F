      SUBROUTINE ccsdtq_lambda4(d_f1,d_i0,d_t1,d_t2,d_v2,d_y2,d_y3,d_y4,
     &k_f1_offset,k_i0_offset,k_t1_offset,k_t2_offset,k_v2_offset,k_y2_o
     &ffset,k_y3_offset,k_y4_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1 * P( 36 ) * y ( h5 h6 p1 p2 )_y * v ( h7 h8 p3 p4 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 16 ) * y ( h5 h6 h7 p1 p2 p3 )_y * i1 ( h8 p4 )_f
C         i1 ( h5 p1 )_f + = 1 * f ( h5 p1 )_f
C         i1 ( h5 p1 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 p1 p9 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( h11 ) * y ( h5 h6 h11 p1 p2 p3 )_y * i1 ( h7 h8 h11 p4 )_v
C         i1 ( h5 h6 h11 p1 )_v + = 1 * v ( h5 h6 h11 p1 )_v
C         i1 ( h5 h6 h11 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h11 )_t * v ( h5 h6 p1 p9 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( p9 ) * y ( h5 h6 h7 p1 p2 p9 )_y * v ( h8 p9 p3 p4 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = -1 * P( 4 ) * Sum ( h13 ) * y ( h5 h6 h7 h13 p1 p2 p3 p4 )_y * i1 ( h8 h13 )_f
C         i1 ( h5 h13 )_f + = 1 * f ( h5 h13 )_f
C         i1 ( h5 h13 )_ft + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 p9 )_f
C             i2 ( h5 p9 )_f + = 1 * f ( h5 p9 )_f
C             i2 ( h5 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h5 h12 p9 p11 )_v
C         i1 ( h5 h13 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 h13 p9 )_v
C         i1 ( h5 h13 )_vt + = -1/2 * Sum ( h12 p9 p10 ) * t ( p9 p10 h12 h13 )_t * v ( h5 h12 p9 p10 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 4 ) * Sum ( p14 ) * y ( h5 h6 h7 h8 p1 p2 p3 p14 )_y * i1 ( p14 p4 )_f
C         i1 ( p14 p1 )_f + = 1 * f ( p14 p1 )_f
C         i1 ( p14 p1 )_vt + = -1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h10 p14 p1 p9 )_v
C         i1 ( p14 p1 )_vt + = 1/2 * Sum ( h11 h12 p10 ) * t ( p10 p14 h11 h12 )_t * v ( h11 h12 p1 p10 )_v
C         i1 ( p14 p1 )_vtt + = -1 * Sum ( h10 ) * t ( p14 h10 )_t * i2 ( h10 p1 )_vt
C             i2 ( h10 p1 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h10 h12 p1 p11 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( h14 h13 ) * y ( h5 h6 h13 h14 p1 p2 p3 p4 )_y * i1 ( h7 h8 h13 h14 )_v
C         i1 ( h5 h6 h13 h14 )_v + = 1 * v ( h5 h6 h13 h14 )_v
C         i1 ( h5 h6 h13 h14 )_vt + = -2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h14 p9 )_v
C             i2 ( h5 h6 h14 p9 )_v + = 1 * v ( h5 h6 h14 p9 )_v
C             i2 ( h5 h6 h14 p9 )_vt + = -1/2 * Sum ( p11 ) * t ( p11 h14 )_t * v ( h5 h6 p9 p11 )_v
C         i1 ( h5 h6 h13 h14 )_vt + = 1/2 * Sum ( p9 p10 ) * t ( p9 p10 h13 h14 )_t * v ( h5 h6 p9 p10 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 16 ) * Sum ( h14 p11 ) * y ( h5 h6 h7 h14 p1 p2 p3 p11 )_y * i1 ( h8 p11 h14 p4 )_v
C         i1 ( h5 p11 h14 p1 )_v + = 1 * v ( h5 p11 h14 p1 )_v
C         i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 p11 p1 p9 )_v
C         i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( h12 p10 ) * t ( p10 p11 h12 h14 )_t * v ( h5 h12 p1 p10 )_v
C         i1 ( h5 p11 h14 p1 )_vtt + = 1 * Sum ( h12 ) * t ( p11 h12 )_t * i2 ( h5 h12 h14 p1 )_vt
C             i2 ( h5 h12 h14 p1 )_vt + = 1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 h12 p1 p9 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( p10 p9 ) * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y * v ( p9 p10 p3 p4 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 24 ) * Sum ( h13 ) * i1 ( h5 h6 h7 h13 p1 p2 )_yt * v ( h8 h13 p3 p4 )_v
C         i1 ( h5 h6 h7 h13 p1 p2 )_yt + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * y ( h5 h6 h7 p1 p2 p9 )_y
C         i1 ( h5 h6 h7 h13 p1 p2 )_yt + = -1/2 * Sum ( h11 p10 p9 ) * t ( p9 p10 h11 h13 )_t * y ( h5 h6 h7 h11 p1 p2 p9 p10 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytf + = 1 * P( 4 ) * Sum ( h9 ) * i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt * f ( h9 p4 )_f
C         i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt + = -1 * Sum ( p10 ) * t ( p10 h9 )_t * y ( h5 h6 h7 h8 p1 p2 p3 p10 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 16 ) * Sum ( h11 h10 ) * i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt * v ( h8 h10 h11 p4 )_v
C         i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt + = 1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h11 p1 p2 p3 p9 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 6 ) * Sum ( h10 p11 ) * i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt * v ( h10 p11 p3 p4 )_v
C         i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt + = -1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = -1/2 * P( 24 ) * Sum ( p10 ) * i1 ( h5 h6 p10 p1 p2 p3 )_yt * v ( h7 h8 p4 p10 )_v
C         i1 ( h5 h6 p10 p1 p2 p3 )_yt + = 1 * Sum ( h12 h11 p9 ) * t ( p9 p10 h11 h12 )_t * y ( h5 h6 h11 h12 p1 p2 p3 p9 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1/4 * P( 6 ) * Sum ( h13 h12 ) * i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt * v ( h12 h13 p3 p4 )_v
C         i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt + = 1 * Sum ( p10 p9 ) * t ( p9 p10 h12 h13 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y
C         i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_ytt + = 2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt
C             i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt + = -1 * Sum ( p11 ) * t ( p11 h12 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_y2
      INTEGER k_y2_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_y3
      INTEGER k_y3_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_y4
      INTEGER k_y4_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      CHARACTER*255 filename
#if !defined(CCSDTQ)
      CALL ERRQUIT('CCSDTQ not compiled',0,CAPMIS_ERR)
      RETURN
      END
#else
      CALL ccsdtq_lambda4_1(d_y2,k_y2_offset,d_v2,k_v2_offset,d_i0,k_i0_
     &offset)
      CALL OFFSET_ccsdtq_lambda4_2_1(d_i1,l_i1_offset,k_i1_offset,size_i
     &1)
      CALL TCE_FILENAME('ccsdtq_lambda4_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_2_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_2(d_y3,k_y3_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_3_1(d_i1,l_i1_offset,k_i1_offset,size_i
     &1)
      CALL TCE_FILENAME('ccsdtq_lambda4_3_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_3_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_3(d_y3,k_y3_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL ccsdtq_lambda4_4(d_y3,k_y3_offset,d_v2,k_v2_offset,d_i0,k_i0_
     &offset)
      CALL OFFSET_ccsdtq_lambda4_5_1(d_i1,l_i1_offset,k_i1_offset,size_i
     &1)
      CALL TCE_FILENAME('ccsdtq_lambda4_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_5_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsdtq_lambda4_5_2_1(d_i2,l_i2_offset,k_i2_offset,size
     &_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_5_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_5_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ccsdtq_lambda4_5_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_5_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4_5
     &',-1,MA_ERR)
      CALL ccsdtq_lambda4_5_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ccsdtq_lambda4_5_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_5(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_6_1(d_i1,l_i1_offset,k_i1_offset,size_i
     &1)
      CALL TCE_FILENAME('ccsdtq_lambda4_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_6_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_6_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ccsdtq_lambda4_6_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL OFFSET_ccsdtq_lambda4_6_4_1(d_i2,l_i2_offset,k_i2_offset,size
     &_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_6_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_6_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_6_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4_6
     &',-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_6(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_7_1(d_i1,l_i1_offset,k_i1_offset,size_i
     &1)
      CALL TCE_FILENAME('ccsdtq_lambda4_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_7_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsdtq_lambda4_7_2_1(d_i2,l_i2_offset,k_i2_offset,size
     &_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_7_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_7_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL ccsdtq_lambda4_7_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_7_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4_7
     &',-1,MA_ERR)
      CALL ccsdtq_lambda4_7_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_7(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_8_1(d_i1,l_i1_offset,k_i1_offset,size_i
     &1)
      CALL TCE_FILENAME('ccsdtq_lambda4_8_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_8_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_8_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ccsdtq_lambda4_8_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL OFFSET_ccsdtq_lambda4_8_4_1(d_i2,l_i2_offset,k_i2_offset,size
     &_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_8_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_8_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_8_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4_8
     &',-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_8(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL ccsdtq_lambda4_9(d_y4,k_y4_offset,d_v2,k_v2_offset,d_i0,k_i0_
     &offset)
      CALL OFFSET_ccsdtq_lambda4_10_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_10_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_10_1(d_t1,k_t1_offset,d_y3,k_y3_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_lambda4_10_2(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_10(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_11_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_11_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_11_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_11(d_i1,k_i1_offset,d_f1,k_f1_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_12_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_12_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_12_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_12(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_13_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_13_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_13_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_13(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_14_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_14_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_14_1(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_14(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_15_1(d_i1,l_i1_offset,k_i1_offset,size_
     &i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_15_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_15_1(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL OFFSET_ccsdtq_lambda4_15_2_1(d_i2,l_i2_offset,k_i2_offset,siz
     &e_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_15_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_15_2_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i2,
     &k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_15_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_
     &i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4_1
     &5',-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_15(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1 * P( 36 ) * y ( h5 h6 p1 p2 )_y * v ( h7 h8 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).eq.8)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      p1b_1 = p1b
      p2b_1 = p2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h5
     &b_1 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_1',7,MA_ERR)
      IF ((h6b .le. h7b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p2b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p2b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 16 ) * y ( h5 h6 h7 p1 p2 p3 )_y * i1 ( h8 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h8b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_f)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+p3b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_m
     &b(k_spin+p3b-1).eq.12)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p4b-1).eq
     &.4)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h8b_2 = h8b
      p4b_2 = p4b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (h8b_2 - 1)))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h8 - 1))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_2',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_2',7,MA_ERR)
      IF ((h7b .le. h8b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p1 )_f + = 1 * f ( h5 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p1b
      INTEGER h5b_1
      INTEGER p1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1).eq
     &.4)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      h5b_1 = h5b
      p1b_1 = p1b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h5b_1 - 1)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h5 - 1))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_2_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_2_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p1b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_2_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_2_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_lambda4_2_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (h5b - 1)) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p1 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p1b
      INTEGER p9b
      INTEGER h10b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p9b_1 = p9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h10b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h10b_2 = h10b
      p1b_2 = p1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_2_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_2',4,MA_ERR)
      IF ((h10b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h5b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_2_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_2_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_2_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( h11 ) * y ( h5 h6 h11 p1 p2 p3 )_y * i1 ( h7 h8 h11 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h11b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER h5
      INTEGER h6
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      DO h11b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_
     &mb(k_spin+p3b-1).eq.12)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h11b_1 = h11b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p4b_2 = p4b
      h11b_2 = h11b
      END IF
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_3',1,MA_ERR)
      IF ((h11b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (h11b_1 - 1)))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1))))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_
     &mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h6b_1 - 1 + noab * (h11b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1))))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_
     &mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h11b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_
     &mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_3',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h11b_2 - 1
     & + noab * (p4b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimb = h11 + int_mb(k_range+h11b-1) * ((p4 - 1) + int_mb(k_range+
     &p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h7 - 1) + int_mb(k_r
     &ange+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_3',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_3',7,MA_ERR)
      IF ((h6b .le. h7b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_3',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h11 p1 )_v + = 1 * v ( h5 h6 h11 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER h11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p1b_1
      INTEGER h11b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h11
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h11b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      p1b_1 = p1b
      h11b_1 = h11b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_1',1,MA_ERR)
      IF ((h11b .le. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h11b_1 - 1 + (noab+nvab) * (h6b_1 - 1 + (noab+nva
     &b) * (h5b_1 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h11 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_3_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_3_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h11 - 1))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h11b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_3_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_3_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h11 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER h11b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_3_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h11b - 1 + noab * (p1b - noab - 1 + nvab * (h6
     &b - 1 + noab * (h5b - 1)))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h11 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h11 )_t * v ( h5 h6 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER h11b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h11b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h11b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h11b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h11b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h11b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p9b_1 = p9b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      p1b_2 = p1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_3_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_2',4,MA_ERR)
      IF ((p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nvab
     &) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_3_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_3_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idimc_sort = h11 + int_mb(k_range+h11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1))))
      idimc = h11 + int_mb(k_range+h11b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h11b - 1 + noab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * 
     &(h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_3_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( p9 ) * y ( h5 h6 h7 p1 p2 p9 )_y * v ( h8 p9 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER p9b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p9b_1
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p9
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+p9b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_m
     &b(k_spin+p9b-1).eq.12)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      p1b_1 = p1b
      p2b_1 = p2b
      p9b_1 = p9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h8b_2 = h8b
      p9b_2 = p9b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_4',1,MA_ERR)
      IF ((p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p9b_1 - noab - 1 + nva
     &b * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p9b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima = p9 + int_mb(k_range+p9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_4',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_4',4,MA_ERR)
      IF ((h8b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_4',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_4',7,MA_ERR)
      IF ((h7b .le. h8b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p3b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_4',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = -1 * P( 4 ) * Sum ( h13 ) * y ( h5 h6 h7 h13 p1 p2 p3 p4 )_y * i1 ( h8 h13 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h13b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h8b_2
      INTEGER h13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h13
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER p4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_f)) THEN
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1
     &)))))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.16))
     & THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h13b_1 = h13b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      p4b_1 = p4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      ELSE
      h8b_2 = h8b
      h13b_2 = h13b
      END IF
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5',1,MA_ERR)
      IF ((h13b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + no
     &ab * (h5b_1 - 1 + noab * (h13b_1 - 1)))))))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1))
     &))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) 
     &+ int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h13b) .and. (h13b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + no
     &ab * (h13b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h5 - 1)
     &)))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) 
     &+ int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h13b) .and. (h13b .lt. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h13b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h13 - 1) + int_
     &mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) 
     &+ int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h13b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) 
     &+ int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h13b_2 - 1
     & + noab * (h8b_2 - 1)))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimb = h13 + int_mb(k_range+h13b-1) * ((h8 - 1))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((h8 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_5',7,MA_ERR)
      IF ((h7b .le. h8b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_f + = 1 * f ( h5 h13 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h13b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      h5b_1 = h5b
      h13b_1 = h13b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + (noab+nvab) * (h5b_1 - 1)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_5_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h13b 
     &- 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_5_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h13b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_lambda4_5_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + h13b - 1 + noab * (h5b - 1)) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_ft + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_f,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p9b_1 = p9b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1).eq
     &.4)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (h5b_2 - 1)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h5 - 1))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_5_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 p9 )_f + = 1 * f ( h5 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p9b
      INTEGER h5b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER p9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1).eq
     &.4)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_1 = h5b
      p9b_1 = p9b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p9b_1 - 1 
     &+ (noab+nvab) * (h5b_1 - 1)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima = p9 + int_mb(k_range+p9b-1) * ((h5 - 1))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((p9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_5_2_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((p9 - 1))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p9b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_5_2_1(d_a,l_a_offset,k_a_offset,s
     &ize)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER p9b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_lambda4_5_2_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p9b - noab - 1 + nvab * (h5b - 1)) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h5 h12 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p9b
      INTEGER p11b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER p9
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h12b-1).
     &eq.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p11b_1 = p11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p9b-1)+int_mb(k_spin+p11b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h5b_2 = h5b
      h12b_2 = h12b
      p9b_2 = p9b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((p11 - 1))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_2',4,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p11b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h5b) .and. (p9b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b) .and. (p11b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b) .and. (p9b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',5,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_5_2_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((p9 - 1))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p9b - noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',8,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 h13 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER p9b
      INTEGER h10b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h10b_2
      INTEGER h13b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p9b_1 = p9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h10b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h10b_2 = h10b
      h13b_2 = h13b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_3',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_3',4,MA_ERR)
      IF ((h10b .lt. h5b) .and. (h13b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (h13b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h10 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h10b) .and. (h13b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (h13b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nv
     &ab) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_3',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_5_3',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h13 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_3',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_vt + = -1/2 * Sum ( h12 p9 p10 ) * t ( p9 p10 h12 h13 )_t * v ( h5 h12 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER p9b
      INTEGER p10b
      INTEGER h12b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h12
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h13b_1 = h13b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_2 = h5b
      h12b_2 = h12b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_4',1,MA_ERR)
      IF ((h12b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_4',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_4',4,MA_ERR)
      IF ((h12b .lt. h5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_4',5,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_5_4',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h5 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_4',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 4 ) * Sum ( p14 ) * y ( h5 h6 h7 h8 p1 p2 p3 p14 )_y * i1 ( p14 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER p14b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p14b_1
      INTEGER p14b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p14
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_f)) THEN
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p14b-1
     &)))))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p14b-1).eq.16))
     & THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p14b_1 = int_mb(k_alpha+p14b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      p14b_1 = p14b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p4b-1).e
     &q.4)) THEN
      p14b_2 = int_mb(k_alpha+p14b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      p14b_2 = p14b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p14b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6',1,MA_ERR)
      IF ((p14b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (p14b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p14 - 1) + int_mb(k_r
     &ange+p14b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p14 + int_mb(k_range+p14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p14b) .and. (p14b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p14b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p14 + int_mb(k_range+p14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p14b) .and. (p14b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p14 - 1) + int_mb(k_range+p
     &14b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p14 + int_mb(k_range+p14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p14b_1 - n
     &oab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      idima = p14 + int_mb(k_range+p14b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p14 + int_mb(k_range+p14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (p14b_2 - noab - 1)))
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p14 - 1))
      idimb_sort = p14 + int_mb(k_range+p14b-1) * ((p4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_6',7,MA_ERR)
      IF ((p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_f + = 1 * f ( p14 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER p14b_1
      INTEGER p1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p14
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-1).e
     &q.4)) THEN
      p14b_1 = int_mb(k_alpha+p14b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      ELSE
      p14b_1 = p14b
      p1b_1 = p1b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (p14b_1 - 1)))
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p14 - 1))
      idima_sort = p14 + int_mb(k_range+p14b-1) * ((p1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_6_1',3,MA_ERR)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima_sort = p14 + int_mb(k_range+p14b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p14 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p1b -
     & noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_6_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p14b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_lambda4_6_1',0,MA_ERR)
      size = 0
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (p14b - noab - 1)) = s
     &ize
      size = size + int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_vt + = -1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h10 p14 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER p9b
      INTEGER h10b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER p14b_2
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p14
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p9b_1 = p9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p14b_2 = int_mb(k_alpha+p14b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p14b_2 = p14b
      h10b_2 = h10b
      p1b_2 = p1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_2',4,MA_ERR)
      IF ((h10b .le. p14b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h10 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .le. p14b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((h10 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_6_2',7,MA_ERR)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p14 + int_mb(k_range+p14b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p14 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_vt + = 1/2 * Sum ( h11 h12 p10 ) * t ( p10 p14 h11 h12 )_t * v ( h11 h12 p1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER p10b
      INTEGER h11b
      INTEGER h12b
      INTEGER p14b_1
      INTEGER p10b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p14
      INTEGER h11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p10b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p14b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin
     &+h11b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_m
     &b(k_sym+h11b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p10b-1)+
     &int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p14b_1 = int_mb(k_alpha+p14b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p14b_1 = p14b
      p10b_1 = p10b
      h11b_1 = h11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p1b_2 = p1b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_3',1,MA_ERR)
      IF ((p10b .le. p14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (p14b_1 - noab - 1 + nvab * (p10b_1
     & - noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((p14 - 1) + int_mb(k_range+p14b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p14 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p14b .lt. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p14b_1
     & - noab - 1)))))
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p14 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p14 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_3',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_3',4,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_3',5,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_6_3',7,MA_ERR)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p14 + int_mb(k_range+p14b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p14 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_3',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_vtt + = -1 * Sum ( h10 ) * t ( p14 h10 )_t * i2 ( h10 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER h10b
      INTEGER p14b_1
      INTEGER h10b_1
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p14
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,ieor(irrep_t,irrep_t))) THEN
      DO h10b = 1,noab
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p14b-1)+int_mb(k_spin+h10b-1).
     &eq.4)) THEN
      p14b_1 = int_mb(k_alpha+p14b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p14b_1 = p14b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-1).e
     &q.4)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      ELSE
      h10b_2 = h10b
      p1b_2 = p1b
      END IF
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p14b_1 - noab - 1)))
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p14 - 1))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p14 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_4',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - no
     &ab - 1 + nvab * (h10b_2 - 1)))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((h10 - 1))
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((p1 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_4',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_6_4',7,MA_ERR)
      DO p14 = 1,int_mb(k_range+p14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = p14 + int_mb(k_range+p14b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p14 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_4',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p1 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h10 h12 p1 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p1b
      INTEGER p11b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h10b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h12b-1).
     &eq.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p11b_1 = p11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p11b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h10b_2 = h10b
      h12b_2 = h12b
      p1b_2 = p1b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((p11 - 1))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4_1',4,MA_ERR)
      IF ((h12b .lt. h10b) .and. (p11b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nv
     &ab) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h12 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h10b) .and. (p1b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nv
     &ab) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h12 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .le. h12b) .and. (p11b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .le. h12b) .and. (p1b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',5,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_6_4_1',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h10 + int_mb(k_range+h10b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',8,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_
     &1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_
     &1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_6_4_1(d_a,l_a_offset,k_a_offset,s
     &ize)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h10b
      INTEGER p1b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',0,MA_ERR)
      size = 0
      DO h10b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p1b - noab - 1 + nvab * (h10b - 1)) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( h14 h13 ) * y ( h5 h6 h13 h14 p1 p2 p3 p4 )_y * i1 ( h7 h8 h13 h14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h13b
      INTEGER h14b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h13b_2
      INTEGER h14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h13
      INTEGER h14
      INTEGER h5
      INTEGER h6
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER p4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperh(2)
      INTEGER isuperh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h13b-1
     &)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2
     &b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p1b-1),i
     &eor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-
     &1)))))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1)+int
     &_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.16)
     &) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h13b_1 = h13b
      h14b_1 = h14b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      p4b_1 = p4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      h14b_2 = int_mb(k_alpha+h14b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      h13b_2 = h13b
      h14b_2 = h14b
      END IF
      dim_common = int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * 
     &int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7',1,MA_ERR)
      IF ((h14b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h5b_1 - 1 + no
     &ab * (h14b_1 - 1 + noab * (h13b_1 - 1)))))))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h13 - 1
     &))))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1
     &) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((
     &p4 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h5b) .and. (h5b .le. h14b) .and. (h14b .lt. h6b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h14b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h13b_1 - 1)))))))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1) + int_
     &mb(k_range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1
     &))))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1
     &) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((
     &p4 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h5b) .and. (h6b .le. h14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h13b_1 - 1)))))))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h13 - 1
     &))))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1
     &) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((
     &p4 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h13b) .and. (h14b .lt. h6b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h14b_1 - 1 + n
     &oab * (h13b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1) + int_
     &mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h5 - 
     &1))))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1
     &) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((
     &p4 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h13b) .and. (h13b .lt. h6b) .and. (h6b .le. h14b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h13b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h5 - 
     &1))))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1
     &) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((
     &p4 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p4b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h13b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idima = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h13 - 1) + in
     &t_mb(k_range+h13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1
     &) + int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((
     &p4 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h14b_2 - 1
     & + noab * (h13b_2 - 1 + noab * (h8b_2 - 1 + noab * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimb = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7',5,MA_E
     &RR)
      nsuperh(1) = 1
      nsuperh(2) = 1
      isuperh = 1
      IF (h13b .eq. h14b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperh(1))/FACTORIAL(nsuperh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_7',7,MA_ERR)
      IF ((h6b .le. h7b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) + 
     &int_mb(k_range+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) + 
     &int_mb(k_range+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) + 
     &int_mb(k_range+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) + 
     &int_mb(k_range+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) + 
     &int_mb(k_range+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) + 
     &int_mb(k_range+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_v + = 1 * v ( h5 h6 h13 h14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h13
      INTEGER h14
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).eq.8)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h13b_1 = h13b
      h14b_1 = h14b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + (noab+nvab) * (h13b_1 - 1 + (noab+nvab) * (h6b_1 - 1 + (noab+nv
     &ab) * (h5b_1 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h14 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_7_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h14 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h14b 
     &- 1 + noab * (h13b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_7_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_7_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      int_mb(k_a_offset + h14b - 1 + noab * (h13b - 1 + noab * (h6b - 1 
     &+ noab * (h5b - 1)))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_vt + = -2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h14 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h14
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p9b_1 = p9b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h14b_2 = int_mb(k_alpha+h14b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h14b_2 = h14b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2',4,MA_ERR)
      IF ((h14b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (h14b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 
     &1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h14 - 1) + int_mb(k_range+h
     &14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_7_2',7,MA_ERR)
      IF ((h13b .le. h14b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (h13b - 1 + noab * (h6b - 1 + noab * (h5b -
     & 1)))))
      END IF
      IF ((h14b .le. h13b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h14 - 1))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h14b - 1 + noab * (h6b - 1 + noab * (h5b -
     & 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h14 p9 )_v + = 1 * v ( h5 h6 h14 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h14b
      INTEGER p9b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h14b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h14
      INTEGER p9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h14b_1 = h14b
      p9b_1 = p9b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h14b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p9b_1 - 1 
     &+ (noab+nvab) * (h14b_1 - 1 + (noab+nvab) * (h6b_1 - 1 + (noab+nva
     &b) * (h5b_1 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima = p9 + int_mb(k_range+p9b-1) * ((h14 - 1) + int_mb(k_range+h
     &14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_7_2_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p9 - 1))))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h14 - 1) + int_mb(k_range+h
     &14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p9b -
     & noab - 1 + nvab * (h14b - 1 + noab * (h6b - 1 + noab * (h5b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_7_2_1(d_a,l_a_offset,k_a_offset,s
     &ize)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h14 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h14b
      INTEGER p9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_7_2_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      int_mb(k_a_offset + p9b - noab - 1 + nvab * (h14b - 1 + noab * (h6
     &b - 1 + noab * (h5b - 1)))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h14b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h14 p9 )_vt + = -1/2 * Sum ( p11 ) * t ( p11 h14 )_t * v ( h5 h6 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h14b
      INTEGER p9b
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h14
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER p9
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h14b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h14b-1).
     &eq.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      ELSE
      p11b_1 = p11b
      h14b_1 = h14b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+p11b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      p9b_2 = p9b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((p11 - 1))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h14 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_2',4,MA_ERR)
      IF ((p11b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',5,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_7_2_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimc_sort = h14 + int_mb(k_range+h14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p9 - 1))))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h14 - 1) + int_mb(k_range+h
     &14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p9b - noab - 1 + nvab * (h14b - 1 + noab * (h6b - 1 + noab * 
     &(h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',8,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_vt + = 1/2 * Sum ( p9 p10 ) * t ( p9 p10 h13 h14 )_t * v ( h5 h6 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h13
      INTEGER h14
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h13b_1 = h13b
      h14b_1 = h14b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h14 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_3',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7_3',5,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_7_3',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (h13b - 1 + noab * (h6b - 1 + noab * (h5b -
     & 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_3',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 16 ) * Sum ( h14 p11 ) * y ( h5 h6 h7 h14 p1 p2 p3 p11 )_y * i1 ( h8 p11 h14 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h14b
      INTEGER p11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h14b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p11b_1
      INTEGER h8b_2
      INTEGER p11b_2
      INTEGER p4b_2
      INTEGER h14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h14
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p11
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      DO h14b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p11b-1).eq.16)
     &) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h14b_1 = h14b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      p11b_1 = p11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p11b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+h14b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      h14b_2 = int_mb(k_alpha+h14b-1)
      ELSE
      h8b_2 = h8b
      p11b_2 = p11b
      p4b_2 = p4b
      h14b_2 = h14b
      END IF
      dim_common = int_mb(k_range+h14b-1) * int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8',1,MA_ERR)
      IF ((h14b .lt. h5b) .and. (p11b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (p11b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h14 - 1
     &))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h14b .lt. h5b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h14 - 1
     &))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h14b .lt. h5b) .and. (p2b .le. p11b) .and. (p11b .lt. p3b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h14 - 1
     &))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h14b .lt. h5b) .and. (p3b .le. p11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - n
     &oab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h14 - 1
     &))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p11b .lt. p1b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (p11b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p1b .le. p11b) .a
     &nd. (p11b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p2b .le. p11b) .a
     &nd. (p11b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p3b .le. p11b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - n
     &oab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + n
     &oab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p11b .lt. p1b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (p11b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h14 - 1) + in
     &t_mb(k_range+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p1b .le. p11b) .a
     &nd. (p11b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h14 - 1) + in
     &t_mb(k_range+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p2b .le. p11b) .a
     &nd. (p11b .lt. p3b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h14 - 1) + in
     &t_mb(k_range+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p3b .le. p11b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - n
     &oab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h14 - 1) + in
     &t_mb(k_range+h14b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h14b) .and. (p11b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (p11b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h14b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h14b) .and. (p2b .le. p11b) .and. (p11b .lt. p3b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h14b) .and. (p3b .le. p11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - n
     &oab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 - 1 + 
     &noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h14b_2 - 1
     & + noab * (p4b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (
     &h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimb = h14 + int_mb(k_range+h14b-1) * ((p4 - 1) + int_mb(k_range+
     &p4b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h8 - 1))))
      idimb_sort = h14 + int_mb(k_range+h14b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_8',7,MA_ERR)
      IF ((h7b .le. h8b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_v + = 1 * v ( h5 p11 h14 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER h5b_1
      INTEGER p11b_1
      INTEGER p1b_1
      INTEGER h14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER p11
      INTEGER h14
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).eq.8)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      ELSE
      h5b_1 = h5b
      p11b_1 = p11b
      p1b_1 = p1b
      h14b_1 = h14b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_m
     &b(k_range+p1b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_1',1,MA_ERR)
      IF ((h5b .le. p11b) .and. (h14b .le. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - 1 
     &+ (noab+nvab) * (h14b_1 - 1 + (noab+nvab) * (p11b_1 - 1 + (noab+nv
     &ab) * (h5b_1 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((h14 - 1) + int_mb(k_range+h
     &14b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((p11 - 1) + int_mb(k_ra
     &nge+p11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda4_8_1',3,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima_sort = h5 + int_mb(k_range+h5b-1) * ((p11 - 1) + int_mb(k_ra
     &nge+p11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h14b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 + nvab * (h
     &5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_8_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_8_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h14b - 1 + noab * (p1b - noab - 1 + nvab * (p1
     &1b - noab - 1 + nvab * (h5b - 1)))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int
     &_mb(k_range+p1b-1) * int_mb(k_range+h14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 p11 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER p11b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h14
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER p11
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h14b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h14b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      ELSE
      p9b_1 = p9b
      h14b_1 = h14b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      p11b_2 = p11b
      p1b_2 = p1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_m
     &b(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h14 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_2',4,MA_ERR)
      IF ((h5b .le. p11b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. p11b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_8_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = h14 + int_mb(k_range+h14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 +
     & nvab * (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( h12 p10 ) * t ( p10 p11 h12 h14 )_t * v ( h5 h12 p1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER p10b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER p10b_1
      INTEGER h14b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p11
      INTEGER h12
      INTEGER h14
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p10b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin
     &+h14b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_m
     &b(k_sym+h14b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+p10b-1)+
     &int_mb(k_spin+h14b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p11b_1 = p11b
      p10b_1 = p10b
      h14b_1 = h14b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_2 = h5b
      h12b_2 = h12b
      p1b_2 = p1b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p11b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_3',1,MA_ERR)
      IF ((p10b .le. p11b) .and. (h12b .le. h14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p10b_1
     & - noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h14 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .le. p11b) .and. (h14b .lt. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p10b_1
     & - noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h14 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p10b) .and. (h12b .le. h14b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p11b_1
     & - noab - 1)))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p11 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h14 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p10b) .and. (h14b .lt. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p11b_1
     & - noab - 1)))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p11 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h14 - 1)))
     &)
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_3',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_3',4,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h5b) .and. (p1b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b) .and. (p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b) .and. (p1b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_3',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_8_3',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = p11 + int_mb(k_range+p11b-1) * ((h14 - 1) + int_mb(k_
     &range+h14b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((p1 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 +
     & nvab * (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_3',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_vtt + = 1 * Sum ( h12 ) * t ( p11 h12 )_t * i2 ( h5 h12 h14 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER h14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER p1
      INTEGER h14
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,ieor(irrep
     &_t,irrep_t))) THEN
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h12b-1).
     &eq.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p11b_1 = p11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h14b_2 = int_mb(k_alpha+h14b-1)
      ELSE
      h5b_2 = h5b
      h12b_2 = h12b
      p1b_2 = p1b
      h14b_2 = h14b
      END IF
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((p11 - 1))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_4',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h14b_2 - 1
     & + noab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h5b_2 -
     & 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimb = h14 + int_mb(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_4',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_8_4',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 +
     & nvab * (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_4',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h12 h14 p1 )_vt + = 1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 h12 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h12b
      INTEGER p1b
      INTEGER h14b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h14
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h5
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h12b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h14b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h14b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      ELSE
      p9b_1 = p9b
      h14b_1 = h14b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h12b_2 = h12b
      p1b_2 = p1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h12b-1) * int_m
     &b(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h14b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idima = h14 + int_mb(k_range+h14b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h14 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4_1',4,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h5b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h12b) .and. (p1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h5b_2 - 1)))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',5,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_8_4_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = h14 + int_mb(k_range+h14b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p1 - 1))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (p1b - noab - 1 + nvab * (h12b - 1 + noab *
     & (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',8,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_
     &1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_
     &1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_8_4_1(d_a,l_a_offset,k_a_offset,s
     &ize)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h12 h14 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h12b
      INTEGER p1b
      INTEGER h14b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h12b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      int_mb(k_a_offset + h14b - 1 + noab * (p1b - noab - 1 + nvab * (h1
     &2b - 1 + noab * (h5b - 1)))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h12b-1) * int
     &_mb(k_range+p1b-1) * int_mb(k_range+h14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( p10 p9 ) * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y * v ( p9 p10 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER p9b
      INTEGER p10b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p9
      INTEGER p10
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+p10b-1
     &)))))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.16))
     & THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      p1b_1 = p1b
      p2b_1 = p2b
      p9b_1 = p9b
      p10b_1 = p10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      p9b_2 = p9b
      p10b_2 = p10b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_9',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_9',1,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p10b_1 - noab - 1 + nv
     &ab * (p9b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p10b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nv
     &ab * (p9b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - n
     &oab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nv
     &ab * (p9b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p10b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - n
     &oab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p9b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - n
     &oab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nv
     &ab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + n
     &oab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_9',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_9',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_9',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nva
     &b) * (p9b_2 - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_9',5,MA_E
     &RR)
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p9b .eq. p10b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubp(1))/FACTORIAL(nsubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_9',7,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_9',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 24 ) * Sum ( h13 ) * i1 ( h5 h6 h7 h13 p1 p2 )_yt * v ( h8 h13 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h13b_1
      INTEGER h8b_2
      INTEGER h13b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p1
      INTEGER p2
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_m
     &b(k_spin+h13b-1).eq.12)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      p1b_1 = p1b
      p2b_1 = p2b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h13b-1)+i
     &nt_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h8b_2 = h8b
      h13b_2 = h13b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_10',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h
     &7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_10',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_10',4,MA_ERR)
      IF ((h13b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h13b_2 - 1)))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h13 - 1))))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h13b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h8 - 1))))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_10',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_10',7,MA_ERR)
      IF ((h7b .le. h8b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p3b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h8 - 1) + 
     &int_mb(k_range+h8b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_10',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h13 p1 p2 )_yt + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * y ( h5 h6 h7 p1 p2 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+i
     &nt_mb(k_spin+h13b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p9b_1 = p9b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_m
     &b(k_spin+p9b-1).eq.12)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      p1b_2 = p1b
      p2b_2 = p2b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_10_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_1',4,MA_ERR)
      IF ((p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_ra
     &nge+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_10_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_10_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))
     &))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + 
     &nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_10_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_10_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h13 p1 p2 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*nvab*nvab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_10_1',0,MA_E
     &RR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),in
     &t_mb(k_sym+p2b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p2b-1).ne.12)) THEN
      int_mb(k_a_offset + h13b - 1 + noab * (p2b - noab - 1 + nvab * (p1
     &b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1
     &)))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) 
     &* int_mb(k_range+h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_10_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h13 p1 p2 )_yt + = -1/2 * Sum ( h11 p10 p9 ) * t ( p9 p10 h11 h13 )_t * y ( h5 h6 h7 h11 p1 p2 p9 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER p9b
      INTEGER p10b
      INTEGER h11b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h11b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h11b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h11
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+i
     &nt_mb(k_spin+h13b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h13b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h13b_1 = h13b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.16)
     &) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h11b_2 = h11b
      p1b_2 = p1b
      p2b_2 = p2b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_2',1,MA_ERR)
      IF ((h11b .le. h13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h13b .lt. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_10_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_2',4,MA_ERR)
      IF ((h11b .lt. h5b) .and. (p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p9b .lt. p1b) .and. (p1b .le. p10b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p9b .lt. p1b) .and. (p2b .le. p10b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p1b .le. p9b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b) .and
     &. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p10b .lt. p1b)) T
     &HEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p9b .lt. p1b) .an
     &d. (p1b .le. p10b) .and. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p9b .lt. p1b) .an
     &d. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b) .and. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p10b .lt. p1b)) T
     &HEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p9b .lt. p1b) .an
     &d. (p1b .le. p10b) .and. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p9b .lt. p1b) .an
     &d. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p1b .le. p9b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b) .and. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p9b .lt. p1b) .and. (p1b .le. p10b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p9b .lt. p1b) .and. (p2b .le. p10b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p1b .le. p9b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b) .and
     &. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1
     &) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_10_2',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_10_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))
     &))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h7 - 1) + int_mb(k_
     &range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + 
     &nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_10_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytf + = 1 * P( 4 ) * Sum ( h9 ) * i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt * f ( h9 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h9b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h9b_1
      INTEGER h9b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_f))) THEN
      DO h9b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h9b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1).eq.16)) 
     &THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p4b-1).eq
     &.4)) THEN
      h9b_2 = int_mb(k_alpha+h9b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h9b_2 = h9b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_11',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1
     &b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h
     &6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 -
     & 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_11',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_11',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (h9b_2 - 1)))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h9 - 1))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((p4 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_11',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_11',7,MA_ERR)
      IF ((p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_11',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_11_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt + = -1 * Sum ( p10 ) * t ( p10 h9 )_t * y ( h5 h6 h7 h8 p1 p2 p3 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h9b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h9b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h9b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p10b_1 = p10b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p10b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p2b_2 = p2b
      p3b_2 = p3b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_11_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_11_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_11_1',4,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p10b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p10b) .and. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p10b) .and. (p10b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_11_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_11_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idimc_sort = h9 + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 -
     & 1))))))))
      idimc = h9 + int_mb(k_range+h9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h9b - 1 + noab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + n
     &vab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab *
     & (h6b - 1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_11_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_11_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*noab*nvab*nvab*nva
     &b,'noname',l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_11
     &_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+p1b-
     &1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieo
     &r(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).ne.1
     &6)) THEN
      int_mb(k_a_offset + h9b - 1 + noab * (p3b - noab - 1 + nvab * (p2b
     & - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+h
     &9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_12(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 16 ) * Sum ( h11 h10 ) * i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt * v ( h8 h10 h11 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h11b
      INTEGER h10b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h11b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h10b_1
      INTEGER h8b_2
      INTEGER h10b_2
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h11
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      DO h11b = 1,noab
      DO h10b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1).eq.16)
     &) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h11b_1 = h11b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1)+i
     &nt_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      ELSE
      h8b_2 = h8b
      h10b_2 = h10b
      p4b_2 = p4b
      h11b_2 = h11b
      END IF
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_12',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p
     &1b_1 - noab - 1 + nvab * (h11b_1 - 1 + noab * (h7b_1 - 1 + noab * 
     &(h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_
     &range+h10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_12',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_12',4,MA_ERR)
      IF ((h10b .lt. h8b) .and. (h11b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (h11b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h10 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_
     &range+h10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h10b) .and. (h11b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (h11b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h8 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h10 - 1) + int_mb(k_
     &range+h10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_12',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_12',7,MA_ERR)
      IF ((h7b .le. h8b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h8 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 +
     & noab * (h8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p1 - 1) + int_mb
     &(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1) + 
     &int_mb(k_range+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_12',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_12_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt + = 1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h11 p1 p2 p3 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h11b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h10b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h11b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h11b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p9b_1 = p9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1)+int_
     &mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p9b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h11b_2 = h11b
      p1b_2 = p1b
      p2b_2 = p2b
      p3b_2 = p3b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h11b-1) * int_mb(k_range+p1b-1) *
     & int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_12_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_12_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_12_1',4,MA_ERR)
      IF ((h11b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1))
     &))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1))
     &))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1))
     &))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (p3b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1))
     &))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + no
     &ab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h11 - 1) + int_
     &mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h11b) .and. (p3b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_12_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_12_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = h10 + int_mb(k_range+h10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      idimc = h10 + int_mb(k_range+h10b-1) * ((p3 - 1) + int_mb(k_range+
     &p3b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + 
     &nvab * (p1b - noab - 1 + nvab * (h11b - 1 + noab * (h7b - 1 + noab
     & * (h6b - 1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_12_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_12_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h11b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h10b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*noab*nvab*nvab*nva
     &b,'noname',l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_12
     &_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h11b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+p1
     &b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h10b-1),i
     &eor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h10b-1)
     &+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).ne
     &.16)) THEN
      int_mb(k_a_offset + h10b - 1 + noab * (p3b - noab - 1 + nvab * (p2
     &b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h11b - 1 + noab * 
     &(h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h11b-1) * int_mb(k_range+p1b-1)
     & * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+
     &h10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_13(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 6 ) * Sum ( h10 p11 ) * i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt * v ( h10 p11 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h10b
      INTEGER p11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h10b_1
      INTEGER p11b_1
      INTEGER h10b_2
      INTEGER p11b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p1
      INTEGER p2
      INTEGER h10
      INTEGER p11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1).eq.16)
     &) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      p1b_1 = p1b
      p2b_1 = p2b
      h10b_1 = h10b
      p11b_1 = p11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h10b_2 = h10b
      p11b_2 = p11b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+h10b-1) * int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_13',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - n
     &oab - 1 + nvab * (h10b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (
     &p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * 
     &(h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1
     &) + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_13',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_13',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h10 - 1))))
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_13',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_13',7,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_13',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_13_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt + = -1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h10b
      INTEGER p11b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p11b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p11
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p9b_1 = p9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p11b-1)+int_mb(k_spin+p9b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p2b_2 = p2b
      p11b_2 = p11b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_13_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_13_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_13_1',4,MA_ERR)
      IF ((p9b .le. p11b) .and. (p11b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p9b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p1b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p1b) .and. (p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p9b) .and. (p9b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p2b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p11b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p9b) .and. (p9b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p11b) .and. (p11b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p11 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_13_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_13_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimc_sort = h10 + int_mb(k_range+h10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1
     &1 - 1))))))))
      idimc = p11 + int_mb(k_range+p11b-1) * ((h10 - 1) + int_mb(k_range
     &+h10b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p11b - noab - 1 + nvab * (h10b - 1 + noab * (p2b - noab - 1 +
     & nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab
     & * (h6b - 1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_13_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_13_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h10b
      INTEGER p11b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*noab*nvab*nvab*nva
     &b,'noname',l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_13
     &_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b
     &-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ie
     &or(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p11b-1).ne
     &.16)) THEN
      int_mb(k_a_offset + p11b - noab - 1 + nvab * (h10b - 1 + noab * (p
     &2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * 
     &(h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+h10b-1) * int_mb(k_range+
     &p11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_14(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = -1/2 * P( 24 ) * Sum ( p10 ) * i1 ( h5 h6 p10 p1 p2 p3 )_yt * v ( h7 h8 p4 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER p10b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p10b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p4b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER p10
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_
     &mb(k_spin+p3b-1).eq.12)) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      p10b_1 = p10b
      p1b_1 = p1b
      p2b_1 = p2b
      p3b_1 = p3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p4b_2 = p4b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_14',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p3b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (p10b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h5b_1 - 1))))
     &)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idima = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_
     &mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_14',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_14',4,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h7 - 1) + int_mb(k_r
     &ange+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_range+
     &p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h7 - 1) + int_mb(k_r
     &ange+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_14',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_14',7,MA_ERR)
      IF ((h6b .le. h7b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h6 - 1) + int_m
     &b(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h8 - 1) + int_m
     &b(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 +
     & noab * (h7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb
     &(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h7 - 1) + 
     &int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 -
     & 1))))))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 +
     & noab * (h8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_14',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_14_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 p10 p1 p2 p3 )_yt + = 1 * Sum ( h12 h11 p9 ) * t ( p9 p10 h11 h12 )_t * y ( h5 h6 h11 h12 p1 p2 p3 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER p10b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p9b
      INTEGER h11b
      INTEGER h12b
      INTEGER p10b_1
      INTEGER p9b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER p1
      INTEGER p2
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+p3b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+
     &h11b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb
     &(k_sym+h11b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p9b-1)+i
     &nt_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p10b_1 = p10b
      p9b_1 = p9b
      h11b_1 = h11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b-1)+int
     &_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p9b-1).eq.16)
     &) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h11b_2 = h11b
      h12b_2 = h12b
      p1b_2 = p1b
      p2b_2 = p2b
      p3b_2 = p3b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_14_1',1,MA_ERR)
      IF ((p9b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p10b_1 
     &- noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p10 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_14_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_14_1',4,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1 + no
     &ab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h5b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1 + no
     &ab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h5b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1 + no
     &ab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h5b) .and. (p3b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1 + no
     &ab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1) + int_m
     &b(k_range+h5b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p2b .le. p9b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p3b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h11 - 1
     &))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p2b .le. p9b) .and. (p9b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p3b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 1 + n
     &oab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h6 - 1) + int
     &_mb(k_range+h6b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p9b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h11b) .and. (p3b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nva
     &b * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 - 1 + 
     &noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1) + in
     &t_mb(k_range+h11b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h5 - 1) + in
     &t_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1
     &) + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((
     &p3 - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_14_1',5,M
     &A_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_14_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = p10 + int_mb(k_range+p10b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p1 - 1) + int_
     &mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p3 - 1))
     &))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p10b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1)
     &))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_14_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_14_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 p10 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER p10b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*nvab*nvab*nvab*nvab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_14_1',0,MA_E
     &RR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+p3b-1).ne.12)) THEN
      int_mb(k_a_offset + p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (p10b - noab - 1 + nvab * (h6b - 1 + n
     &oab * (h5b - 1)))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+p10b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     & * int_mb(k_range+p3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1/4 * P( 6 ) * Sum ( h13 h12 ) * i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt * v ( h12 h13 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER h12b
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p1
      INTEGER p2
      INTEGER h12
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+h13b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).eq.16)
     &) THEN
      h5b_1 = int_mb(k_alpha+h5b-1)
      h6b_1 = int_mb(k_alpha+h6b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      h5b_1 = h5b
      h6b_1 = h6b
      h7b_1 = h7b
      h8b_1 = h8b
      p1b_1 = p1b
      p2b_1 = p2b
      h12b_1 = h12b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h12b_2 = h12b
      h13b_2 = h13b
      p3b_2 = p3b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 -
     & noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h6b_1 
     &- 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1
     &) + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15',5,MA_
     &ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h12b .eq. h13b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_15',7,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p4 + int_mb(k_range+p4b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p4 - 1) + int_mb(k_range+p4
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p1 - 1) + int_mb(k_ra
     &nge+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab 
     &- 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h5 + int_mb(k_range+h5b-1) * ((h6 - 1) + int_mb(k_ran
     &ge+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb
     &(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1) + 
     &int_mb(k_range+p2b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 -
     & 1))))))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int_m
     &b(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)))
     &)))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab 
     &- 1 + nvab * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 +
     & noab * (h6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt + = 1 * Sum ( p10 p9 ) * t ( p9 p10 h12 h13 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER h13b
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h12
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+h13b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h12b-1),int_mb(k_sym+h13b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h12b_1 = h12b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p2b_2 = p2b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (h12b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 
     &- noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h13 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_1',4,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p10b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p10b .lt. p2b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p10b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1) 
     &+ int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15_1',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_15_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h6 - 1) + in
     &t_mb(k_range+h6b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1
     &) + int_mb(k_range+h8b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((
     &p2 - 1))))))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h12b - 1 + noab * (p2b - noab - 1 + nvab *
     & (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b
     & - 1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_15_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER h13b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*noab*noab*nvab*nva
     &b,'noname',l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_15
     &_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+h13
     &b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h12b-1),ie
     &or(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne
     &.16)) THEN
      int_mb(k_a_offset + h13b - 1 + noab * (h12b - 1 + noab * (p2b - no
     &ab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 
     &1 + noab * (h6b - 1 + noab * (h5b - 1)))))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+
     &h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_ytt + = 2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER h12b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p1
      INTEGER p2
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      DO h12b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+h13b-
     &1)))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p9b_1 = p9b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p9b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p2b_2 = p2b
      h12b_2 = h12b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2',4,MA_ERR)
      IF ((h12b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (h12b_2 - 1 + noab * (p2b_2 - noab - 1 + nvab * (p
     &1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + noab * (
     &h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_mb
     &(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) + 
     &int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h12 
     &- 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15_2',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_15_2',7,MA_ERR)
      IF ((h12b .le. h13b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1
     &2 - 1))))))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_range
     &+h12b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h12b - 1 + noab * (p2b - noab - 1 + nvab *
     & (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b
     & - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h13b .le. h12b)) THEN
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((h1
     &2 - 1))))))))
      idimc = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(
     &k_range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + i
     &nt_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 
     &1))))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h12b - 1 + noab * (h13b - 1 + noab * (p2b - noab - 1 + nvab *
     & (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b
     & - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15_2_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt + = -1 * Sum ( p11 ) * t ( p11 h12 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER p9b
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER h7
      INTEGER h8
      INTEGER p9
      INTEGER p1
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p9b-1).ne.
     &16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p9b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h12b-1).
     &eq.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p11b_1 = p11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_m
     &b(k_spin+p2b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p11b-1).eq.16))
     & THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      p2b_2 = p2b
      p9b_2 = p9b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((p11 - 1))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h12 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2_1',4,MA_ERR)
      IF ((p11b .lt. p9b) .and. (p9b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nva
     &b * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .le. p11b) .and. (p11b .lt. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nv
     &ab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p9 - 1) + int_mb(k_
     &range+p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p1b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p9b) .and. (p9b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p2b_2 - no
     &ab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimb = p2 + int_mb(k_range+p2b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p11b)) THE
     &N
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p1b) .and. (p2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 + nva
     &b * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p11 - 1) + int_mb(k_r
     &ange+p11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p2b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p11b) .and. (p11b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p9b) .and. (p9b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nv
     &ab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + n
     &oab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda4_15_2_1',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimc_sort = h12 + int_mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h7 - 1) + int_
     &mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p1 - 1) 
     &+ int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p9
     & - 1))))))))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((p2 - 1) + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_
     &range+p1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1) + int
     &_mb(k_range+h7b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1)
     &)))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p9b - noab - 1 + nvab * (h12b - 1 + noab * (p2b - noab - 1 + 
     &nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab 
     &* (h6b - 1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_15_2_1(d_a,l_a_offset,k_a_offset,
     &size)
C     $Id: ccsdtq_lambda4.F,v 1.2 2003-10-19 00:54:28 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER p9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab*noab*nvab*nvab*nva
     &b,'noname',l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdtq_lambda4_15
     &_2_1',0,MA_ERR)
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b
     &-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h12b-1),ie
     &or(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p9b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1).ne.
     &16)) THEN
      int_mb(k_a_offset + p9b - noab - 1 + nvab * (h12b - 1 + noab * (p2
     &b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (
     &h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+
     &p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
#endif
