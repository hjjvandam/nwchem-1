      SUBROUTINE ccsdtq_lambda2_25(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda2_25.F,v 1.2 2003-10-19 00:54:21 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_vty + = 1/12 * Sum ( p5 h8 h9 h10 ) * y ( h8 h9 h10 p1 p2 p5 )_y * i1 ( h3 h4 p5 h8 h9 h10 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h8b
      INTEGER h9b
      INTEGER h10b
      INTEGER p5b
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p5b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p5b_2
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h8
      INTEGER h9
      INTEGER h10
      INTEGER p5
      INTEGER p1
      INTEGER p2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperh(3)
      INTEGER isuperh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_v,ieor(irrep_t
     &,irrep_y))) THEN
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h10b = h9b,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p5b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p5b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_
     &mb(k_spin+p5b-1).eq.12)) THEN
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p2b_1 = int_mb(k_alpha+p2b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      ELSE
      h8b_1 = h8b
      h9b_1 = h9b
      h10b_1 = h10b
      p1b_1 = p1b
      p2b_1 = p2b
      p5b_1 = p5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+p5b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+int_m
     &b(k_spin+h10b-1).eq.12)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      p5b_2 = p5b
      h8b_2 = h8b
      h9b_2 = h9b
      h10b_2 = h10b
      END IF
      dim_common = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_m
     &b(k_range+h10b-1) * int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda2_25',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda2_25',1,MA_ERR)
      IF ((p5b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 + nva
     &b * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h8b_1 - 1)))))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h10 - 1) + int_mb(k_r
     &ange+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p1b .le. p5b) .and. (p5b .lt. p2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p2b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h8b_1 - 1)))))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idima = p2 + int_mb(k_range+p2b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h10 - 1) + int_mb(k_r
     &ange+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p2b .le. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p5b_1 - no
     &ab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nva
     &b * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (h8b_1 - 1)))))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idima = p5 + int_mb(k_range+p5b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h10 - 1) + int_mb(k_r
     &ange+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda2_25',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda2_25',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda2_25',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h10b_2 - 1
     & + noab * (h9b_2 - 1 + noab * (h8b_2 - 1 + noab * (p5b_2 - noab - 
     &1 + nvab * (h4b_2 - 1 + noab * (h3b_2 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimb = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda2_25',5,MA_
     &ERR)
      nsuperh(1) = 1
      nsuperh(2) = 1
      nsuperh(3) = 1
      isuperh = 1
      IF (h8b .eq. h9b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      IF (h9b .eq. h10b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda2_25',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,6.0d0/FACTORIAL(
     &nsuperh(1))/FACTORIAL(nsuperh(2))/FACTORIAL(nsuperh(3)),dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda2_25',7,MA_ERR)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_ran
     &ge+p2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h4 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/12.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda2_25',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda2_25',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda2_25',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda2_25',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
