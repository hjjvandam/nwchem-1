      SUBROUTINE ccsdtq_lambda1_9_6_2_2(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda1_9_6_2_2.F,v 1.2 2003-10-19 00:54:13 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h9 h11 h14 p7 p8 p10 )_y + = 4/5 * y ( h9 h11 h14 p7 p8 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h14b
      INTEGER p7b
      INTEGER p8b
      INTEGER p10b
      INTEGER h9b_1
      INTEGER h11b_1
      INTEGER h14b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h9
      INTEGER h11
      INTEGER h14
      INTEGER p7
      INTEGER p8
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h14b = h11b,noab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO p10b = p8b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     &+int_mb(k_spin+p10b-1).ne.12)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b-
     &1) .eq. int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p1
     &0b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h14b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),i
     &nt_mb(k_sym+p10b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h14b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int
     &_mb(k_spin+p10b-1).eq.12)) THEN
      h9b_1 = int_mb(k_alpha+h9b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h14b_1 = int_mb(k_alpha+h14b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      h9b_1 = h9b
      h11b_1 = h11b
      h14b_1 = h14b
      p7b_1 = p7b
      p8b_1 = p8b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h14b-1) * int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) 
     &* int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_9_6_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_9_6_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - n
     &oab - 1 + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1 + nv
     &ab * (h14b_1 - 1 + noab * (h11b_1 - 1 + noab * (h9b_1 - 1)))))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h14 - 1) + int_mb(k
     &_range+h14b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1)))
     &)))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p7 - 1) + in
     &t_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p10 - 
     &1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_9_6_2_2',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda1_9_6_2_2',3,MA_ERR)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((p7 - 1) + in
     &t_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p10 - 
     &1))))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h14 - 1) + int_mb(k
     &_range+h14b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1)))
     &)))
      dbl_mb(k_c + idimc - 1) = 4.0d0/5.0d0 * dbl_mb(k_a_sort + idima_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (p8b - noab - 1 + nvab * (p7b - noab - 1 + nva
     &b * (h14b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_9_6_2_2',
     &4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_9_6_
     &2_2',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
