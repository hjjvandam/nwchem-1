      SUBROUTINE ccsdtq_lambda1_20_1_5_2(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda1_20_1_5_2.F,v 1.1 2003-09-16 21:51:46 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h6 p18 p7 p8 )_v + = 1/2 * v ( h6 p18 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p18b
      INTEGER p7b
      INTEGER p8b
      INTEGER h6b_1
      INTEGER p18b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h6
      INTEGER p18
      INTEGER p7
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p18b = noab+1,noab+nvab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p18b-
     &1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+p18b-1) .eq. int_mb(k_spin+
     &p7b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+p18b-1),ieor(int_mb
     &(k_sym+p7b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p18b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h6b_1 = int_mb(k_alpha+h6b-1)
      p18b_1 = int_mb(k_alpha+p18b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h6b_1 = h6b
      p18b_1 = p18b
      p7b_1 = p7b
      p8b_1 = p8b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p18b-1) * int_m
     &b(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_1_5_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_1_5_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - 1 
     &+ (noab+nvab) * (p7b_1 - 1 + (noab+nvab) * (p18b_1 - 1 + (noab+nva
     &b) * (h6b_1 - 1)))))
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p18 = 1,int_mb(k_range+p18b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p18 - 1) + int_mb(k_range+p18b-1) * ((h6 - 1))))
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p18 - 1) + int_mb(k_ra
     &nge+p18b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_1_5_2'
     &,2)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda1_20_1_5_2',3)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p18 = 1,int_mb(k_range+p18b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima_sort = h6 + int_mb(k_range+h6b-1) * ((p18 - 1) + int_mb(k_ra
     &nge+p18b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p18 - 1) + int_mb(k_range+p18b-1) * ((h6 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_a_sort + idima_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p8b -
     & noab - 1 + nvab * (p7b - noab - 1 + nvab * (p18b - noab - 1 + nva
     &b * (h6b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_1_5_2'
     &,4)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_1
     &_5_2',5)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
