      SUBROUTINE ccsdtq_lambda1_14_4_5_1_3(d_a,k_a_offset,d_c,k_c_offset
     &)
C     $Id: ccsdtq_lambda1_14_4_5_1_3.F,v 1.2 2003-10-19 00:54:00 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i4 ( h2 h5 h9 h12 p3 p4 p7 p8 )_y + = 1/4 * y ( h2 h5 h9 h12 p3 p4 p7 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h5b
      INTEGER h9b
      INTEGER h12b
      INTEGER p3b
      INTEGER p4b
      INTEGER p7b
      INTEGER p8b
      INTEGER h2b_1
      INTEGER h5b_1
      INTEGER h9b_1
      INTEGER h12b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h5
      INTEGER h9
      INTEGER h12
      INTEGER h2
      INTEGER p3
      INTEGER p4
      INTEGER p7
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h5b = 1,noab
      DO h9b = h5b,noab
      DO h12b = h9b,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p7b = p4b,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p3b-1)+
     &int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).ne.
     &16)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h9b-1)
     &+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b
     &-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h9b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p3b-1),ie
     &or(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+p8b-1
     &)))))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h5b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p3b-1)+int_
     &mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.16))
     & THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      p3b_1 = int_mb(k_alpha+p3b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h2b_1 = h2b
      h5b_1 = h5b
      h9b_1 = h9b
      h12b_1 = h12b
      p3b_1 = p3b
      p4b_1 = p4b
      p7b_1 = p7b
      p8b_1 = p8b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h5b-1) * int_mb
     &(k_range+h9b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+p3b-1) *
     & int_mb(k_range+p4b-1) * int_mb(k_range+p7b-1) * int_mb(k_range+p8
     &b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_14_4_5_1_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_14_4_5_1_3',1,MA_ERR)
      IF ((h12b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nva
     &b * (p3b_1 - noab - 1 + nvab * (h2b_1 - 1 + noab * (h12b_1 - 1 + n
     &oab * (h9b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1) + int_
     &mb(k_range+h12b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1)
     &)))))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1) + int_m
     &b(k_range+h12b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) 
     &+ int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h2b) .and. (h2b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nva
     &b * (p3b_1 - noab - 1 + nvab * (h12b_1 - 1 + noab * (h2b_1 - 1 + n
     &oab * (h9b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1) + int
     &_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1)
     &)))))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1) + int_m
     &b(k_range+h12b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) 
     &+ int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .lt. h2b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nva
     &b * (p3b_1 - noab - 1 + nvab * (h12b_1 - 1 + noab * (h9b_1 - 1 + n
     &oab * (h2b_1 - 1 + noab * (h5b_1 - 1)))))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1) + int
     &_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h5 - 1)
     &)))))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1) + int_m
     &b(k_range+h12b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) 
     &+ int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1 + nva
     &b * (p3b_1 - noab - 1 + nvab * (h12b_1 - 1 + noab * (h9b_1 - 1 + n
     &oab * (h5b_1 - 1 + noab * (h2b_1 - 1)))))))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1) + int
     &_mb(k_range+h9b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h2 - 1)
     &)))))))
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1) + int_m
     &b(k_range+h12b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) 
     &+ int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8
     & - 1))))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_14_4_5_1_
     &3',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('ccsdtq_lambda1_14_4_5_1_3',3,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima_sort = h2 + int_mb(k_range+h2b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1) + int_m
     &b(k_range+h12b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((p4 - 1) 
     &+ int_mb(k_range+p4b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p8
     & - 1))))))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p3 - 1) + int_mb(k_ra
     &nge+p3b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1) + int
     &_mb(k_range+h9b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h2 - 1)
     &)))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_a_sort + idima_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p8b -
     & noab - 1 + nvab * (p7b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h12b - 1 + noab * (h9b - 1 + noab * (
     &h5b - 1 + noab * (h2b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_14_4_5_1_
     &3',4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_14_4
     &_5_1_3',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
