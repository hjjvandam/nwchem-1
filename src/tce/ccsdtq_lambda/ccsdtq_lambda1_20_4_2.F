      SUBROUTINE ccsdtq_lambda1_20_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_lambda1_20_4_2.F,v 1.1 2003-09-16 21:51:49 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( p17 p3 )_vtt + = 1 * Sum ( h4 ) * t ( p17 h4 )_t * i3 ( h4 p3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p17b
      INTEGER p3b
      INTEGER h4b
      INTEGER p17b_1
      INTEGER h4b_1
      INTEGER h4b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p17
      INTEGER h4
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p17b = noab+1,noab+nvab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p17b-1)+int_mb(k_spin+p3b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p17b-1) .eq. int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+p17b-1),int_mb(k_sym+p3b-1)) .eq. ieor(irrep
     &_v,ieor(irrep_t,irrep_t))) THEN
      DO h4b = 1,noab
      IF (int_mb(k_spin+p17b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p17b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p17b-1)+int_mb(k_spin+h4b-1).e
     &q.4)) THEN
      p17b_1 = int_mb(k_alpha+p17b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      ELSE
      p17b_1 = p17b
      h4b_1 = h4b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p3b-1).eq
     &.4)) THEN
      h4b_2 = int_mb(k_alpha+h4b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      ELSE
      h4b_2 = h4b
      p3b_2 = p3b
      END IF
      dim_common = int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p17b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_4_2',0)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_4_2',1)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h4b_1 - 1 
     &+ noab * (p17b_1 - noab - 1)))
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      idima = h4 + int_mb(k_range+h4b-1) * ((p17 - 1))
      idima_sort = h4 + int_mb(k_range+h4b-1) * ((p17 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_4_2',2
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_4_2',3)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_4_2',4)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (h4b_2 - 1)))
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((h4 - 1))
      idimb_sort = h4 + int_mb(k_range+h4b-1) * ((p3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_20_4_2',5
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4_2',6)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda1_20_4_2',7)
      DO p17 = 1,int_mb(k_range+p17b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = p17 + int_mb(k_range+p17b-1) * ((p3 - 1))
      idimc = p3 + int_mb(k_range+p3b-1) * ((p17 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (p17b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_4_2',8
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4
     &_2',9)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4
     &_2',10)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4
     &_2',11)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
