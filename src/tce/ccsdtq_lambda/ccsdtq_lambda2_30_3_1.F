      SUBROUTINE ccsdtq_lambda2_30_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_lambda2_30_3_1.F,v 1.2 2003-10-19 00:54:23 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h3 h4 h6 h13 h14 p1 )_ytt + = 1 * Sum ( p7 ) * t ( p7 h13 )_t * i3 ( h3 h4 h6 h14 p1 p7 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER h6b
      INTEGER p1b
      INTEGER h13b
      INTEGER h14b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h13b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER h14b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER h4
      INTEGER h6
      INTEGER p1
      INTEGER h14
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h6b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+h14b-1).ne.12)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+int_mb(k_spin+h6b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h6b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+h13b-1),in
     &t_mb(k_sym+h14b-1)))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) 
     &THEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p7b_1 = p7b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h6b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1)+int_
     &mb(k_spin+p7b-1).eq.12)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h4b_2 = int_mb(k_alpha+h4b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h14b_2 = int_mb(k_alpha+h14b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h3b_2 = h3b
      h4b_2 = h4b
      h6b_2 = h6b
      p1b_2 = p1b
      h14b_2 = h14b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+h6b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda2_30_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda2_30_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda2_30_3_1',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda2_30_3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda2_30_3_1',4,MA_ERR)
      IF ((h14b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h14b_2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h
     &6b_2 - 1 + noab * (h4b_2 - 1 + noab * (h3b_2 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h14 - 1) + int_mb(k_range+h
     &14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(k_
     &range+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_ran
     &ge+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1) + int_mb
     &(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1)))
     &)))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda2_30_3_1',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdtq_lambda2_30_3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdtq_lambda2_30_3_1',7,MA_ERR)
      IF ((h13b .le. h14b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h3 - 1) + int_mb(k_r
     &ange+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1)
     &)))))
      idimc = h14 + int_mb(k_range+h14b-1) * ((h13 - 1) + int_mb(k_range
     &+h13b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(
     &k_range+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h14b - 1 + noab * (h13b - 1 + noab * (p1b - noab - 1 + nvab *
     & (h6b - 1 + noab * (h4b - 1 + noab * (h3b - 1)))))))
      END IF
      IF ((h14b .le. h13b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h3 - 1) + int_mb(k_r
     &ange+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h6 - 1) + int_
     &mb(k_range+h6b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h14 - 1)
     &)))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((h14 - 1) + int_mb(k_range
     &+h14b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h6 - 1) + int_mb(
     &k_range+h6b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (h14b - 1 + noab * (p1b - noab - 1 + nvab *
     & (h6b - 1 + noab * (h4b - 1 + noab * (h3b - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda2_30_3_1',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda2_30_3
     &_1',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda2_30_3
     &_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda2_30_3
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
