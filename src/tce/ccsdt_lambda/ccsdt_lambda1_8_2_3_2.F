      SUBROUTINE ccsdt_lambda1_8_2_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdt_lambda1_8_2_3_2.F,v 1.2 2004-12-11 00:06:38 edo Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h9 p15 h13 p3 )_vt + = -1/2 * Sum ( p5 ) * t ( p5 h13 )_t * v ( h9 p15 p3 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER p15b
      INTEGER h13b
      INTEGER p3b
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER h9b_2
      INTEGER p15b_2
      INTEGER p3b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h9
      INTEGER p15
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h9b = 1,noab
      DO p15b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p15b-
     &1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p3b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+p15b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+p15b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+p3b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p5b_1 = int_mb(k_alpha+p5b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p5b_1 = p5b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p15b-1)+i
     &nt_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1).eq.8)) THEN
      h9b_2 = int_mb(k_alpha+h9b-1)
      p15b_2 = int_mb(k_alpha+p15b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h9b_2 = h9b
      p15b_2 = p15b
      p3b_2 = p3b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+p15b-1) * int_m
     &b(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lambda1_8_2_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lambda1_8_2_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p5b_1 - noab - 1)))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p5 - 1))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h13 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lambda1_8_2_3_2',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt_lambda1_8_2_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt_lambda1_8_2_3_2',4,MA_ERR)
      IF ((p5b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - 1 
     &+ (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p15b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p5 - 1) + int_mb(k_range+p5
     &b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((h9 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p3b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - 1 
     &+ (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p15b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((h9 - 1))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((p3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt_lambda1_8_2_3_2',5
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdt_lambda1_8_2_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdt_lambda1_8_2_3_2',7,MA_ERR)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p15 = 1,int_mb(k_range+p15b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h13 + int_mb(k_range+h13b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((p3 - 1))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p15 - 1) + int_mb(k_range+p15b-1) * ((h9 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (h13b - 1 + noab * (p15b - noab - 1 +
     & nvab * (h9b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lambda1_8_2_3_2',8
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt_lambda1_8_2_3
     &_2',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt_lambda1_8_2_3
     &_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lambda1_8_2_3
     &_2',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
