      SUBROUTINE OFFSET_ccsdt_lambda1_18_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: OFFSET_ccsdt_lambda1_18_1.F,v 1.2 2004-12-11 00:06:29 edo Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h2 p13 p15 h12 h14 h16 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h2b
      INTEGER p13b
      INTEGER p15b
      INTEGER h12b
      INTEGER h14b
      INTEGER h16b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('ccsdt_lambda1_18_1',0,MA_ER
     &R)
      size = 0
      DO h2b = 1,noab
      DO p13b = noab+1,noab+nvab
      DO p15b = p13b,noab+nvab
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h16b = h14b,noab
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+p13b-1)+int_mb(k_spin+p15b-
     &1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+
     &h16b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_mb
     &(k_sym+p15b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1)
     &,int_mb(k_sym+h16b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p13b-
     &1)+int_mb(k_spin+p15b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h16b-1).ne.12)) THEN
      int_mb(k_a_offset + h16b - 1 + noab * (h14b - 1 + noab * (h12b - 1
     & + noab * (p15b - noab - 1 + nvab * (p13b - noab - 1 + nvab * (h2b
     & - 1)))))) = size
      size = size + int_mb(k_range+h2b-1) * int_mb(k_range+p13b-1) * int
     &_mb(k_range+p15b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+h14b
     &-1) * int_mb(k_range+h16b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
