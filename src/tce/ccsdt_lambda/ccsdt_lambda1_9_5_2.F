      SUBROUTINE ccsdt_lambda1_9_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdt_lambda1_9_5_2.F,v 1.2 2004-12-11 00:06:39 edo Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h12 p3 )_yt + = -5/18 * Sum ( h9 p8 p7 ) * t ( p7 p8 h9 h12 )_t * i3 ( h5 h6 h9 p3 p7 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h12b
      INTEGER p3b
      INTEGER p7b
      INTEGER p8b
      INTEGER h9b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h12b_1
      INTEGER h9b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h9b_2
      INTEGER p3b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER h9
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h5
      INTEGER h6
      INTEGER p3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h12b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p3b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &12b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h12b-1),int_mb(k_sym+p3b-1)))) .eq. ieor(irrep_y,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &12b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h12b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h12b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      h12b_1 = h12b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1)+int_m
     &b(k_spin+p8b-1).eq.12)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      h6b_2 = int_mb(k_alpha+h6b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p3b_2 = int_mb(k_alpha+p3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h5b_2 = h5b
      h6b_2 = h6b
      h9b_2 = h9b
      p3b_2 = p3b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_m
     &b(k_range+h9b-1)
      dima_sort = int_mb(k_range+h12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lambda1_9_5_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lambda1_9_5_2',1,MA_ERR)
      IF ((h9b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - 
     &noab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - 
     &noab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lambda1_9_5_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt_lambda1_9_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt_lambda1_9_5_2',4,MA_ERR)
      IF ((h9b .lt. h5b) .and. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nva
     &b * (h6b_2 - 1 + noab * (h5b_2 - 1 + noab * (h9b_2 - 1)))))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h9 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h5b) .and. (p7b .lt. p3b) .and. (p3b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nva
     &b * (h6b_2 - 1 + noab * (h5b_2 - 1 + noab * (h9b_2 - 1)))))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h9 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h5b) .and. (p3b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h6b_2 - 1 + noab * (h5b_2 - 1 + noab * (h9b_2 - 1)))))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h5 - 1) + int_mb(k_range+h5b-1) * ((h9 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h9b) .and. (h9b .lt. h6b) .and. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nva
     &b * (h6b_2 - 1 + noab * (h9b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h9b) .and. (h9b .lt. h6b) .and. (p7b .lt. p3b) .and.
     & (p3b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nva
     &b * (h6b_2 - 1 + noab * (h9b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h5b .le. h9b) .and. (h9b .lt. h6b) .and. (p3b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h6b_2 - 1 + noab * (h9b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h6 - 1) + int_mb(k_ra
     &nge+h6b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h9b) .and. (p8b .lt. p3b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p3b_2 - no
     &ab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nva
     &b * (h9b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimb = p3 + int_mb(k_range+p3b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h9 - 1) + int_mb(k_ra
     &nge+h9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h9b) .and. (p7b .lt. p3b) .and. (p3b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nva
     &b * (h9b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p3 - 1) + int_mb(k_range+p3
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((h9 - 1) + int_mb(k_ra
     &nge+h9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h6b .le. h9b) .and. (p3b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nva
     &b * (h9b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p3 - 1) + int_mb(k_range+p3b-1) * ((h9 - 1) + int_mb(k_ra
     &nge+h9b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h5 - 1) + int_mb
     &(k_range+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt_lambda1_9_5_2',5,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdt_lambda1_9_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdt_lambda1_9_5_2',7,MA_ERR)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h6 = 1,int_mb(k_range+h6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p3 = 1,int_mb(k_range+p3b-1)
      idimc_sort = h12 + int_mb(k_range+h12b-1) * ((h5 - 1) + int_mb(k_r
     &ange+h5b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((p3 - 1))))
      idimc = p3 + int_mb(k_range+p3b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((h6 - 1) + int_mb(k_range+h6b-1) * ((h5 - 1))))
      dbl_mb(k_c + idimc - 1) = -5.0d0/18.0d0 * dbl_mb(k_c_sort + idimc_
     &sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p3b - noab - 1 + nvab * (h12b - 1 + noab * (h6b - 1 + noab * 
     &(h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lambda1_9_5_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt_lambda1_9_5_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt_lambda1_9_5_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lambda1_9_5_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
