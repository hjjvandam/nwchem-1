      SUBROUTINE ccsdt_lambda1_5_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdt_lambda1_5_5.F,v 1.2 2004-12-11 00:06:36 edo Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p11 h10 )_ft + = 1 * Sum ( h5 p4 ) * t ( p4 p11 h5 h10 )_t * i2 ( h5 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p11b
      INTEGER h10b
      INTEGER p4b
      INTEGER h5b
      INTEGER p11b_1
      INTEGER p4b_1
      INTEGER h10b_1
      INTEGER h5b_1
      INTEGER h5b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p11
      INTEGER h5
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p11b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h10b-1)) .eq. ieor(irre
     &p_f,irrep_t)) THEN
      DO p4b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h10b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h10b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+p4b-1)+i
     &nt_mb(k_spin+h10b-1)+int_mb(k_spin+h5b-1).eq.8)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      p4b_1 = int_mb(k_alpha+p4b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      h5b_1 = int_mb(k_alpha+h5b-1)
      ELSE
      p11b_1 = p11b
      p4b_1 = p4b
      h10b_1 = h10b
      h5b_1 = h5b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p4b-1).eq
     &.4)) THEN
      h5b_2 = int_mb(k_alpha+h5b-1)
      p4b_2 = int_mb(k_alpha+p4b-1)
      ELSE
      h5b_2 = h5b
      p4b_2 = p4b
      END IF
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+p11b-1) * int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lambda1_5_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lambda1_5_5',1,MA_ERR)
      IF ((p4b .le. p11b) .and. (h5b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h5b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h5 - 1) + int_mb(k_range+
     &h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p11b) .and. (h10b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h5b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p11b_1 -
     & noab - 1)))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h5 - 1) + int_mb(k_range+
     &h5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p11b .lt. p4b) .and. (h10b .lt. h5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h5b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p11b_1 -
     & noab - 1)))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h5 = 1,int_mb(k_range+h5b-1)
      idima = h5 + int_mb(k_range+h5b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p11 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1) + int_mb(k_ran
     &ge+h5b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lambda1_5_5',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt_lambda1_5_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt_lambda1_5_5',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p4b_2 - no
     &ab - 1 + nvab * (h5b_2 - 1)))
      DO h5 = 1,int_mb(k_range+h5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      idimb = p4 + int_mb(k_range+p4b-1) * ((h5 - 1))
      idimb_sort = p4 + int_mb(k_range+p4b-1) * ((h5 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt_lambda1_5_5',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdt_lambda1_5_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdt_lambda1_5_5',7,MA_ERR)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idimc_sort = p11 + int_mb(k_range+p11b-1) * ((h10 - 1))
      idimc = h10 + int_mb(k_range+h10b-1) * ((p11 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h10b - 1 + noab * (p11b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lambda1_5_5',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt_lambda1_5_5',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt_lambda1_5_5',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lambda1_5_5',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
