      SUBROUTINE ccsdt_lambda2_23_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt_lambda2_23_3.F,v 1.2 2004-12-11 00:06:42 edo Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h3 p12 h13 p1 )_ytt + = -2 * Sum ( h7 h8 p5 ) * t ( p5 p12 h7 h8 )_t * i2 ( h3 h7 h8 h13 p1 p5 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER p12b
      INTEGER p1b
      INTEGER h13b
      INTEGER p5b
      INTEGER h7b
      INTEGER h8b
      INTEGER p12b_1
      INTEGER p5b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h3b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER h13b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p5
      INTEGER p12
      INTEGER h7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER p1
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO p12b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+p12b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h13b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+p12b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h13b-1)))) .eq. ieor(irrep_y,ieor(irrep
     &_t,irrep_t))) THEN
      DO p5b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p12b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p12b-1)+int_mb(k_spin+p5b-1)+i
     &nt_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p12b_1 = int_mb(k_alpha+p12b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p12b_1 = p12b
      p5b_1 = p5b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h13b-1)+int_
     &mb(k_spin+p5b-1).eq.12)) THEN
      h3b_2 = int_mb(k_alpha+h3b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      ELSE
      h3b_2 = h3b
      h7b_2 = h7b
      h8b_2 = h8b
      p1b_2 = p1b
      h13b_2 = h13b
      p5b_2 = p5b
      END IF
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lambda2_23_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lambda2_23_3',1,MA_ERR)
      IF ((p5b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p12b_1 - noab - 1 + nvab * (p5b_1 - 
     &noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p5 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p12b_1 - 
     &noab - 1)))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      idima_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lambda2_23_3',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt_lambda2_23_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt_lambda2_23_3',4,MA_ERR)
      IF ((h13b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p5b_2 - no
     &ab - 1 + nvab * (h13b_2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h
     &8b_2 - 1 + noab * (h7b_2 - 1 + noab * (h3b_2 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      idimb = p5 + int_mb(k_range+p5b-1) * ((h13 - 1) + int_mb(k_range+h
     &13b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h8 - 1) + int_mb(k_
     &range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h3 - 1))))))
      idimb_sort = p5 + int_mb(k_range+p5b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h13 - 1)))
     &)))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt_lambda2_23_3',5,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('ccsdt_lambda2_23_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('ccsdt_lambda2_23_3',7,MA_ERR)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idimc_sort = p12 + int_mb(k_range+p12b-1) * ((h3 - 1) + int_mb(k_r
     &ange+h3b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h13 - 1))))
      idimc = h13 + int_mb(k_range+h13b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = -2.0d0/1.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h13b - 1 + noab * (p1b - noab - 1 + nvab * (p12b - noab - 1 +
     & nvab * (h3b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lambda2_23_3',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt_lambda2_23_3'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt_lambda2_23_3'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lambda2_23_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
