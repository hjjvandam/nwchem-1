      SUBROUTINE eomccsdt_x3(d_f1,d_i0,d_t1,d_t2,d_t3,d_v2,d_x1,d_x2,d_x
     &3,k_f1_offset,k_i0_offset,k_t1_offset,k_t2_offset,k_t3_offset,k_v2
     &_offset,k_x1_offset,k_x2_offset,k_x3_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = -1 * P( 9 ) * Sum ( h11 ) * x ( p4 p5 h1 h11 )_x * i1 ( h11 p6 h2 h3 )_v
C         i1 ( h11 p4 h1 h2 )_v + = 1 * v ( h11 p4 h1 h2 )_v
C         i1 ( h11 p4 h1 h2 )_vt + = 1 * Sum ( h12 ) * t ( p4 h12 )_t * i2 ( h11 h12 h1 h2 )_v
C             i2 ( h11 h12 h1 h2 )_v + = -1 * v ( h11 h12 h1 h2 )_v
C             i2 ( h11 h12 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i3 ( h11 h12 h2 p8 )_v
C                 i3 ( h11 h12 h1 p8 )_v + = 1 * v ( h11 h12 h1 p8 )_v
C                 i3 ( h11 h12 h1 p8 )_vt + = -1/2 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h11 h12 p8 p9 )_v
C             i2 ( h11 h12 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h11 h12 p7 p8 )_v
C         i1 ( h11 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h11 p4 h2 p7 )_v
C             i2 ( h11 p4 h1 p7 )_v + = 1 * v ( h11 p4 h1 p7 )_v
C             i2 ( h11 p4 h1 p7 )_vt + = -1/2 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 p4 p7 p8 )_v
C         i1 ( h11 p4 h1 h2 )_ft + = -1 * Sum ( p10 ) * t ( p4 p10 h1 h2 )_t * i2 ( h11 p10 )_f
C             i2 ( h11 p10 )_f + = 1 * f ( h11 p10 )_f
C             i2 ( h11 p10 )_vt + = 1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h11 p8 p10 )_v
C         i1 ( h11 p4 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * i2 ( h8 h11 h2 p7 )_v
C             i2 ( h8 h11 h1 p7 )_v + = 1 * v ( h8 h11 h1 p7 )_v
C             i2 ( h8 h11 h1 p7 )_vt + = -1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h8 h11 p7 p9 )_v
C         i1 ( h11 p4 h1 h2 )_vt + = 1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h11 p4 p7 p8 )_v
C         i1 ( h11 p4 h1 h2 )_vt + = 1/2 * Sum ( h9 p7 p8 ) * t ( p4 p7 p8 h1 h2 h9 )_t * v ( h9 h11 p7 p8 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = -1 * P( 9 ) * Sum ( p12 ) * x ( p4 p12 h1 h2 )_x * i1 ( p5 p6 h3 p12 )_v
C         i1 ( p4 p5 h1 p12 )_v + = 1 * v ( p4 p5 h1 p12 )_v
C         i1 ( p4 p5 h1 p12 )_vt + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( p4 p5 p7 p12 )_v
C         i1 ( p4 p5 h1 p12 )_vt + = 1/2 * Sum ( h7 h8 ) * t ( p4 p5 h7 h8 )_t * i2 ( h7 h8 h1 p12 )_v
C             i2 ( h7 h8 h1 p12 )_v + = 1 * v ( h7 h8 h1 p12 )_v
C             i2 ( h7 h8 h1 p12 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h7 h8 p9 p12 )_v
C         i1 ( p4 p5 h1 p12 )_vt + = 1 * P( 2 ) * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * v ( h8 p5 p7 p12 )_v
C         i1 ( p4 p5 h1 p12 )_vt + = 1/2 * Sum ( h8 h9 p7 ) * t ( p4 p5 p7 h1 h8 h9 )_t * v ( h8 h9 p7 p12 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_xf + = -1 * P( 3 ) * Sum ( h10 ) * x ( p4 p5 p6 h1 h2 h10 )_x * i1 ( h10 h3 )_f
C         i1 ( h10 h1 )_f + = 1 * f ( h10 h1 )_f
C         i1 ( h10 h1 )_ft + = 1 * Sum ( p11 ) * t ( p11 h1 )_t * i2 ( h10 p11 )_f
C             i2 ( h10 p11 )_f + = 1 * f ( h10 p11 )_f
C             i2 ( h10 p11 )_vt + = 1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h10 p8 p11 )_v
C         i1 ( h10 h1 )_vt + = -1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h8 h10 h1 p7 )_v
C         i1 ( h10 h1 )_vt + = -1/2 * Sum ( h9 p7 p8 ) * t ( p7 p8 h1 h9 )_t * v ( h9 h10 p7 p8 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_xf + = 1 * P( 3 ) * Sum ( p10 ) * x ( p4 p5 p10 h1 h2 h3 )_x * i1 ( p6 p10 )_f
C         i1 ( p4 p10 )_f + = 1 * f ( p4 p10 )_f
C         i1 ( p4 p10 )_vt + = 1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h8 p4 p7 p10 )_v
C         i1 ( p4 p10 )_vt + = 1/2 * Sum ( h8 h9 p7 ) * t ( p4 p7 h8 h9 )_t * v ( h8 h9 p7 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = 1/2 * P( 3 ) * Sum ( h12 h11 ) * x ( p4 p5 p6 h1 h11 h12 )_x * i1 ( h11 h12 h2 h3 )_v
C         i1 ( h11 h12 h1 h2 )_v + = 1 * v ( h11 h12 h1 h2 )_v
C         i1 ( h11 h12 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h11 h12 h2 p7 )_v
C             i2 ( h11 h12 h1 p7 )_v + = 1 * v ( h11 h12 h1 p7 )_v
C             i2 ( h11 h12 h1 p7 )_vt + = -1/2 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 h12 p7 p8 )_v
C         i1 ( h11 h12 h1 h2 )_vt + = 1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h11 h12 p7 p8 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = -1 * P( 9 ) * Sum ( p10 h9 ) * x ( p4 p5 p10 h1 h2 h9 )_x * i1 ( h9 p6 h3 p10 )_v
C         i1 ( h9 p4 h1 p10 )_v + = 1 * v ( h9 p4 h1 p10 )_v
C         i1 ( h9 p4 h1 p10 )_vt + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( h9 p4 p7 p10 )_v
C         i1 ( h9 p4 h1 p10 )_vt + = -1 * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * v ( h8 h9 p7 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = 1/2 * P( 3 ) * Sum ( p8 p7 ) * x ( p4 p7 p8 h1 h2 h3 )_x * v ( p5 p6 p7 p8 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = 1 * P( 3 ) * Sum ( h11 ) * t ( p4 h11 )_t * i1 ( h11 p5 p6 h1 h2 h3 )_vx
C         i1 ( h11 p4 p5 h1 h2 h3 )_vx + = -1 * P( 6 ) * Sum ( p10 ) * x ( p4 p10 h1 h2 )_x * i2 ( h11 p5 h3 p10 )_v
C             i2 ( h11 p4 h1 p10 )_v + = 1 * v ( h11 p4 h1 p10 )_v
C             i2 ( h11 p4 h1 p10 )_vt + = 1/2 * Sum ( h8 ) * t ( p4 h8 )_t * i3 ( h8 h11 h1 p10 )_v
C                 i3 ( h8 h11 h1 p10 )_v + = 1 * v ( h8 h11 h1 p10 )_v
C                 i3 ( h8 h11 h1 p10 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h8 h11 p9 p10 )_v
C             i2 ( h11 p4 h1 p10 )_vt + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 p4 p8 p10 )_v
C             i2 ( h11 p4 h1 p10 )_vt + = -1 * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * v ( h8 h11 p7 p10 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_fx + = -1 * Sum ( p7 ) * x ( p4 p5 p7 h1 h2 h3 )_x * i2 ( h11 p7 )_f
C             i2 ( h11 p7 )_f + = 1 * f ( h11 p7 )_f
C             i2 ( h11 p7 )_vt + = -1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h11 p7 p8 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vx + = 1 * P( 3 ) * Sum ( h10 p7 ) * x ( p4 p5 p7 h1 h2 h10 )_x * i2 ( h10 h11 h3 p7 )_v
C             i2 ( h10 h11 h1 p7 )_v + = 1 * v ( h10 h11 h1 p7 )_v
C             i2 ( h10 h11 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h10 h11 p7 p8 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vx + = 1/2 * P( 2 ) * Sum ( p8 p9 ) * x ( p4 p8 p9 h1 h2 h3 )_x * v ( h11 p5 p8 p9 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = 1/4 * P( 2 ) * Sum ( h8 ) * t ( p4 h8 )_t * i2 ( h8 h11 p5 h1 h2 h3 )_vx
C             i2 ( h8 h11 p4 h1 h2 h3 )_vx + = -1 * Sum ( p9 p10 ) * x ( p4 p9 p10 h1 h2 h3 )_x * v ( h8 h11 p9 p10 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = -1 * P( 6 ) * Sum ( p7 ) * t ( p4 p7 h1 h2 )_t * i2 ( h11 p5 h3 p7 )_vx
C             i2 ( h11 p4 h1 p7 )_vx + = -1 * Sum ( p9 ) * x ( p9 h1 )_x * v ( h11 p4 p7 p9 )_v
C             i2 ( h11 p4 h1 p7 )_vx + = 1 * Sum ( h9 p10 ) * x ( p4 p10 h1 h9 )_x * v ( h9 h11 p7 p10 )_v
C             i2 ( h11 p4 h1 p7 )_vtx + = -1 * Sum ( h10 ) * x ( p4 h10 )_x * i3 ( h10 h11 h1 p7 )_vt
C                 i3 ( h10 h11 h1 p7 )_vt + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h10 h11 p7 p8 )_v
C             i2 ( h11 p4 h1 p7 )_vxt + = 1/2 * Sum ( h8 ) * t ( p4 h8 )_t * i3 ( h8 h11 h1 p7 )_vx
C                 i3 ( h8 h11 h1 p7 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h8 h11 p7 p10 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = -1 * Sum ( p7 ) * t ( p4 p5 p7 h1 h2 h3 )_t * i2 ( h11 p7 )_vx
C             i2 ( h11 p7 )_vx + = -1 * Sum ( h9 p10 ) * x ( p10 h9 )_x * v ( h9 h11 p7 p10 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vtx + = -1/2 * P( 2 ) * Sum ( h10 ) * x ( p4 h10 )_x * i2 ( h10 h11 p5 h1 h2 h3 )_vt
C             i2 ( h10 h11 p4 h1 h2 h3 )_vt + = 1 * Sum ( p7 p8 ) * t ( p4 p7 p8 h1 h2 h3 )_t * v ( h10 h11 p7 p8 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = -1 * P( 3 ) * Sum ( h8 p7 ) * t ( p4 p5 p7 h1 h2 h8 )_t * i2 ( h8 h11 h3 p7 )_vx
C             i2 ( h8 h11 h1 p7 )_vx + = 1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h8 h11 p7 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1 * P( 9 ) * Sum ( h12 ) * t ( p4 p5 h1 h12 )_t * i1 ( h12 p6 h2 h3 )_vx
C         i1 ( h12 p4 h1 h2 )_vx + = 1 * Sum ( h13 ) * x ( p4 h13 )_x * i2 ( h12 h13 h1 h2 )_v
C             i2 ( h12 h13 h1 h2 )_v + = -1 * v ( h12 h13 h1 h2 )_v
C             i2 ( h12 h13 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p9 ) * t ( p9 h1 )_t * i3 ( h12 h13 h2 p9 )_v
C                 i3 ( h12 h13 h1 p9 )_v + = 1 * v ( h12 h13 h1 p9 )_v
C                 i3 ( h12 h13 h1 p9 )_vt + = 1/2 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h12 h13 p8 p9 )_v
C             i2 ( h12 h13 h1 h2 )_vt + = -1/2 * Sum ( p8 p9 ) * t ( p8 p9 h1 h2 )_t * v ( h12 h13 p8 p9 )_v
C         i1 ( h12 p4 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( p8 ) * x ( p8 h1 )_x * v ( h12 p4 h2 p8 )_v
C         i1 ( h12 p4 h1 h2 )_fx + = -1 * Sum ( p7 ) * x ( p4 p7 h1 h2 )_x * i2 ( h12 p7 )_f
C             i2 ( h12 p7 )_f + = 1 * f ( h12 p7 )_f
C             i2 ( h12 p7 )_vt + = -1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h12 p7 p8 )_v
C         i1 ( h12 p4 h1 h2 )_vx + = 1 * P( 2 ) * Sum ( h10 p7 ) * x ( p4 p7 h1 h10 )_x * i2 ( h10 h12 h2 p7 )_v
C             i2 ( h10 h12 h1 p7 )_v + = 1 * v ( h10 h12 h1 p7 )_v
C             i2 ( h10 h12 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h10 h12 p7 p8 )_v
C         i1 ( h12 p4 h1 h2 )_vx + = 1/2 * Sum ( p8 p9 ) * x ( p8 p9 h1 h2 )_x * v ( h12 p4 p8 p9 )_v
C         i1 ( h12 p4 h1 h2 )_vx + = 1/2 * Sum ( h8 p9 p10 ) * x ( p4 p9 p10 h1 h2 h8 )_x * v ( h8 h12 p9 p10 )_v
C         i1 ( h12 p4 h1 h2 )_vxt + = 1 * Sum ( h11 ) * t ( p4 h11 )_t * i2 ( h11 h12 h1 h2 )_vx
C             i2 ( h11 h12 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( p9 ) * x ( p9 h1 )_x * v ( h11 h12 h2 p9 )_v
C             i2 ( h11 h12 h1 h2 )_vx + = 1/2 * Sum ( p9 p10 ) * x ( p9 p10 h1 h2 )_x * v ( h11 h12 p9 p10 )_v
C             i2 ( h11 h12 h1 h2 )_vxt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i3 ( h11 h12 h2 p8 )_vx
C                 i3 ( h11 h12 h1 p8 )_vx + = 1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h11 h12 p8 p10 )_v
C         i1 ( h12 p4 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h12 p4 h2 p8 )_vx
C             i2 ( h12 p4 h1 p8 )_vx + = -1 * Sum ( p9 ) * x ( p9 h1 )_x * v ( h12 p4 p8 p9 )_v
C         i1 ( h12 p4 h1 h2 )_vxt + = -1 * Sum ( p8 ) * t ( p4 p8 h1 h2 )_t * i2 ( h12 p8 )_vx
C             i2 ( h12 p8 )_vx + = -1 * Sum ( h9 p10 ) * x ( p10 h9 )_x * v ( h9 h12 p8 p10 )_v
C         i1 ( h12 p4 h1 h2 )_vxt + = 1 * P( 2 ) * Sum ( h9 p8 ) * t ( p4 p8 h1 h9 )_t * i2 ( h9 h12 h2 p8 )_vx
C             i2 ( h9 h12 h1 p8 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h9 h12 p8 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vtx + = 1 * P( 3 ) * Sum ( h11 ) * x ( p4 h11 )_x * i1 ( h11 p5 p6 h1 h2 h3 )_vt
C         i1 ( h11 p4 p5 h1 h2 h3 )_vt + = -1 * P( 6 ) * Sum ( p7 ) * t ( p4 p7 h1 h2 )_t * i2 ( h11 p5 h3 p7 )_v
C             i2 ( h11 p4 h1 p7 )_vt + = 1 * Sum ( h8 ) * t ( p4 h8 )_t * v ( h8 h11 h1 p7 )_v
C             i2 ( h11 p4 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 p4 p7 p8 )_v
C             i2 ( h11 p4 h1 p7 )_vt + = 1 * Sum ( h9 p8 ) * t ( p4 p8 h1 h9 )_t * v ( h9 h11 p7 p8 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_ft + = -1 * Sum ( p10 ) * t ( p4 p5 p10 h1 h2 h3 )_t * i2 ( h11 p10 )_f
C         i1 ( h11 p4 p5 h1 h2 h3 )_vt + = 1 * P( 3 ) * Sum ( h8 p7 ) * t ( p4 p5 p7 h1 h2 h8 )_t * i2 ( h8 h11 h3 p7 )_v
C         i1 ( h11 p4 p5 h1 h2 h3 )_vt + = 1/2 * P( 2 ) * Sum ( p7 p8 ) * t ( p4 p7 p8 h1 h2 h3 )_t * v ( h11 p5 p7 p8 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1 * P( 9 ) * Sum ( p7 ) * t ( p4 p7 h1 h2 )_t * i1 ( p5 p6 h3 p7 )_vx
C         i1 ( p4 p5 h1 p7 )_vx + = -1 * Sum ( p8 ) * x ( p8 h1 )_x * v ( p4 p5 p7 p8 )_v
C         i1 ( p4 p5 h1 p7 )_vx + = 1/2 * Sum ( h11 h12 ) * x ( p4 p5 h11 h12 )_x * i2 ( h11 h12 h1 p7 )_v
C             i2 ( h11 h12 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 h12 p7 p8 )_v
C         i1 ( p4 p5 h1 p7 )_vx + = -1 * P( 2 ) * Sum ( h8 p9 ) * x ( p4 p9 h1 h8 )_x * v ( h8 p5 p7 p9 )_v
C         i1 ( p4 p5 h1 p7 )_vx + = -1/2 * Sum ( h8 h9 p10 ) * x ( p4 p5 p10 h1 h8 h9 )_x * v ( h8 h9 p7 p10 )_v
C         i1 ( p4 p5 h1 p7 )_vxt + = 1/2 * Sum ( h8 h9 ) * t ( p4 p5 h8 h9 )_t * i2 ( h8 h9 h1 p7 )_vx
C             i2 ( h8 h9 h1 p7 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h8 h9 p7 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1/4 * P( 3 ) * Sum ( h7 h8 ) * t ( p4 p5 h7 h8 )_t * i1 ( h7 h8 p6 h1 h2 h3 )_vx
C         i1 ( h7 h8 p4 h1 h2 h3 )_vx + = -1 * Sum ( p9 p10 ) * x ( p4 p9 p10 h1 h2 h3 )_x * v ( h7 h8 p9 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_fxt + = -1 * P( 3 ) * Sum ( h7 ) * t ( p4 p5 p6 h1 h2 h7 )_t * i1 ( h7 h3 )_fx
C         i1 ( h7 h1 )_fx + = 1 * Sum ( p11 ) * x ( p11 h1 )_x * i2 ( h7 p11 )_f
C             i2 ( h7 p11 )_f + = 1 * f ( h7 p11 )_f
C             i2 ( h7 p11 )_vt + = -1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h7 h9 p8 p11 )_v
C         i1 ( h7 h1 )_vx + = 1 * Sum ( h8 p9 ) * x ( p9 h8 )_x * v ( h7 h8 h1 p9 )_v
C         i1 ( h7 h1 )_vx + = 1/2 * Sum ( h8 p9 p10 ) * x ( p9 p10 h1 h8 )_x * v ( h7 h8 p9 p10 )_v
C         i1 ( h7 h1 )_vxt + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h7 p8 )_vx
C             i2 ( h7 p8 )_vx + = 1 * Sum ( h9 p10 ) * x ( p10 h9 )_x * v ( h7 h9 p8 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = 1/2 * P( 3 ) * Sum ( h7 h8 ) * t ( p4 p5 p6 h1 h7 h8 )_t * i1 ( h7 h8 h2 h3 )_vx
C         i1 ( h7 h8 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( p9 ) * x ( p9 h1 )_x * v ( h7 h8 h2 p9 )_v
C         i1 ( h7 h8 h1 h2 )_vx + = 1/2 * Sum ( p9 p10 ) * x ( p9 p10 h1 h2 )_x * v ( h7 h8 p9 p10 )_v
C         i1 ( h7 h8 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p9 ) * t ( p9 h1 )_t * i2 ( h7 h8 h2 p9 )_vx
C             i2 ( h7 h8 h1 p9 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h7 h8 p9 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = 1 * P( 3 ) * Sum ( p7 ) * t ( p4 p5 p7 h1 h2 h3 )_t * i1 ( p6 p7 )_vx
C         i1 ( p4 p7 )_vx + = -1 * Sum ( h8 p9 ) * x ( p9 h8 )_x * v ( h8 p4 p7 p9 )_v
C         i1 ( p4 p7 )_vx + = -1/2 * Sum ( h8 h9 p10 ) * x ( p4 p10 h8 h9 )_x * v ( h8 h9 p7 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1 * P( 9 ) * Sum ( h8 p7 ) * t ( p4 p5 p7 h1 h2 h8 )_t * i1 ( h8 p6 h3 p7 )_vx
C         i1 ( h8 p4 h1 p7 )_vx + = -1 * Sum ( p9 ) * x ( p9 h1 )_x * v ( h8 p4 p7 p9 )_v
C         i1 ( h8 p4 h1 p7 )_vx + = -1 * Sum ( h9 p10 ) * x ( p4 p10 h1 h9 )_x * v ( h8 h9 p7 p10 )_v
C     i0 ( p4 p5 p6 h1 h2 h3 )_vtx + = 1/4 * P( 3 ) * Sum ( h9 h10 ) * x ( p4 p5 h9 h10 )_x * i1 ( h9 h10 p6 h1 h2 h3 )_vt
C         i1 ( h9 h10 p4 h1 h2 h3 )_vt + = 1 * Sum ( p7 p8 ) * t ( p4 p7 p8 h1 h2 h3 )_t * v ( h9 h10 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_x2
      INTEGER k_x2_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_x3
      INTEGER k_x3_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER d_x1
      INTEGER k_x1_offset
      INTEGER d_t3
      INTEGER k_t3_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      INTEGER d_i3
      INTEGER k_i3_offset
      INTEGER l_i3_offset
      INTEGER size_i3
      INTEGER d_f1
      INTEGER k_f1_offset
      CHARACTER*255 filename
      CALL OFFSET_eomccsdt_x3_1_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_1_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_eomccsdt_x3_1_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_1_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_1_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL OFFSET_eomccsdt_x3_1_2_2_1(d_i3,l_i3_offset,k_i3_offset,size_
     &i3)
      CALL TCE_FILENAME('eomccsdt_x3_1_2_2_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL eomccsdt_x3_1_2_2_1(d_v2,k_v2_offset,d_i3,k_i3_offset)
      CALL eomccsdt_x3_1_2_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i3,k_
     &i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL eomccsdt_x3_1_2_2(d_t1,k_t1_offset,d_i3,k_i3_offset,d_i2,k_i2
     &_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('eomccsdt_x3_1_2'
     &,-1,MA_ERR)
      CALL eomccsdt_x3_1_2_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_1_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_1',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_1_3_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_1_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_1_3_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_1_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_1_3(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_1',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_1_4_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_1_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_1_4_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_1_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_1_4(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_1',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_1_5_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_1_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_1_5_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_1_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_1_5(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_1',-
     &1,MA_ERR)
      CALL eomccsdt_x3_1_6(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL eomccsdt_x3_1_7(d_t3,k_t3_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_1(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_2_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_2_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL eomccsdt_x3_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL OFFSET_eomccsdt_x3_2_3_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_2_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_2_3_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_2_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_2_3(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_2',-
     &1,MA_ERR)
      CALL eomccsdt_x3_2_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL eomccsdt_x3_2_5(d_t3,k_t3_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_2(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_3_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_3_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_3_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_eomccsdt_x3_3_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_3_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_3_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_3_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_3_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_3',-
     &1,MA_ERR)
      CALL eomccsdt_x3_3_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL eomccsdt_x3_3_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_3(d_x3,k_x3_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_4_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_4_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL eomccsdt_x3_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL eomccsdt_x3_4_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_4(d_x3,k_x3_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_5_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_5_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_eomccsdt_x3_5_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_5_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_5_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_5_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_5_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_5',-
     &1,MA_ERR)
      CALL eomccsdt_x3_5_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_5(d_x3,k_x3_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_6_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_6_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL eomccsdt_x3_6_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL eomccsdt_x3_6_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_6(d_x3,k_x3_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL eomccsdt_x3_7(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i0,k_i0_off
     &set)
      CALL OFFSET_eomccsdt_x3_8_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_8_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_eomccsdt_x3_8_1_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_1_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL OFFSET_eomccsdt_x3_8_1_2_1(d_i3,l_i3_offset,k_i3_offset,size_
     &i3)
      CALL TCE_FILENAME('eomccsdt_x3_8_1_2_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL eomccsdt_x3_8_1_2_1(d_v2,k_v2_offset,d_i3,k_i3_offset)
      CALL eomccsdt_x3_8_1_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i3,k_
     &i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL eomccsdt_x3_8_1_2(d_t1,k_t1_offset,d_i3,k_i3_offset,d_i2,k_i2
     &_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('eomccsdt_x3_8_1'
     &,-1,MA_ERR)
      CALL eomccsdt_x3_8_1_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL eomccsdt_x3_8_1_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_1(d_x2,k_x2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_2_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_8_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_2(d_x3,k_x3_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_3_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_3_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_8_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_3(d_x3,k_x3_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL eomccsdt_x3_8_4(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL OFFSET_eomccsdt_x3_8_5_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_5_1(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_5(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_6_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_6_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_6_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL eomccsdt_x3_8_6_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL OFFSET_eomccsdt_x3_8_6_3_1(d_i3,l_i3_offset,k_i3_offset,size_
     &i3)
      CALL TCE_FILENAME('eomccsdt_x3_8_6_3_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL eomccsdt_x3_8_6_3_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i3,k_
     &i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL eomccsdt_x3_8_6_3(d_x1,k_x1_offset,d_i3,k_i3_offset,d_i2,k_i2
     &_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('eomccsdt_x3_8_6'
     &,-1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_6_4_1(d_i3,l_i3_offset,k_i3_offset,size_
     &i3)
      CALL TCE_FILENAME('eomccsdt_x3_8_6_4_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL eomccsdt_x3_8_6_4_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i3,k_
     &i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL eomccsdt_x3_8_6_4(d_t1,k_t1_offset,d_i3,k_i3_offset,d_i2,k_i2
     &_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('eomccsdt_x3_8_6'
     &,-1,MA_ERR)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_6(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_7_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_7_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_7_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_7(d_t3,k_t3_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_8_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_8_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_8_1(d_t3,k_t3_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_8(d_x1,k_x1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_8_9_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_8_9_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_8_9_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_8_9(d_t3,k_t3_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_8',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_8(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_9_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_9_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_eomccsdt_x3_9_1_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_9_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_1_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL OFFSET_eomccsdt_x3_9_1_2_1(d_i3,l_i3_offset,k_i3_offset,size_
     &i3)
      CALL TCE_FILENAME('eomccsdt_x3_9_1_2_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL eomccsdt_x3_9_1_2_1(d_v2,k_v2_offset,d_i3,k_i3_offset)
      CALL eomccsdt_x3_9_1_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i3,k_
     &i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL eomccsdt_x3_9_1_2(d_t1,k_t1_offset,d_i3,k_i3_offset,d_i2,k_i2
     &_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('eomccsdt_x3_9_1'
     &,-1,MA_ERR)
      CALL eomccsdt_x3_9_1_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_1(d_x1,k_x1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL eomccsdt_x3_9_2(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL OFFSET_eomccsdt_x3_9_3_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_9_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_3_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_9_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_3(d_x2,k_x2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_9_4_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_9_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_4_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_9_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_4(d_x2,k_x2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL eomccsdt_x3_9_5(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL eomccsdt_x3_9_6(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i1,k_i1_o
     &ffset)
      CALL OFFSET_eomccsdt_x3_9_7_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_9_7_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_7_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL eomccsdt_x3_9_7_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL OFFSET_eomccsdt_x3_9_7_3_1(d_i3,l_i3_offset,k_i3_offset,size_
     &i3)
      CALL TCE_FILENAME('eomccsdt_x3_9_7_3_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL eomccsdt_x3_9_7_3_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i3,k_
     &i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL eomccsdt_x3_9_7_3(d_t1,k_t1_offset,d_i3,k_i3_offset,d_i2,k_i2
     &_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('eomccsdt_x3_9_7'
     &,-1,MA_ERR)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_7(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_9_8_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_9_8_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_8_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_8(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_9_9_1(d_i2,l_i2_offset,k_i2_offset,size_i2
     &)
      CALL TCE_FILENAME('eomccsdt_x3_9_9_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_9_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i2
     &_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_9(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_o
     &ffset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_9_10_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_9_10_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_9_10_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_9_10(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_9',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_9(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_off
     &set)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_10_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_10_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_eomccsdt_x3_10_1_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_10_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_10_1_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_10_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL eomccsdt_x3_10_1_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL eomccsdt_x3_10_1_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_10_1(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_10',
     &-1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_10_2_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_10_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_10_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_10_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_10_2(d_t3,k_t3_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_10',
     &-1,MA_ERR)
      CALL OFFSET_eomccsdt_x3_10_3_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_10_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_10_3_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_10_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_10_3(d_t3,k_t3_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_10',
     &-1,MA_ERR)
      CALL eomccsdt_x3_10_4(d_t3,k_t3_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_10(d_x1,k_x1_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_11_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_11_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_11_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL OFFSET_eomccsdt_x3_11_2_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_11_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_11_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_11_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_11_2(d_x2,k_x2_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_11',
     &-1,MA_ERR)
      CALL eomccsdt_x3_11_3(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL eomccsdt_x3_11_4(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL OFFSET_eomccsdt_x3_11_5_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_11_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_11_5_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_11_5(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_11',
     &-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_11(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_12_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_12_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_12_1(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_12(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_13_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_13_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_eomccsdt_x3_13_1_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_13_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_13_1_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL eomccsdt_x3_13_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_13_1(d_x1,k_x1_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_13',
     &-1,MA_ERR)
      CALL eomccsdt_x3_13_2(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL eomccsdt_x3_13_3(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL OFFSET_eomccsdt_x3_13_4_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_13_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_13_4_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_13_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_13',
     &-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_13(d_t3,k_t3_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_14_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_14_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_14_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL eomccsdt_x3_14_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL OFFSET_eomccsdt_x3_14_3_1(d_i2,l_i2_offset,k_i2_offset,size_i
     &2)
      CALL TCE_FILENAME('eomccsdt_x3_14_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL eomccsdt_x3_14_3_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL eomccsdt_x3_14_3(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('eomccsdt_x3_14',
     &-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_14(d_t3,k_t3_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_15_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_15_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_15_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL eomccsdt_x3_15_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_15(d_t3,k_t3_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_16_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_16_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_16_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL eomccsdt_x3_16_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_16(d_t3,k_t3_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      CALL OFFSET_eomccsdt_x3_17_1(d_i1,l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('eomccsdt_x3_17_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL eomccsdt_x3_17_1(d_t3,k_t3_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL eomccsdt_x3_17(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('eomccsdt_x3',-1,
     &MA_ERR)
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = -1 * P( 9 ) * Sum ( h11 ) * x ( p4 p5 h1 h11 )_x * i1 ( h11 p6 h2 h3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h11b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER p6b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h11
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_v)) THEN
      DO h11b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h11b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h1b_1 = h1b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1).eq.8)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p6b_2 = p6b
      h11b_2 = h11b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h2b-1) * int_mb
     &(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1',1,MA_ERR)
      IF ((h11b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h11b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (p6b_2 - noab - 
     &1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p6 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((p6 - 1) + int_mb(k_r
     &ange+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1',7,MA_ERR)
      IF ((p5b .le. p6b) .and. (h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h1b .le. h2b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h2b .le. h1b) .and.
     & (h1b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_v + = 1 * v ( h11 p4 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_1',1,MA_ERR)
      IF ((h11b .le. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + (noab+nvab
     &) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_1_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_1',4,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_1',5,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_1_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_1_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 +
     & noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_vt + = 1 * Sum ( h12 ) * t ( p4 h12 )_t * i2 ( h11 h12 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h12b
      INTEGER p4b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h1
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO h12b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p4b_1 = p4b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h1b_2 = h1b
      h2b_2 = h2b
      END IF
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((p4 - 1))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_2',4,MA_ERR)
      IF ((h12b .lt. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h2b_2 - 1 
     &+ noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimb = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h2b_2 - 1 
     &+ noab * (h1b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimb = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_v + = -1 * v ( h11 h12 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER h12
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      h11b_1 = h11b
      h12b_1 = h12b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_2_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_1_2_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h2b -
     & 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_2_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_1_2_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_1_2_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 +
     & noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i3 ( h11 h12 h2 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h2b_2 = h2b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_2_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_2_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_2_2',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_2_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 h12 h1 p8 )_v + = 1 * v ( h11 h12 h1 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h1b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER h12
      INTEGER h1
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_1 = h11b
      h12b_1 = h12b
      h1b_1 = h1b
      p8b_1 = p8b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_2_1',1,MA_ERR)
      IF ((h1b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_2_2_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_1_2_2_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p8b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_2_2_1',4,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2_1
     &',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_1_2_2_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 h12 h1 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_1_2_2_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 h12 h1 p8 )_vt + = -1/2 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h11 h12 p8 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p8b_2 = p8b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_2_2',4,MA_ERR)
      IF ((p9b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_2_2_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(h11b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_2_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h11 h12 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_2_3',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_2_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_2_3',5,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_2_3',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_2_3',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_3',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_3',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_2_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h11 p4 h2 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER h11
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p7b_1 = p7b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p4b_2 = p4b
      h11b_2 = h11b
      h2b_2 = h2b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (p4b_2 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_3',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_3',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_v + = 1 * v ( h11 p4 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p4
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_3_1',1,MA_ERR)
      IF ((h11b .le. p4b) .and. (h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + (noab+nvab
     &) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_3_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_1_3_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_3_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_3_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_1_3_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_1_3_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vt + = -1/2 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 p4 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p4
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_3_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_3_2',4,MA_ERR)
      IF ((h11b .le. p4b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .le. p4b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_3_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_3_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_3_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_3_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_3_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_3_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_ft + = -1 * Sum ( p10 ) * t ( p4 p10 h1 h2 )_t * i2 ( h11 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h11b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep_t)) T
     &HEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b-1).
     &eq.4)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_4',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_4',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (h11b_2 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_4',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_4',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h11 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_4',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_4',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_4',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p10 )_f + = 1 * f ( h11 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p10b
      INTEGER h11b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b-1).
     &eq.4)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_1 = h11b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - 1
     & + (noab+nvab) * (h11b_1 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_4_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_1_4_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_4_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_4_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_1_4_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER p10b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_1_4_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      int_mb(k_a_offset + p10b - noab - 1 + nvab * (h11b - 1)) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p10 )_vt + = 1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h11 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p10b
      INTEGER p8b
      INTEGER h9b
      INTEGER p8b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p10b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p10b-1)) .eq. ieor(irre
     &p_v,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p8b_1 = p8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p10b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p10b_2 = p10b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_4_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_4_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_4_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_4_2',4,MA_ERR)
      IF ((h9b .le. h11b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h11b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_4_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_4_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = h11 + int_mb(k_range+h11b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_4_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_4_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_4_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_4_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * i2 ( h8 h11 h2 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h2b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      h2b_2 = h2b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_5',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_5',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_5',4,MA_ERR)
      IF ((h8b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h8b_2 - 
     &1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h8b_2 - 1 + noab * (h11b_2 - 
     &1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_5',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_5',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_5',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_5',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_5',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_5',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_v + = 1 * v ( h8 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER h8b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h8
      INTEGER h11
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h8b_1 = int_mb(k_alpha+h8b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h8b_1 = h8b
      h11b_1 = h11b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_5_1',1,MA_ERR)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + (noab+nva
     &b) * (h8b_1 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_5_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_1_5_1',3,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h8b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_5_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_5_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_1_5_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_1_5_1',0,MA_ERR)
      size = 0
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (h8b - 1)))) = size
      size = size + int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_vt + = -1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h8 h11 p7 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h8b_2 = h8b
      h11b_2 = h11b
      p7b_2 = p7b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_5_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_5_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_5_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_5_2',4,MA_ERR)
      IF ((p9b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_5_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_5_2',7,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_5_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_5_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_5_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_5_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_vt + = 1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h11 p4 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_6',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_6',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_6',4,MA_ERR)
      IF ((h11b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_6',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_6',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_6',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_6',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_6',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_6',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_1_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 h1 h2 )_vt + = 1/2 * Sum ( h9 p7 p8 ) * t ( p4 p7 p8 h1 h2 h9 )_t * v ( h9 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER p4
      INTEGER h9
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h9b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h9b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h9b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_m
     &b(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_1_7',1,MA_ERR)
      IF ((p8b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .lt. p4b) .and. (h1b .le. h9b) .and. (h9b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .lt. p4b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b) .and. (h1b .le. h9b) .and.
     & (h9b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h1b .le. h9b) .and. (h9b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_1_7',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_1_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_1_7',4,MA_ERR)
      IF ((h9b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_1_7',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_1_7',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h11 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_1_7',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_1_7',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_1_7',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_1_7',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = -1 * P( 9 ) * Sum ( p12 ) * x ( p4 p12 h1 h2 )_x * i1 ( p5 p6 h3 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p12b
      INTEGER p4b_1
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER h3b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p12
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p6
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_v)) THEN
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p12b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p12b_1 = int_mb(k_alpha+p12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p12b_1 = p12b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h3b-1)+int_mb(k_spin+p12b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p12b_2 = int_mb(k_alpha+p12b-1)
      ELSE
      p5b_2 = p5b
      p6b_2 = p6b
      h3b_2 = h3b
      p12b_2 = p12b
      END IF
      dim_common = int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2',1,MA_ERR)
      IF ((p12b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p12b_1 - 
     &noab - 1)))))
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p12 - 1))))
      idima_sort = p12 + int_mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p12b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p12 - 1) + int_mb(k_range+p12b-1) * ((p4 - 1))))
      idima_sort = p12 + int_mb(k_range+p12b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p12b_2 - n
     &oab - 1 + nvab * (h3b_2 - 1 + noab * (p6b_2 - noab - 1 + nvab * (p
     &5b_2 - noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimb = p12 + int_mb(k_range+p12b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idimb_sort = p12 + int_mb(k_range+p12b-1) * ((p5 - 1) + int_mb(k_r
     &ange+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_2',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_2',7,MA_ERR)
      IF ((p4b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b) .and. (h1b .le. h3b) .and.
     & (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_2',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_v + = 1 * v ( p4 p5 h1 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p12b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER p12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p12b_1 = int_mb(k_alpha+p12b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h1b_1 = h1b
      p12b_1 = p12b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_1',1,MA_ERR)
      IF ((h1b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p12b_1 - 1
     & + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noab+nva
     &b) * (p4b_1 - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_2_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p12b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + nvab * (p4
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_1',4,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_1',5,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_2_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_2_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      int_mb(k_a_offset + p12b - noab - 1 + nvab * (h1b - 1 + noab * (p5
     &b - noab - 1 + nvab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p12b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_vt + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( p4 p5 p7 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p12b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER p5
      INTEGER p12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p7b_1 = p7b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p12b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p12b_2 = int_mb(k_alpha+p12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p4b_2 = p4b
      p5b_2 = p5b
      p12b_2 = p12b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_2_2',4,MA_ERR)
      IF ((p7b .le. p12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p12b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nva
     &b) * (p4b_2 - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimb = p12 + int_mb(k_range+p12b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nva
     &b) * (p4b_2 - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p12 - 1) + int_mb(k_range+p
     &12b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_2_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_2_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p12b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + 
     &nvab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_vt + = 1/2 * Sum ( h7 h8 ) * t ( p4 p5 h7 h8 )_t * i2 ( h7 h8 h1 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      INTEGER h7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER p12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p12b_2 = int_mb(k_alpha+p12b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      h1b_2 = h1b
      p12b_2 = p12b
      END IF
      dim_common = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+p12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_2_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p12b_2 - n
     &oab - 1 + nvab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimb = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_2_3',5,MA_ER
     &R)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_2_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p12b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + 
     &nvab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_2_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h8 h1 p12 )_v + = 1 * v ( h7 h8 h1 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p12b
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h1b_1
      INTEGER p12b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h7
      INTEGER h8
      INTEGER h1
      INTEGER p12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).eq.8)) THEN
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p12b_1 = int_mb(k_alpha+p12b-1)
      ELSE
      h7b_1 = h7b
      h8b_1 = h8b
      h1b_1 = h1b
      p12b_1 = p12b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+p12b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_3_1',1,MA_ERR)
      IF ((h1b .le. p12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p12b_1 - 1
     & + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h8b_1 - 1 + (noab+nva
     &b) * (h7b_1 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_3_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_2_3_1',3,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p12b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (h7b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_3_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_3_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_2_3_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h8 h1 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p12b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_2_3_1',0,MA_ERR)
      size = 0
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      int_mb(k_a_offset + p12b - noab - 1 + nvab * (h1b - 1 + noab * (h8
     &b - 1 + noab * (h7b - 1)))) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p12b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h8 h1 p12 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h7 h8 p9 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p12b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p12b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER p12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p12b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p12b_2 = int_mb(k_alpha+p12b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p12b_2 = p12b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_3_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_2_3_2',4,MA_ERR)
      IF ((p9b .le. p12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p12b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimb = p12 + int_mb(k_range+p12b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p12 - 1) + int_mb(k_range+p
     &12b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_2_3_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_2_3_2',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p12b - noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * 
     &(h7b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_3_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_3_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_2_3_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_3_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_vt + = 1 * P( 2 ) * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * v ( h8 p5 p7 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER p5b_2
      INTEGER h8b_2
      INTEGER p12b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p12b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p12b_2 = int_mb(k_alpha+p12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p5b_2 = p5b
      h8b_2 = h8b
      p12b_2 = p12b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_4',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_4',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_2_4',4,MA_ERR)
      IF ((h8b .le. p5b) .and. (p7b .le. p12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p12b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimb = p12 + int_mb(k_range+p12b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. p5b) .and. (p12b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p12 - 1) + int_mb(k_range+p
     &12b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_2_4',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_2_4',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p12b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + 
     &nvab * (p4b - noab - 1)))))
      END IF
      IF ((p5b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p12b - noab - 1 + nvab * (h1b - 1 + noab * (p4b - noab - 1 + 
     &nvab * (p5b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_4',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_4',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_2_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_4',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p12 )_vt + = 1/2 * Sum ( h8 h9 p7 ) * t ( p4 p5 p7 h1 h8 h9 )_t * v ( h8 h9 p7 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p12b
      INTEGER p7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p12b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h8
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p12b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p12b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p12b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h8b-1),int
     &_mb(k_sym+h9b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)+int_m
     &b(k_spin+h9b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p12b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p12b_2 = int_mb(k_alpha+p12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p12b_2 = p12b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1) * int_m
     &b(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_2_5',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h8b .lt. h1b) .and.
     & (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h8b .lt. h1b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_mb
     &(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_2_5',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_2_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_2_5',4,MA_ERR)
      IF ((p7b .le. p12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p12b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimb = p12 + int_mb(k_range+p12b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p12b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p12 - 1) + int_mb(k_range+p
     &12b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_2_5',5,MA_ER
     &R)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_2_5',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p12 = 1,int_mb(k_range+p12b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p12 - 1))))
      idimc = p12 + int_mb(k_range+p12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p12b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + 
     &nvab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_2_5',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_2_5',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_2_5',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_2_5',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xf + = -1 * P( 3 ) * Sum ( h10 ) * x ( p4 p5 p6 h1 h2 h10 )_x * i1 ( h10 h3 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h10b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_1
      INTEGER h10b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h10
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_f)) THEN
      DO h10b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h10b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h2b_1 = h2b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h3b-1).e
     &q.4)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      h10b_2 = h10b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3',1,MA_ERR)
      IF ((h10b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p6 - 1) + int_mb(k_
     &range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_
     &mb(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h10b) .and. (h10b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_
     &range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_
     &mb(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_
     &range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_
     &mb(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h10b_2 - 1)))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h10 - 1))
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_3',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_3',7,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_3',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 h1 )_f + = 1 * f ( h10 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h1b
      INTEGER h10b_1
      INTEGER h1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      h10b_1 = int_mb(k_alpha+h10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      h10b_1 = h10b
      h1b_1 = h1b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ (noab+nvab) * (h10b_1 - 1)))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_3_1',3,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h1b -
     & 1 + noab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3_1',4,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3_1',5,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_3_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h10b
      INTEGER h1b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_3_1',0,MA_ERR)
      size = 0
      DO h10b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + h1b - 1 + noab * (h10b - 1)) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 h1 )_ft + = 1 * Sum ( p11 ) * t ( p11 h1 )_t * i2 ( h10 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h1b
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep
     &_f,irrep_t)) THEN
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p11b_1 = p11b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1).
     &eq.4)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h10b_2 = h10b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p11 - 1))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_3_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (h10b_2 - 1)))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((h10 - 1))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h10 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_3_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_3_2',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_3_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p11 )_f + = 1 * f ( h10 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p11b
      INTEGER h10b_1
      INTEGER p11b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h10
      INTEGER p11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-1)) .eq. irrep_f) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1).
     &eq.4)) THEN
      h10b_1 = int_mb(k_alpha+h10b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      ELSE
      h10b_1 = h10b
      p11b_1 = p11b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - 1
     & + (noab+nvab) * (h10b_1 - 1)))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((h10 - 1))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p11 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3_2_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_3_2_1',3,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p11 - 1))
      idimc = p11 + int_mb(k_range+p11b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p11b 
     &- noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3_2_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3_2_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_3_2_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h10b
      INTEGER p11b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_3_2_1',0,MA_ERR)
      size = 0
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b
     &-1).ne.4)) THEN
      int_mb(k_a_offset + p11b - noab - 1 + nvab * (h10b - 1)) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+p11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p11 )_vt + = 1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h10 p8 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p11b
      INTEGER p8b
      INTEGER h9b
      INTEGER p8b_1
      INTEGER h9b_1
      INTEGER h10b_2
      INTEGER h9b_2
      INTEGER p11b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER p11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-1)) .eq. ieor(irre
     &p_v,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p8b_1 = p8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p11b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_2 = h10b
      h9b_2 = h9b
      p11b_2 = p11b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3_2_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_3_2_2',4,MA_ERR)
      IF ((h9b .le. h10b) .and. (p8b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h10b) .and. (p11b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h9b) .and. (p8b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h9b) .and. (p11b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_3_2_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_3_2_2',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimc_sort = h10 + int_mb(k_range+h10b-1) * ((p11 - 1))
      idimc = p11 + int_mb(k_range+p11b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p11b - noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3_2_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_2_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_3_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3_2_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 h1 )_vt + = -1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h8 h10 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h1b
      INTEGER p7b
      INTEGER h8b
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER h10b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h10b_2 = h10b
      h8b_2 = h8b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_3_3',4,MA_ERR)
      IF ((h8b .le. h10b) .and. (h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h8b) .and. (h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h10 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_3_3',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_3_3',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h10 + int_mb(k_range+h10b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_3_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_3_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 h1 )_vt + = -1/2 * Sum ( h9 p7 p8 ) * t ( p7 p8 h1 h9 )_t * v ( h9 h10 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER h9b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h10b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_2 = h10b
      h9b_2 = h9b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_m
     &b(k_range+h9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_3_4',1,MA_ERR)
      IF ((h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_3_4',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_3_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_3_4',4,MA_ERR)
      IF ((h9b .le. h10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h10b .lt. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_3_4',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_3_4',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h10 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_3_4',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_3_4',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_3_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_3_4',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xf + = 1 * P( 3 ) * Sum ( p10 ) * x ( p4 p5 p10 h1 h2 h3 )_x * i1 ( p6 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p6b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_f)) THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+p10b-1).e
     &q.4)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      p6b_2 = p6b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_4',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_4',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (p6b_2 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p6 - 1))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((p6 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_4',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_4',7,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_4',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_4',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_4',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p10 )_f + = 1 * f ( p4 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      p4b_1 = p4b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - 1
     & + (noab+nvab) * (p4b_1 - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((p4 - 1))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_4_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_4_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((p4 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (p4b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_4_1',4,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_4_1',5,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_4_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER p10b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_4_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p10b - noab - 1 + nvab * (p4b - noab - 1)) = s
     &ize
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p10 )_vt + = 1 * Sum ( h8 p7 ) * t ( p7 h8 )_t * v ( h8 p4 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p10b
      INTEGER p7b
      INTEGER h8b
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER p4b_2
      INTEGER h8b_2
      INTEGER p10b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p10b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p7b_1 = p7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p4b_2 = p4b
      h8b_2 = h8b
      p10b_2 = p10b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_4_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_4_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_4_2',4,MA_ERR)
      IF ((h8b .le. p4b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. p4b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_4_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_4_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((p4 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (p4b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_4_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_4_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_4_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_4_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p10 )_vt + = 1/2 * Sum ( h8 h9 p7 ) * t ( p4 p7 h8 h9 )_t * v ( h8 h9 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p10b
      INTEGER p7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p10b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p10b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p10b_2 = p10b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1) * int_m
     &b(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_4_3',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_4_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_4_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_4_3',4,MA_ERR)
      IF ((p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_4_3',5,MA_ER
     &R)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_4_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_4_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((p4 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (p4b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_4_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_4_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_4_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_4_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = 1/2 * P( 3 ) * Sum ( h12 h11 ) * x ( p4 p5 p6 h1 h11 h12 )_x * i1 ( h11 h12 h2 h3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h11b
      INTEGER h12b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h11
      INTEGER h12
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_v)) THEN
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h12
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h11b-1),in
     &t_mb(k_sym+h12b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h11b-1)+int_
     &mb(k_spin+h12b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h11b_1 = h11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_5',1,MA_ERR)
      IF ((h12b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - noab -
     & 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p6 - 1) + int_mb(
     &k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1)))))
     &)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h1b) .and. (h1b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h1b_1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - noab -
     & 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p6 - 1) + int_mb(
     &k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1)))))
     &)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab -
     & 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(
     &k_range+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1)))))
     &)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + in
     &t_mb(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1
     &))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_5',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_5',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_5',5,MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_5',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_5',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_5',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_5',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_5',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 h12 h1 h2 )_v + = 1 * v ( h11 h12 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER h12
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      h11b_1 = h11b
      h12b_1 = h12b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_5_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_5_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_5_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h2b -
     & 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_5_1',4,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_5_1',5,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_5_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 h12 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_5_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 +
     & noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 h12 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h11 h12 h2 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p7b_1 = p7b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h2b_2 = h2b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_5_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_5_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_5_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_5_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_5_2',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_5_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_5_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_5_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_5_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_5_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 p7 )_v + = 1 * v ( h11 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER h12
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_1 = h11b
      h12b_1 = h12b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_5_2_1',1,MA_ERR)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_5_2_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_5_2_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_5_2_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_5_2_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_5_2_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_5_2_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_5_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 p7 )_vt + = -1/2 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 h12 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_5_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_5_2_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_5_2_2',4,MA_ERR)
      IF ((p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_5_2_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_5_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_5_2_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(h11b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_5_2_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_5_2_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_5_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_5_2_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 h12 h1 h2 )_vt + = 1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h11 h12 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_5_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_5_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_5_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_5_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_5_3',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_5_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_5_3',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_5_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_5_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_5_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_5_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = -1 * P( 9 ) * Sum ( p10 h9 ) * x ( p4 p5 p10 h1 h2 h9 )_x * i1 ( h9 p6 h3 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p10b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h9b_1
      INTEGER p6b_2
      INTEGER h9b_2
      INTEGER h3b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER p5
      INTEGER h9
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_v)) THEN
      DO p10b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h9b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h9b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h9b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+h3b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      p6b_2 = p6b
      h9b_2 = h9b
      h3b_2 = h3b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_6',1,MA_ERR)
      IF ((p10b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h1b .le. h9b) .and. (h9b .lt. h2b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b) .and. (h9b .lt. h1b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b) .and. (h1b .le. h9b) .an
     &d. (h9b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b) .and. (h2b .le. h9b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b) .and. (h1b .le. h9b) .and. (h9b .lt. h2b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b) .and. (h2b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_6',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_6',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (h3b_2 - 1 + noab * (h9b_2 - 1 + noab * (p6b_2 - 
     &noab - 1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p6 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_6',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_6',7,MA_ERR)
      IF ((p5b .le. p6b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h1b .le. h3b) .and.
     & (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_6',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_6',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_6',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_6',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 p4 h1 p10 )_v + = 1 * v ( h9 p4 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h9b
      INTEGER h1b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER h9b_1
      INTEGER h1b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h9
      INTEGER p4
      INTEGER h1
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      p4b_1 = p4b
      h9b_1 = h9b
      h1b_1 = h1b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_6_1',1,MA_ERR)
      IF ((h9b .le. p4b) .and. (h1b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - 1
     & + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + (noab+nva
     &b) * (h9b_1 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h9 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_6_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_6_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h9b - 1 + noab * (p4b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_6_1',4,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_6_1',5,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_6_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 p4 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h9b
      INTEGER h1b
      INTEGER p10b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_6_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      int_mb(k_a_offset + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h9
     &b - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h9b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 p4 h1 p10 )_vt + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( h9 p4 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h9b
      INTEGER h1b
      INTEGER p10b
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h9b_2
      INTEGER p10b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h9
      INTEGER p4
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p7b_1 = p7b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p4b_2 = p4b
      h9b_2 = h9b
      p10b_2 = p10b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_6_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p7b_1 - noab - 1)))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p7 - 1))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_6_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_6_2',4,MA_ERR)
      IF ((h9b .le. p4b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. p4b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_6_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_6_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_6_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h9b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_6_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_6_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_6_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_6_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 p4 h1 p10 )_vt + = -1 * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * v ( h8 h9 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h9b
      INTEGER h1b
      INTEGER p10b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h9b_2
      INTEGER h8b_2
      INTEGER p10b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h9
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h9b_2 = int_mb(k_alpha+h9b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h9b_2 = h9b
      h8b_2 = h8b
      p10b_2 = p10b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_6_3',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_6_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_6_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_6_3',4,MA_ERR)
      IF ((h8b .le. h9b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h9b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h8b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h8b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_6_3',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_6_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_6_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h9b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_6_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_6_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_6_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_6_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_xv + = 1/2 * P( 3 ) * Sum ( p8 p7 ) * x ( p4 p7 p8 h1 h2 h3 )_x * v ( p5 p6 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_x,irrep_v)) THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p5b_2 = p5b
      p6b_2 = p6b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_7',1,MA_ERR)
      IF ((p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_7',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_7',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab
     &) * (p5b_2 - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_7',5,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_7',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_7',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_7',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_7',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_7',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = 1 * P( 3 ) * Sum ( h11 ) * t ( p4 h11 )_t * i1 ( h11 p5 p6 h1 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h11b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER h11b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p6
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO h11b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h11b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p5b_2 = p5b
      p6b_2 = p6b
      h11b_2 = h11b
      h1b_2 = h1b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((p4 - 1))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noa
     &b * (p6b_2 - noab - 1 + nvab * (p5b_2 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((p5 - 1) + int_mb(k_r
     &ange+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vx + = -1 * P( 6 ) * Sum ( p10 ) * x ( p4 p10 h1 h2 )_x * i2 ( h11 p5 h3 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER h3b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER h11
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h3b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      h3b_2 = h3b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (h3b_2 - 1 + noab * (h11b_2 - 1 + noab * (p5b_2 -
     & noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((h3 - 1) + int_mb(k_range+
     &h3b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((p5 - 1) + int_mb(k_r
     &ange+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_1',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_1',7,MA_ERR)
      IF ((p4b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+p5b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      int_mb(k_a_offset + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + 
     &noab * (h11b - 1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1
     &)))))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_
     &mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
     & * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p10 )_v + = 1 * v ( h11 p4 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p4
      INTEGER h1
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      h1b_1 = h1b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_1',1,MA_ERR)
      IF ((h11b .le. p4b) .and. (h1b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - 1
     & + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + (noab+nva
     &b) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_8_1_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_1_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_1_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      int_mb(k_a_offset + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h1
     &1b - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p10 )_vt + = 1/2 * Sum ( h8 ) * t ( p4 h8 )_t * i3 ( h8 h11 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h1
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      h1b_2 = h1b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_2',4,MA_ERR)
      IF ((h8b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h8b_2 -
     & 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_1_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_1_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab *
     & (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h8 h11 h1 p10 )_v + = 1 * v ( h8 h11 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      INTEGER h8b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h8
      INTEGER h11
      INTEGER h1
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_1 = int_mb(k_alpha+h8b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_1 = h8b
      h11b_1 = h11b
      h1b_1 = h1b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_2_1',1,MA_ERR)
      IF ((h1b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - 1
     & + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + (noab+nv
     &ab) * (h8b_1 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1_2_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_8_1_2_1',3,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h8b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1_2_1',4,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2_1
     &',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_1_2_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h8 h11 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_1_2_1',0,MA_ERR)
      size = 0
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      int_mb(k_a_offset + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h1
     &1b - 1 + noab * (h8b - 1)))) = size
      size = size + int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h8 h11 h1 p10 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h8 h11 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h11b_2
      INTEGER p10b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h11
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p10b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h8b_2 = h8b
      h11b_2 = h11b
      p10b_2 = p10b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_2_2',4,MA_ERR)
      IF ((p9b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_1_2_2',7,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab *
     & (h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_2_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p10 )_vt + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 p4 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER p10b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p4
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p10b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      h11b_2 = h11b
      p10b_2 = p10b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1_3',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_3',4,MA_ERR)
      IF ((h11b .le. p4b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .le. p4b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_1_3',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_1_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab *
     & (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1_3',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_3',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_3',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p10 )_vt + = -1 * Sum ( h8 p7 ) * t ( p4 p7 h1 h8 )_t * v ( h8 h11 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p10b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER p10b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+p10b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      p10b_2 = p10b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_4',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_1_4',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_1_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_1_4',4,MA_ERR)
      IF ((h8b .le. h11b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h11b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_1_4',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_1_4',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab *
     & (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_1_4',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_4',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_4',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_1_4',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_fx + = -1 * Sum ( p7 ) * x ( p4 p5 p7 h1 h2 h3 )_x * i2 ( h11 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_f,irrep_x)) THEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-1).e
     &q.4)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_2',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h11b_2 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p7 )_f + = 1 * f ( h11 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p7b
      INTEGER h11b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-1).e
     &q.4)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_1 = h11b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h11b_1 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p7 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_2_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_8_2_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_2_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_2_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_2_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_8_2_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h11b - 1)) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p7 )_vt + = -1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p7b
      INTEGER p8b
      INTEGER h9b
      INTEGER p8b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p8b_1 = p8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_2_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_2_2',4,MA_ERR)
      IF ((h9b .le. h11b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h11b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_2_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_2_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h11 + int_mb(k_range+h11b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_2_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_2_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_2_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vx + = 1 * P( 3 ) * Sum ( h10 p7 ) * x ( p4 p5 p7 h1 h2 h10 )_x * i2 ( h10 h11 h3 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER h10b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_1
      INTEGER h11b_2
      INTEGER h10b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h10
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      DO p7b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h10b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h10b_2 = h10b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_3',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h10b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h2b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h10b .lt. h1b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h1b .le. h10b) .and
     &. (h10b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h2b .le. h10b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 
     &1 + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_
     &range+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h10b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p7b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h2b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h2 - 1) + int_mb(k_range+
     &h2b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_
     &range+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_
     &mb(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_3',4,MA_ERR)
      IF ((h10b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h11b_2 - 1 + noab * (h10b_2 -
     & 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h10b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_3',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_3',7,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 p7 )_v + = 1 * v ( h10 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER h10b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h10
      INTEGER h11
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h10b_1 = int_mb(k_alpha+h10b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h10b_1 = h10b
      h11b_1 = h11b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_3_1',1,MA_ERR)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + (noab+nva
     &b) * (h10b_1 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_3_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_8_3_1',3,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_3_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_3_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_3_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_3_1',0,MA_ERR)
      size = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (h10b - 1)))) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h10 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_2 = h10b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_3_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_3_2',4,MA_ERR)
      IF ((p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_3_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_3_2',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_3_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_3_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_3_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_3_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vx + = 1/2 * P( 2 ) * Sum ( p8 p9 ) * x ( p4 p8 p9 h1 h2 h3 )_x * v ( h11 p5 p8 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p8b
      INTEGER p9b
      INTEGER p4b_1
      INTEGER p8b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p9
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      DO p8b = noab+1,noab+nvab
      DO p9b = p8b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+p9b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p8b_1 = p8b
      p9b_1 = p9b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      p8b_2 = p8b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_4',1,MA_ERR)
      IF ((p9b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p9b_1 - noab - 1 + nvab * (p8b_1 - noab - 1)))))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1))))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .lt. p4b) .and. (p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p8b_1 - noab - 1)))))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p9 - 1) + int_mb(k_ra
     &nge+p9b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p4 - 1))))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_4',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_4',4,MA_ERR)
      IF ((h11b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_4',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p8b .eq. p9b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_4',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_4',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_4',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_4',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = 1/4 * P( 2 ) * Sum ( h8 ) * t ( p4 h8 )_t * i2 ( h8 h11 p5 h1 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER h8b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER h11
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) T
     &HEN
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      h8b_2 = h8b
      h1b_2 = h1b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_5',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_5',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_5',4,MA_ERR)
      IF ((h8b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noa
     &b * (h8b_2 - 1 + noab * (p5b_2 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1))))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab
     & * (h11b_2 - 1 + noab * (p5b_2 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ra
     &nge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1))))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_5',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_5',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_5',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_5',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_5',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_5',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_5_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 p4 h1 h2 h3 )_vx + = -1 * Sum ( p9 p10 ) * x ( p4 p9 p10 h1 h2 h3 )_x * v ( h8 h11 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p9b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h8b_2
      INTEGER h11b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h11b_2 = h11b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_5_1',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p4b) .and. (p4b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p9b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_5_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_5_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_5_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_5_1',5,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_5_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_5_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (h8b - 1 + noab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_5_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_5_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_5_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_5_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_5_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 p4 h1 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_5_1',0,MA_ERR
     &)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      int_mb(k_a_offset + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + 
     &noab * (h11b - 1 + noab * (h8b - 1 + noab * (p4b - noab - 1)))))) 
     &= size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
     & * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = -1 * P( 6 ) * Sum ( p7 ) * t ( p4 p7 h1 h2 )_t * i2 ( h11 p5 h3 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER h11
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h11b_2 - 1 + noab * (p5b_2 - 
     &noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6',7,MA_ERR)
      IF ((p4b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vx + = -1 * Sum ( p9 ) * x ( p9 h1 )_x * v ( h11 p4 p7 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p4
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p4b_2 = p4b
      h11b_2 = h11b
      p7b_2 = p7b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_1',4,MA_ERR)
      IF ((h11b .le. p4b) .and. (p9b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .le. p4b) .and. (p7b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_6_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_6_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vx + = 1 * Sum ( h9 p10 ) * x ( p4 p10 h1 h9 )_x * v ( h9 h11 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p10b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p10b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p10b_1 = p10b
      h1b_1 = h1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_2',1,MA_ERR)
      IF ((p10b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_2',4,MA_ERR)
      IF ((h9b .le. h11b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h11b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vtx + = -1 * Sum ( h10 ) * x ( p4 h10 )_x * i3 ( h10 h11 h1 p7 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER h10b
      INTEGER p4b_1
      INTEGER h10b_1
      INTEGER h11b_2
      INTEGER h10b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h1
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,ieor(irrep_
     &t,irrep_x))) THEN
      DO h10b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h10b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p4b_1 = p4b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h10b_2 = h10b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p4 - 1))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6_3',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_3',4,MA_ERR)
      IF ((h10b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h10b_2 -
     & 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h10b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1))))
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6_3',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6_3',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p7 )_vt + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h10 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_2 = h10b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_3_1',4,MA_ERR)
      IF ((p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6_3_1',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_6_3_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p7 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_6_3_1',0,MA_ERR)
      size = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (h10b - 1)))) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vxt + = 1/2 * Sum ( h8 ) * t ( p4 h8 )_t * i3 ( h8 h11 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h1
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,ieor(irrep_
     &x,irrep_t))) THEN
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_4',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6_4',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_4',4,MA_ERR)
      IF ((h8b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h8b_2 - 
     &1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab * (h11b_2 - 
     &1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6_4',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6_4',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6_4',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_6_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h8 h11 h1 p7 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h8 h11 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p10b_1 = p10b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h11b_2 = h11b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_6_4_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_6_4_1',4,MA_ERR)
      IF ((p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_6_4_1',7,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_6_4_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h8 h11 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_6_4_1',0,MA_ERR)
      size = 0
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (h8b - 1)))) = size
      size = size + int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = -1 * Sum ( p7 ) * t ( p4 p5 p7 h1 h2 h3 )_t * i2 ( h11 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-1).e
     &q.4)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_7',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_7',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_7',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h11b_2 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_7',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_7',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_7',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_7',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_7',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_7',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_7_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p7 )_vx + = -1 * Sum ( h9 p10 ) * x ( p10 h9 )_x * v ( h9 h11 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p7b
      INTEGER p10b
      INTEGER h9b
      INTEGER p10b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep
     &_v,irrep_x)) THEN
      DO p10b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h9b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h9b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p10b_1 = p10b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_7_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_7_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_7_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_7_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_7_1',4,MA_ERR)
      IF ((h9b .le. h11b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h11b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_7_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_7_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_7_1',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h11 + int_mb(k_range+h11b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_7_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_7_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_7_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_7_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_7_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_8_7_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep
     &_v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h11b - 1)) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vtx + = -1/2 * P( 2 ) * Sum ( h10 ) * x ( p4 h10 )_x * i2 ( h10 h11 p5 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h10b
      INTEGER p4b_1
      INTEGER h10b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER h10b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER h11
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_x))) T
     &HEN
      DO h10b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h10b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h10b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p4b_1 = p4b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int
     &_mb(k_spin+h3b-1).eq.12)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      h10b_2 = h10b
      h1b_2 = h1b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_8',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_8',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((p4 - 1))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_8',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_8',4,MA_ERR)
      IF ((h10b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noa
     &b * (h10b_2 - 1 + noab * (p5b_2 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p5 - 1)))))
     &)
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((p5 - 1) + int_mb(k_r
     &ange+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + in
     &t_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1
     &))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h10b_2 - 1 + noa
     &b * (h11b_2 - 1 + noab * (p5b_2 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_r
     &ange+h10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1)))))
     &)
      idimb_sort = h10 + int_mb(k_range+h10b-1) * ((p5 - 1) + int_mb(k_r
     &ange+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + in
     &t_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1
     &))))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_8',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_8',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_8',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_8',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_8',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_8',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_8',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_8_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 p4 h1 h2 h3 )_vt + = 1 * Sum ( p7 p8 ) * t ( p4 p7 p8 h1 h2 h3 )_t * v ( h10 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)
     &+int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-
     &1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),i
     &nt_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_2 = h10b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_8_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_8_1',1,MA_ERR)
      IF ((p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_8_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_8_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_8_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h10 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_8_1',5,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_8_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_8_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h11 - 1)
     &)))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((p4 - 1)))))
     &)
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (h10b - 1 + noab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_8_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_8_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_8_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_8_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_8_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 p4 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_8_1',0,MA_ERR
     &)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+p4b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),i
     &nt_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)
     &+int_mb(k_spin+h3b-1).ne.12)) THEN
      int_mb(k_a_offset + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + 
     &noab * (h11b - 1 + noab * (h10b - 1 + noab * (p4b - noab - 1))))))
     & = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1
     &) * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vxt + = -1 * P( 3 ) * Sum ( h8 p7 ) * t ( p4 p5 p7 h1 h2 h8 )_t * i2 ( h8 h11 h3 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h8b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h8b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h8b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_9',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_9',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h1b .le. h8b) .and.
     & (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_9',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_9',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_9',4,MA_ERR)
      IF ((h8b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h11b_2 - 1 + noab * (h8b_2 - 
     &1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h8b_2 - 1 + noab * (h11b_2 - 
     &1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_9',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_9',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_9',7,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_9',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_9',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_9',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_9',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_8_9_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_vx + = 1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h8 h11 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p10b_1 = p10b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h11b_2 = h11b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_9_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_8_9_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_8_9_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_8_9_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_8_9_1',4,MA_ERR)
      IF ((p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_8_9_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_9_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_8_9_1',7,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_8_9_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_8_9_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_8_9_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_8_9_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_8_9_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_8_9_1',0,MA_ERR)
      size = 0
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (h8b - 1)))) = size
      size = size + int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1 * P( 9 ) * Sum ( h12 ) * t ( p4 p5 h1 h12 )_t * i1 ( h12 p6 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h12b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h12b_1
      INTEGER p6b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h12
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO h12b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h1b_1 = h1b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1).eq.8)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p6b_2 = p6b
      h12b_2 = h12b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h2b-1) * int_mb
     &(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9',1,MA_ERR)
      IF ((h12b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h12b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_range+h
     &12b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h12b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (p6b_2 - noab - 
     &1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p6 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((p6 - 1) + int_mb(k_r
     &ange+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9',5,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9',7,MA_ERR)
      IF ((p5b .le. p6b) .and. (h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h1b .le. h2b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h2b .le. h1b) .and.
     & (h1b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9',8,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9',9,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vx + = 1 * Sum ( h13 ) * x ( p4 h13 )_x * i2 ( h12 h13 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h13b
      INTEGER p4b_1
      INTEGER h13b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h13
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h1
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO h13b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h13b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h13b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      ELSE
      p4b_1 = p4b
      h13b_1 = h13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      ELSE
      h12b_2 = h12b
      h13b_2 = h13b
      h1b_2 = h1b
      h2b_2 = h2b
      END IF
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h13b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      idima = h13 + int_mb(k_range+h13b-1) * ((p4 - 1))
      idima_sort = h13 + int_mb(k_range+h13b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_1',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_1',4,MA_ERR)
      IF ((h13b .lt. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h2b_2 - 1 
     &+ noab * (h1b_2 - 1 + noab * (h12b_2 - 1 + noab * (h13b_2 - 1)))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimb = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h13 - 1))))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .le. h13b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h2b_2 - 1 
     &+ noab * (h1b_2 - 1 + noab * (h13b_2 - 1 + noab * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimb = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idimb_sort = h13 + int_mb(k_range+h13b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_1',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_1',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_1',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 +
     & noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h12b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h13 h1 h2 )_v + = -1 * v ( h12 h13 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER h2b
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h12
      INTEGER h13
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      h12b_1 = int_mb(k_alpha+h12b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      h12b_1 = h12b
      h13b_1 = h13b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h13b_1 - 1 + (noab+nva
     &b) * (h12b_1 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_1_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_9_1_1',3,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + h2b -
     & 1 + noab * (h1b - 1 + noab * (h13b - 1 + noab * (h12b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_1_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_1_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h13 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_1_1',0,MA_ERR)
      size = 0
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h13b - 1 +
     & noab * (h12b - 1)))) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h13 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p9 ) * t ( p9 h1 )_t * i3 ( h12 h13 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h13
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h12b_2 = h12b
      h13b_2 = h13b
      h2b_2 = h2b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_1_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h13b_2 - 1 + noab * (h12b_2 -
     & 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_1_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_1_2',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h13b - 1 + noab * (h12b -
     & 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h13b - 1 + noab * (h12b -
     & 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_1_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h13 h1 p9 )_v + = 1 * v ( h12 h13 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p9b
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h1b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h12
      INTEGER h13
      INTEGER h1
      INTEGER p9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h12b_1 = int_mb(k_alpha+h12b-1)
      h13b_1 = int_mb(k_alpha+h13b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      ELSE
      h12b_1 = h12b
      h13b_1 = h13b
      h1b_1 = h1b
      p9b_1 = p9b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_2_1',1,MA_ERR)
      IF ((h1b .le. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p9b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h13b_1 - 1 + (noab+nva
     &b) * (h12b_1 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima = p9 + int_mb(k_range+p9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p9 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_1_2_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_9_1_2_1',3,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((h13 - 1) + int_mb(k_
     &range+h13b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p9 - 1))))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (h12b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_1_2_1',4,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2_1
     &',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_1_2_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h13 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_1_2_1',0,MA_ERR)
      size = 0
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      int_mb(k_a_offset + p9b - noab - 1 + nvab * (h1b - 1 + noab * (h13
     &b - 1 + noab * (h12b - 1)))) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h13 h1 p9 )_vt + = 1/2 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h12 h13 p8 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p9b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER p9b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h13
      INTEGER p9
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+p9b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h12b_2 = h12b
      h13b_2 = h13b
      p9b_2 = p9b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_2_2',4,MA_ERR)
      IF ((p8b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_1_2_2',7,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((p9 - 1))))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p9b - noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * 
     &(h12b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_2_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h13 h1 h2 )_vt + = -1/2 * Sum ( p8 p9 ) * t ( p8 p9 h1 h2 )_t * v ( h12 h13 p8 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p9b
      INTEGER p8b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p9
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h13
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      DO p9b = p8b,noab+nvab
      IF (int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p8b_1 = p8b
      p9b_1 = p9b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+
     &int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h13b_2 = int_mb(k_alpha+h13b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h12b_2 = h12b
      h13b_2 = h13b
      p8b_2 = p8b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_1_3',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_1_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_1_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h13 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_1_3',5,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p8b .eq. p9b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_1_3',7,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h13 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h12 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h13b - 1 + noab * (h12b -
     & 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_1_3',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_3',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_3',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_1_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( p8 ) * x ( p8 h1 )_x * v ( h12 p4 h2 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER p4
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      h12b_2 = h12b
      h2b_2 = h2b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h12b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_2',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_2',4,MA_ERR)
      IF ((h12b .le. p4b) .and. (h2b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_2',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_2',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_2',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_2',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_fx + = -1 * Sum ( p7 ) * x ( p4 p7 h1 h2 )_x * i2 ( h12 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h12b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep_x)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p7b-1).e
     &q.4)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h12b_2 = h12b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_3',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_3',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h12b_2 - 1)))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h12 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h12 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_3',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_3',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_3',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p7 )_f + = 1 * f ( h12 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER p7b
      INTEGER h12b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h12
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p7b-1).e
     &q.4)) THEN
      h12b_1 = int_mb(k_alpha+h12b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h12b_1 = h12b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h12b_1 - 1)))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h12 - 1))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p7 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_3_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_9_3_1',3,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h12 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h12b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_3_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_3_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_3_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h12b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_9_3_1',0,MA_ERR)
      size = 0
      DO h12b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h12b - 1)) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p7 )_vt + = -1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h12 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER p7b
      INTEGER p8b
      INTEGER h9b
      INTEGER p8b_1
      INTEGER h9b_1
      INTEGER h12b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p7b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p8b_1 = p8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h12b_2 = h12b
      h9b_2 = h9b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_3_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_3_2',4,MA_ERR)
      IF ((h9b .le. h12b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h12b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_3_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_3_2',7,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h12 + int_mb(k_range+h12b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h12 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h12b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_3_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_3_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_3_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_3_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vx + = 1 * P( 2 ) * Sum ( h10 p7 ) * x ( p4 p7 h1 h10 )_x * i2 ( h10 h12 h2 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p7b
      INTEGER h10b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h10b_1
      INTEGER h12b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p7b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h12b_2 = h12b
      h10b_2 = h10b
      h2b_2 = h2b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_4',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h10b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - 
     &noab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - 
     &noab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h10b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h10b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_range+h
     &10b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (h1b .le. h10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h1 - 1) + int_mb(k_range+
     &h1b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_4',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_4',4,MA_ERR)
      IF ((h10b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (h10b_2 -
     & 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h12b_2 -
     & 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h12 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_4',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_4',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_4',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_4',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_4',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h12 h1 p7 )_v + = 1 * v ( h10 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      INTEGER h10b_1
      INTEGER h12b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h10
      INTEGER h12
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h12b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h10b_1 = int_mb(k_alpha+h10b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h10b_1 = h10b
      h12b_1 = h12b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_4_1',1,MA_ERR)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h10b_1 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_4_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_9_4_1',3,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h10 + int_mb(k_range+h10b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_4_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_4_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_4_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h10b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_4_1',0,MA_ERR)
      size = 0
      DO h10b = 1,noab
      DO h12b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (h10b - 1)))) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h12 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h10 h12 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h12b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h10
      INTEGER h12
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h10b = 1,noab
      DO h12b = h10b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h10b_2 = int_mb(k_alpha+h10b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h10b_2 = h10b
      h12b_2 = h12b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_4_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_4_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_4_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_4_2',4,MA_ERR)
      IF ((p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h10b_2 - 1)))))
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_4_2',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_4_2',7,MA_ERR)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h10 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_4_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_4_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_4_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_4_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vx + = 1/2 * Sum ( p8 p9 ) * x ( p8 p9 h1 h2 )_x * v ( h12 p4 p8 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p9b
      INTEGER p8b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p4b_2
      INTEGER h12b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p9
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER p4
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p8b = noab+1,noab+nvab
      DO p9b = p8b,noab+nvab
      IF (int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p8b_1 = p8b
      p9b_1 = p9b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p4b_2 = p4b
      h12b_2 = h12b
      p8b_2 = p8b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_5',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_5',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_5',4,MA_ERR)
      IF ((h12b .le. p4b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_ran
     &ge+p9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_5',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p8b .eq. p9b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_5',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_5',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_5',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_5',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_5',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vx + = 1/2 * Sum ( h8 p9 p10 ) * x ( p4 p9 p10 h1 h2 h8 )_x * v ( h8 h12 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p10b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h8b_1
      INTEGER h12b_2
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER p4
      INTEGER h8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h8b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h8b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h8b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h12b_2 = h12b
      h8b_2 = h8b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_6',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_6',1,MA_ERR)
      IF ((p10b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p4b) .and. (p4b .le. p10b) .and. (h8b .lt. h1b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p4b) .and. (p4b .le. p10b) .and. (h1b .le. h8b) .and
     &. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p4b) .and. (p4b .le. p10b) .and. (h2b .le. h8b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p9b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p9b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p9b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_6',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_6',4,MA_ERR)
      IF ((h8b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_6',5,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_6',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_6',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_6',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_6',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_6',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_6',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vxt + = 1 * Sum ( h11 ) * t ( p4 h11 )_t * i2 ( h11 h12 h1 h2 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h11b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER h12b_2
      INTEGER h11b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h1
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_
     &x,irrep_t))) THEN
      DO h11b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h11b-1)) .eq. irrep_t) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h11b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      ELSE
      h12b_2 = h12b
      h11b_2 = h11b
      h1b_2 = h1b
      h2b_2 = h2b
      END IF
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_7',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((p4 - 1))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_7',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_7',4,MA_ERR)
      IF ((h11b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h2b_2 - 1 
     &+ noab * (h1b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimb = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h2b_2 - 1 
     &+ noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimb = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_7',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_7',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h12 - 1) + int_mb(k_ra
     &nge+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_7',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_7',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_7',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_7_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( p9 ) * x ( p9 h1 )_x * v ( h11 h12 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h2b_2 = h2b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_7_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_1',4,MA_ERR)
      IF ((h2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_7_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_7_1',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_7_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_7_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_7_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 +
     & noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_vx + = 1/2 * Sum ( p9 p10 ) * x ( p9 p10 h1 h2 )_x * v ( h11 h12 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 - 
     &noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_7_2',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_7_2',5,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_7_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_7_2',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_2',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_7_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 h2 )_vxt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i3 ( h11 h12 h2 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep
     &_x,irrep_t))) THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h2b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h2b_2 = h2b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_7_3',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_7_3',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_7_3',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (h11b -
     & 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_7_3',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_7_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 h12 h1 p8 )_vx + = 1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h11 h12 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p8b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_x)) 
     &THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p10b_1 = p10b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p8b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p8b_2 = p8b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_7_3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_7_3_1',4,MA_ERR)
      IF ((p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1) + int_mb(k_
     &range+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1',5,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_7_3_1',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(h11b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1',8,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1
     &',9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1
     &',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_7_3_1(d_a,l_a_offset,k_a_offset,si
     &ze)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 h12 h1 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_7_3_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_x)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h12 p4 h2 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_
     &x,irrep_t))) THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      h12b_2 = h12b
      h2b_2 = h2b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h12b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_8',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_8',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_8',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_8',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (p4b_2 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_8',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_8',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_8',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_8',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_8',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_8',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_8',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_8_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p4 h1 p8 )_vx + = -1 * Sum ( p9 ) * x ( p9 h1 )_x * v ( h12 p4 p8 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h12b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER p4
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p4b_2 = p4b
      h12b_2 = h12b
      p8b_2 = p8b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h12b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_8_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_8_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_8_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_8_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_8_1',4,MA_ERR)
      IF ((h12b .le. p4b) .and. (p9b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .le. p4b) .and. (p8b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h12 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_8_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_8_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_8_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_8_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_8_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_8_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_8_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_8_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p4 h1 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_8_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h12b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vxt + = -1 * Sum ( p8 ) * t ( p4 p8 h1 h2 )_t * i2 ( h12 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER p4b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h12b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_
     &x,irrep_t))) THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p8b-1).e
     &q.4)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h12b_2 = h12b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_9',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_9',1,MA_ERR)
      IF ((p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p4 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_9',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_9',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_9',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h12b_2 - 1)))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h12 - 1))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h12 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_9',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_9',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_9',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h12 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_9',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_9',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_9',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_9',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_9_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p8 )_vx + = -1 * Sum ( h9 p10 ) * x ( p10 h9 )_x * v ( h9 h12 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER p8b
      INTEGER p10b
      INTEGER h9b
      INTEGER p10b_1
      INTEGER h9b_1
      INTEGER h12b_2
      INTEGER h9b_2
      INTEGER p8b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h12b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p8b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep
     &_v,irrep_x)) THEN
      DO p10b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h9b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h9b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p10b_1 = p10b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p8b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h12b_2 = h12b
      h9b_2 = h9b
      p8b_2 = p8b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_9_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_9_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_9_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_9_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_9_1',4,MA_ERR)
      IF ((h9b .le. h12b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h12b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h12b_2 - 1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_9_1',5,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_9_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_9_1',7,MA_ERR)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h12 + int_mb(k_range+h12b-1) * ((p8 - 1))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h12 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h12b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_9_1',8,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_9_1',
     &9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_9_1',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_9_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_9_1(d_a,l_a_offset,k_a_offset,size
     &)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h12b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_9_9_1',0,MA_ERR)
      size = 0
      DO h12b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep
     &_v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+p8b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h12b - 1)) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h12 p4 h1 h2 )_vxt + = 1 * P( 2 ) * Sum ( h9 p8 ) * t ( p4 p8 h1 h9 )_t * i2 ( h9 h12 h2 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER p8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h12b_2
      INTEGER h9b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p4
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h12
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h12b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_
     &x,irrep_t))) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p8b_1 = p8b
      h1b_1 = h1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h12b_2 = int_mb(k_alpha+h12b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h12b_2 = h12b
      h9b_2 = h9b
      h2b_2 = h2b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_10',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_10',1,MA_ERR)
      IF ((p8b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .lt. p4b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p4 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p4 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_10',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_10',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_10',4,MA_ERR)
      IF ((h9b .le. h12b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h12b_2 - 1 + noab * (h9b_2 - 
     &1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h9b_2 - 1 + noab * (h12b_2 - 
     &1)))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h12 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_10',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_10',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_10',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h12b - 1 + noab * (p4b - 
     &noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_10',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_10',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_10',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_10',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_9_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h12 h1 p8 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h9 h12 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h9b_2
      INTEGER h12b_2
      INTEGER p8b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h9
      INTEGER h12
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h9b = 1,noab
      DO h12b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p10b_1 = p10b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1)+i
     &nt_mb(k_spin+p8b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h9b_2 = int_mb(k_alpha+h9b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h9b_2 = h9b
      h12b_2 = h12b
      p8b_2 = p8b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h12b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_10_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_9_10_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_9_10_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_9_10_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_9_10_1',4,MA_ERR)
      IF ((p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_9_10_1',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_10_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_9_10_1',7,MA_ERR)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p8 - 1))))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h9 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(h9b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_9_10_1',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_9_10_1'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_9_10_1'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_9_10_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_9_10_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h12 h1 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h9b
      INTEGER h12b
      INTEGER h1b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_9_10_1',0,MA_ERR)
      size = 0
      DO h9b = 1,noab
      DO h12b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_x)) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (h9b - 1)))) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h12b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vtx + = 1 * P( 3 ) * Sum ( h11 ) * x ( p4 h11 )_x * i1 ( h11 p5 p6 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h11b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER h11b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p6
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_x))) TH
     &EN
      DO h11b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h11b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1).e
     &q.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p5b_2 = p5b
      p6b_2 = p6b
      h11b_2 = h11b
      h1b_2 = h1b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h11b_1 - 1
     & + noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      idima = h11 + int_mb(k_range+h11b-1) * ((p4 - 1))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noa
     &b * (p6b_2 - noab - 1 + nvab * (p5b_2 - noab - 1)))))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((p5 - 1) + int_mb(k_r
     &ange+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10',5,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vt + = -1 * P( 6 ) * Sum ( p7 ) * t ( p4 p7 h1 h2 )_t * i2 ( h11 p5 h3 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER h11
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_1',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h11b_2 - 1 + noab * (p5b_2 - 
     &noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p5 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_1',7,MA_ERR)
      IF ((p4b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_10_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_10_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+p5b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      int_mb(k_a_offset + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + 
     &noab * (h11b - 1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1
     &)))))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_
     &mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
     & * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_v + = 1 * v ( h11 p4 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p4
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      p4b_1 = p4b
      h11b_1 = h11b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_1',1,MA_ERR)
      IF ((h11b .le. p4b) .and. (h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + (noab+nvab
     &) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_1_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_10_1_1',3,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (p4b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_1_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_10_1_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_10_1_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p4b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vt + = 1 * Sum ( h8 ) * t ( p4 h8 )_t * v ( h8 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h1
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p4b_1 - noab - 1)))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((p4 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_1_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_2',4,MA_ERR)
      IF ((h8b .le. h11b) .and. (h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b) .and. (h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_1_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_1_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_1_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 p4 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p4
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_1_3',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_3',4,MA_ERR)
      IF ((h11b .le. p4b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .le. p4b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_1_3',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_1_3',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_1_3',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_3'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_3'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p4 h1 p7 )_vt + = 1 * Sum ( h9 p8 ) * t ( p4 p8 h1 h9 )_t * v ( h9 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER p4
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p8b_1 = p8b
      h1b_1 = h1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_4',1,MA_ERR)
      IF ((p8b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p8b .lt. p4b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p8b_1 - n
     &oab - 1)))))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p8 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p4 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p8b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p4 - 1))))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_1_4',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_1_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_1_4',4,MA_ERR)
      IF ((h9b .le. h11b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h11b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_1_4',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_1_4',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_1_4',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_4'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_4'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_1_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_ft + = -1 * Sum ( p10 ) * t ( p4 p5 p10 h1 h2 h3 )_t * i2 ( h11 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h11b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_f,irrep_t)) THEN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b-1).
     &eq.4)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_2 = h11b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_2',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((p4 - 1) + int_mb(k_r
     &ange+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - n
     &oab - 1 + nvab * (h11b_2 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_2',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p10 )_f + = 1 * f ( h11 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p10b
      INTEGER h11b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER p10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b-1).
     &eq.4)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      ELSE
      h11b_1 = h11b
      p10b_1 = p10b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_2_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p10b_1 - 1
     & + (noab+nvab) * (h11b_1 - 1)))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p10 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_2_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_10_2_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p10b 
     &- noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_2_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_2_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_10_2_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER p10b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_10_2_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      int_mb(k_a_offset + p10b - noab - 1 + nvab * (h11b - 1)) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 p10 )_vt + = 1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h9 h11 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER p10b
      INTEGER p8b
      INTEGER h9b
      INTEGER p8b_1
      INTEGER h9b_1
      INTEGER h11b_2
      INTEGER h9b_2
      INTEGER p10b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),int_mb(k_sym+p10b-1)) .eq. ieor(irre
     &p_v,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p8b_1 = p8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p10b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h9b_2 = h9b
      p10b_2 = p10b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_2_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_2_2',4,MA_ERR)
      IF ((h9b .le. h11b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .le. h11b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nv
     &ab) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h9b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_2_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_2_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimc_sort = h11 + int_mb(k_range+h11b-1) * ((p10 - 1))
      idimc = p10 + int_mb(k_range+p10b-1) * ((h11 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p10b - noab - 1 + nvab * (h11b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_2_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_2_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_2_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_2_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vt + = 1 * P( 3 ) * Sum ( h8 p7 ) * t ( p4 p5 p7 h1 h2 h8 )_t * i2 ( h8 h11 h3 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h8b_1
      INTEGER h11b_2
      INTEGER h8b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h8b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h8b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h8b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h8b-1)+i
     &nt_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h8b_2 = h8b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_3',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h1b .le. h8b) .and.
     & (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_3',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_3',4,MA_ERR)
      IF ((h8b .le. h11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h11b_2 - 1 + noab * (h8b_2 - 
     &1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h11b .lt. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h8b_2 - 1 + noab * (h11b_2 - 
     &1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_3',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_3',7,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h3 - 1))
     &))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_3',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_3',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_3',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_v + = 1 * v ( h8 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER h8b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h8
      INTEGER h11
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h8b_1 = int_mb(k_alpha+h8b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h8b_1 = h8b
      h11b_1 = h11b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_3_1',1,MA_ERR)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + (noab+nva
     &b) * (h8b_1 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_3_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_10_3_1',3,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h8b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_3_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_3_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_10_3_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_10_3_1',0,MA_ERR)
      size = 0
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11
     &b - 1 + noab * (h8b - 1)))) = size
      size = size + int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h11 h1 p7 )_vt + = -1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h8 h11 p7 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h11b
      INTEGER h1b
      INTEGER p7b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h11
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h11b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h8b_2 = h8b
      h11b_2 = h11b
      p7b_2 = p7b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_3_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_3_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_3_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_3_2',4,MA_ERR)
      IF ((p9b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_3_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_3_2',7,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h11 - 1) + int_mb(k_range+h11b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * 
     &(h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_3_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_3_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_3_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_3_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_10_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 p4 p5 h1 h2 h3 )_vt + = 1/2 * P( 2 ) * Sum ( p7 p8 ) * t ( p4 p7 p8 h1 h2 h3 )_t * v ( h11 p5 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p5b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER p5
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h11b_2 = int_mb(k_alpha+h11b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p5b_2 = p5b
      h11b_2 = h11b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_10_4',1,MA_ERR)
      IF ((p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_10_4',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_10_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_10_4',4,MA_ERR)
      IF ((h11b .le. p5b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_10_4',5,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_10_4',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h11 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_r
     &ange+h11b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h11b - 
     &1 + noab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_10_4',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_10_4',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_10_4',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_10_4',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1 * P( 9 ) * Sum ( p7 ) * t ( p4 p7 h1 h2 )_t * i1 ( p5 p6 h3 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p6
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+in
     &t_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      p6b_2 = int_mb(k_alpha+p6b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p5b_2 = p5b
      p6b_2 = p6b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p7b_1 - n
     &oab - 1)))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (p6b_2 - noab - 1 + nvab * (p5
     &b_2 - noab - 1)))))
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11',5,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11',7,MA_ERR)
      IF ((p4b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p5b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p4b) .and. (p4b .le. p6b) .and. (h1b .le. h3b) .and.
     & (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p5 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p4b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p7 )_vx + = -1 * Sum ( p8 ) * x ( p8 h1 )_x * v ( p4 p5 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER p5
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      p5b_2 = int_mb(k_alpha+p5b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      p4b_2 = p4b
      p5b_2 = p5b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_1',4,MA_ERR)
      IF ((p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (p4b_2 - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (p4b_2 - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + n
     &vab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_11_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_11_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p5b
     & - noab - 1 + nvab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p7 )_vx + = 1/2 * Sum ( h11 h12 ) * x ( p4 p5 h11 h12 )_x * i2 ( h11 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p7b
      INTEGER h11b
      INTEGER h12b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h11
      INTEGER h12
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h11b_1 = h11b
      h12b_1 = h12b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h12b_1 - 1
     & + noab * (h11b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 -
     & noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idima = h12 + int_mb(k_range+h12b-1) * ((h11 - 1) + int_mb(k_range
     &+h11b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_2',5,MA_E
     &RR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + n
     &vab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 p7 )_v + = 1 * v ( h11 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h1b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h11
      INTEGER h12
      INTEGER h1
      INTEGER p7
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h11b_1 = int_mb(k_alpha+h11b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      ELSE
      h11b_1 = h11b
      h12b_1 = h12b
      h1b_1 = h1b
      p7b_1 = p7b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_2_1',1,MA_ERR)
      IF ((h1b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p7b_1 - 1 
     &+ (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h12b_1 - 1 + (noab+nva
     &b) * (h11b_1 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_2_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_11_2_1',3,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idima_sort = h11 + int_mb(k_range+h11b-1) * ((h12 - 1) + int_mb(k_
     &range+h12b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p7b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * (h11b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_2_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_2_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_11_2_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_11_2_1',0,MA_ERR)
      size = 0
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h12
     &b - 1 + noab * (h11b - 1)))) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h12 h1 p7 )_vt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * v ( h11 h12 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER p7b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h11
      INTEGER h12
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h11b_2 = h11b
      h12b_2 = h12b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_2_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_2_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_2_2',4,MA_ERR)
      IF ((p8b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_range+p8
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noab+nva
     &b) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_2_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_2_2',7,MA_ERR)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h11 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h12b - 1 + noab * 
     &(h11b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_2_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_2_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_2_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_2_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p7 )_vx + = -1 * P( 2 ) * Sum ( h8 p9 ) * x ( p4 p9 h1 h8 )_x * v ( h8 p5 p7 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p7b
      INTEGER p9b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER p5b_2
      INTEGER h8b_2
      INTEGER p7b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p4
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p5
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p9b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p9b_1 = p9b
      h1b_1 = h1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p5b_2 = int_mb(k_alpha+p5b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p5b_2 = p5b
      h8b_2 = h8b
      p7b_2 = p7b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_3',1,MA_ERR)
      IF ((p9b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p9b_1 - n
     &oab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p9b_1 - n
     &oab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_3',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_3',4,MA_ERR)
      IF ((h8b .le. p5b) .and. (p9b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. p5b) .and. (p7b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_3',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_3',7,MA_ERR)
      IF ((p4b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + n
     &vab * (p4b - noab - 1)))))
      END IF
      IF ((p5b .le. p4b)) THEN
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p4b - noab - 1 + n
     &vab * (p5b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_3',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_3',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_3',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p7 )_vx + = -1/2 * Sum ( h8 h9 p10 ) * x ( p4 p5 p10 h1 h8 h9 )_x * v ( h8 h9 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p7b
      INTEGER p10b
      INTEGER h8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER p5
      INTEGER h8
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p10b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h8b-1),in
     &t_mb(k_sym+h9b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)+int_
     &mb(k_spin+h9b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p10b_1 = p10b
      h1b_1 = h1b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_4',1,MA_ERR)
      IF ((p10b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h8b .lt. h1b) .and. (h1b .le. h9b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p10b_1 - noab - 1)))))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b) .and. (h9b .lt. h1b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b) .and. (h8b .lt. h1b) .an
     &d. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (p10b .lt. p5b) .and. (h1b .le. h8b)) TH
     &EN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (h8b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b) .and. (h8b .lt. h1b) .and. (h1b .le. h9b)) THE
     &N
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p10b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1) + int_
     &mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_4',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_4',4,MA_ERR)
      IF ((p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_4',5,MA_E
     &RR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_4',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + n
     &vab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_4',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_4',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_4',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_4',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p5 h1 p7 )_vxt + = 1/2 * Sum ( h8 h9 ) * t ( p4 p5 h8 h9 )_t * i2 ( h8 h9 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER h1b
      INTEGER p7b
      INTEGER h8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER h1b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h1
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,ieor(irrep_x
     &,irrep_t))) THEN
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      h1b_2 = h1b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_5',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_5',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_5',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_5',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h1b_2 - 1 + noab * (h9b_2 - 1 + noab * (h8b_2 - 1
     &)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = h8 + int_mb(k_range+h8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_5',5,MA_E
     &RR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_5',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + n
     &vab * (p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_5',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_5',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_5',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_5',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_11_5_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h9 h1 p7 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h8 h9 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h9b
      INTEGER h1b
      INTEGER p7b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER h9
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p10b_1 = p10b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_11_5_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_11_5_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_11_5_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_11_5_1',4,MA_ERR)
      IF ((p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_11_5_1',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_5_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_11_5_1',7,MA_ERR)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h9b - 1 + noab * (
     &h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_11_5_1',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_11_5_1'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_11_5_1'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_11_5_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_11_5_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h8 h9 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h8b
      INTEGER h9b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_11_5_1',0,MA_ERR)
      size = 0
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h9b
     & - 1 + noab * (h8b - 1)))) = size
      size = size + int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_12(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1/4 * P( 3 ) * Sum ( h7 h8 ) * t ( p4 p5 h7 h8 )_t * i1 ( h7 h8 p6 h1 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h7
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h7b-1)+in
     &t_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p6b_2 = p6b
      h7b_2 = h7b
      h8b_2 = h8b
      h1b_2 = h1b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_12',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_12',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - n
     &oab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_12',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_12',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_12',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab
     & * (h7b_2 - 1 + noab * (p6b_2 - noab - 1)))))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ra
     &nge+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p6 - 1))))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_12',5,MA_ERR
     &)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_12',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_12',7,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_12',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_12',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_12',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_12',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_12_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h8 p4 h1 h2 h3 )_vx + = -1 * Sum ( p9 p10 ) * x ( p4 p9 p10 h1 h2 h3 )_x * v ( h7 h8 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p9b
      INTEGER p10b
      INTEGER p4b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h7b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h7b-1),ieor(int_mb(
     &k_sym+h8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p9b-1)+in
     &t_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_12_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_12_1',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .lt. p4b) .and. (p4b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p4b_1 - noab - 1 + nvab * (p9b_1 - noab - 1)))))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p9 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 
     &1 + nvab * (p9b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p10 - 1) + int_mb(k_r
     &ange+p10b-1) * ((p9 - 1) + int_mb(k_range+p9b-1) * ((p4 - 1))))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_12_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_12_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_12_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_12_1',5,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_12_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_12_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_ra
     &nge+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h8b - 1
     & + noab * (h7b - 1 + noab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_12_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_12_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_12_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_12_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_12_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h8 p4 h1 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_12_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p4b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+p4b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      int_mb(k_a_offset + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + 
     &noab * (h8b - 1 + noab * (h7b - 1 + noab * (p4b - noab - 1)))))) =
     & size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h7b-1) * int_
     &mb(k_range+h8b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) 
     &* int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_fxt + = -1 * P( 3 ) * Sum ( h7 ) * t ( p4 p5 p6 h1 h2 h7 )_t * i1 ( h7 h3 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h7b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h7b_1
      INTEGER h7b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_f,ieor(irrep_x,irrep_t))) TH
     &EN
      DO h7b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h7b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h2b_1 = h2b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h3b-1).eq
     &.4)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      h7b_2 = h7b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13',1,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h7b) .and. (h7b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h7b_2 - 1)))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h7 - 1))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13',5,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13',7,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h1 )_fx + = 1 * Sum ( p11 ) * x ( p11 h1 )_x * i2 ( h7 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h1b
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p11
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,irrep_x)) THEN
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p11b_1 = int_mb(k_alpha+p11b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p11b_1 = p11b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p11b-1).e
     &q.4)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      ELSE
      h7b_2 = h7b
      p11b_2 = p11b
      END IF
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p11b_1 - noab - 1)))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p11 - 1))
      idima_sort = p11 + int_mb(k_range+p11b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - n
     &oab - 1 + nvab * (h7b_2 - 1)))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((h7 - 1))
      idimb_sort = p11 + int_mb(k_range+p11b-1) * ((h7 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13_1',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_13_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h1 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h7b
      INTEGER h1b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_13_1',0,MA_ERR)
      size = 0
      DO h7b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + h1b - 1 + noab * (h7b - 1)) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 p11 )_f + = 1 * f ( h7 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER p11b
      INTEGER h7b_1
      INTEGER p11b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h7
      INTEGER p11
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p11b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p11b-1)) .eq. irrep_f) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p11b-1).e
     &q.4)) THEN
      h7b_1 = int_mb(k_alpha+h7b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      ELSE
      h7b_1 = h7b
      p11b_1 = p11b
      END IF
      dim_common = 1
      dima_sort = int_mb(k_range+h7b-1) * int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_1_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p11b_1 - 1
     & + (noab+nvab) * (h7b_1 - 1)))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima = p11 + int_mb(k_range+p11b-1) * ((h7 - 1))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p11 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_1_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort,'noname',l_c,k_c)) CALL ERRQ
     &UIT('eomccsdt_x3_13_1_1',3,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p11 - 1))
      idimc = p11 + int_mb(k_range+p11b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_a_sort + idima_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort,int_mb(k_c_offset + p11b 
     &- noab - 1 + nvab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_1_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_1_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_13_1_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 p11 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h7b
      INTEGER p11b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_13_1_1',0,MA_ERR)
      size = 0
      DO h7b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p11b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p11b-
     &1).ne.4)) THEN
      int_mb(k_a_offset + p11b - noab - 1 + nvab * (h7b - 1)) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+p11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 p11 )_vt + = -1 * Sum ( h9 p8 ) * t ( p8 h9 )_t * v ( h7 h9 p8 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER p11b
      INTEGER p8b
      INTEGER h9b
      INTEGER p8b_1
      INTEGER h9b_1
      INTEGER h7b_2
      INTEGER h9b_2
      INTEGER p11b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER p11
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p11b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p11b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      DO p8b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h9b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p8b_1 = p8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p11b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p11b_2 = int_mb(k_alpha+p11b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h7b_2 = h7b
      h9b_2 = h9b
      p11b_2 = p11b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+p11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_1_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_1_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_1_2',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13_1_2',4,MA_ERR)
      IF ((h9b .lt. h7b) .and. (p8b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h7b) .and. (p11b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h9 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h9b) .and. (p8b .le. p11b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p11b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimb = p11 + int_mb(k_range+p11b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h7 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h9b) .and. (p11b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p11 - 1) + int_mb(k_range+p
     &11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h7 - 1))))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h9 - 1) + int_mb(k_ran
     &ge+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p11 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13_1_2',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13_1_2',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      idimc_sort = h7 + int_mb(k_range+h7b-1) * ((p11 - 1))
      idimc = p11 + int_mb(k_range+p11b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p11b - noab - 1 + nvab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_1_2',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_1_2'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13_1_2'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_1_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h1 )_vx + = 1 * Sum ( h8 p9 ) * x ( p9 h8 )_x * v ( h7 h8 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h1b
      INTEGER p9b
      INTEGER h8b
      INTEGER p9b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p9b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h8b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p9b_1 = p9b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      h1b_2 = h1b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h8b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13_2',4,MA_ERR)
      IF ((h8b .lt. h7b) .and. (h1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h8b) .and. (h1b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13_2',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13_2',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h7 + int_mb(k_range+h7b-1) * ((h1 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h1 )_vx + = 1/2 * Sum ( h8 p9 p10 ) * x ( p9 p10 h1 h8 )_x * v ( h7 h8 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h1b
      INTEGER p9b
      INTEGER p10b
      INTEGER h8b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_3',1,MA_ERR)
      IF ((h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 - 
     &noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 - 
     &noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_3',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13_3',4,MA_ERR)
      IF ((h8b .lt. h7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13_3',5,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13_3',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_3',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_3',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13_3',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h1 )_vxt + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h7 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h1b
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_x,irrep_t))) THEN
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p8b_1 = p8b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1).eq
     &.4)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h7b_2 = h7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_4',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_4',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p8b_1 - noab - 1)))
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p8 - 1))
      idima_sort = p8 + int_mb(k_range+p8b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_4',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13_4',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - no
     &ab - 1 + nvab * (h7b_2 - 1)))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((h7 - 1))
      idimb_sort = p8 + int_mb(k_range+p8b-1) * ((h7 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13_4',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13_4',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_4',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_4',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13_4',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_4',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_13_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 p8 )_vx + = 1 * Sum ( h9 p10 ) * x ( p10 h9 )_x * v ( h7 h9 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER p8b
      INTEGER p10b
      INTEGER h9b
      INTEGER p10b_1
      INTEGER h9b_1
      INTEGER h7b_2
      INTEGER h9b_2
      INTEGER p8b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER p8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p10b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h9b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h9b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p10b_1 = p10b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p8b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h7b_2 = h7b
      h9b_2 = h9b
      p8b_2 = p8b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h9b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_13_4_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_13_4_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_13_4_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_13_4_1',4,MA_ERR)
      IF ((h9b .lt. h7b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h7b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h9b) .and. (p10b .lt. p8b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h7 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .le. h9b) .and. (p8b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p8 - 1) + int_mb(k_range+
     &p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h7 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_13_4_1',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_4_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_13_4_1',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimc_sort = h7 + int_mb(k_range+h7b-1) * ((p8 - 1))
      idimc = p8 + int_mb(k_range+p8b-1) * ((h7 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p8b - noab - 1 + nvab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_13_4_1',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_13_4_1'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_13_4_1'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_13_4_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_13_4_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 p8 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h7b
      INTEGER p8b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_13_4_1',0,MA_ERR)
      size = 0
      DO h7b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p8b - noab - 1 + nvab * (h7b - 1)) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_14(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = 1/2 * P( 3 ) * Sum ( h7 h8 ) * t ( p4 p5 p6 h1 h7 h8 )_t * i1 ( h7 h8 h2 h3 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h8
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h7b-1),int
     &_mb(k_sym+h8b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h7b-1)+int_m
     &b(k_spin+h8b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h7b_1 = h7b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_14',1,MA_ERR)
      IF ((h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h7b .lt. h1b) .and. (h1b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_14',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_14',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h8b_2 - 1 + noab * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_14',5,MA_ERR
     &)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_14',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_14',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_14',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_14',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_14',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_14',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_14_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h8 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( p9 ) * x ( p9 h1 )_x * v ( h7 h8 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h2b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      h2b_2 = h2b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_14_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_14_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_14_1',4,MA_ERR)
      IF ((h2b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nvab
     &) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_14_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_14_1',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h8b - 1 + noab * (h7b - 1
     &)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h8b - 1 + noab * (h7b - 1
     &)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_14_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_14_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_14_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_14_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h8 h1 h2 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER h2b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*noab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_14_1',0,MA_ERR)
      size = 0
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      int_mb(k_a_offset + h2b - 1 + noab * (h1b - 1 + noab * (h8b - 1 + 
     &noab * (h7b - 1)))) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_14_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h8 h1 h2 )_vx + = 1/2 * Sum ( p9 p10 ) * x ( p9 p10 h1 h2 )_x * v ( h7 h8 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_14_2',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 - 
     &noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_14_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_14_2',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_14_2',5,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_14_2',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((h8 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h8b - 1 + noab * (h7b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_14_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_14_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_14_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_14_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h7 h8 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p9 ) * t ( p9 h1 )_t * i2 ( h7 h8 h2 p9 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER h2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_x
     &,irrep_t))) THEN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h2b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      h2b_2 = h2b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_14_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_14_3',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_14_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - no
     &ab - 1 + nvab * (h2b_2 - 1 + noab * (h8b_2 - 1 + noab * (h7b_2 - 1
     &)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_14_3',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_14_3',7,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h2 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h8b - 1 + noab * (h7b - 1
     &)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h2 - 1))))
      idimc = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h1b - 1 + noab * (h2b - 1 + noab * (h8b - 1 + noab * (h7b - 1
     &)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_14_3',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_3',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_14_3',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_14_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_14_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h8 h1 p9 )_vx + = -1 * Sum ( p10 ) * x ( p10 h1 )_x * v ( h7 h8 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p9b
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h7
      INTEGER h8
      INTEGER p9
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+p10b-1)+int_mb(k_spin+h1b-1).e
     &q.4)) THEN
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p10b_1 = p10b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h7b_2 = h7b
      h8b_2 = h8b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_14_3_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p10b_1 - noab - 1)))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p10 - 1))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_14_3_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_14_3_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_14_3_1',4,MA_ERR)
      IF ((p10b .lt. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h7 - 1) + int_mb(k_r
     &ange+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p9b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h7b_2 - 1)))))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h7 - 1) + int_mb(k_r
     &ange+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p9 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_14_3_1',5,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_3_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_14_3_1',7,MA_ERR)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h7 - 1) + int_mb(k_ran
     &ge+h7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p9 - 1))))
      idimc = p9 + int_mb(k_range+p9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h7 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p9b - noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (
     &h7b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_14_3_1',8,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_14_3_1'
     &,9,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_14_3_1'
     &,10,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_14_3_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_14_3_1(d_a,l_a_offset,k_a_offset,siz
     &e)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h8 h1 p9 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p9b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_14_3_1',0,MA_ERR)
      size = 0
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      int_mb(k_a_offset + p9b - noab - 1 + nvab * (h1b - 1 + noab * (h8b
     & - 1 + noab * (h7b - 1)))) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_15(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = 1 * P( 3 ) * Sum ( p7 ) * t ( p4 p5 p7 h1 h2 h3 )_t * i1 ( p6 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1).eq
     &.4)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p6b_2 = p6b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_15',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_15',1,MA_ERR)
      IF ((p7b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_15',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_15',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_15',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (p6b_2 - noab - 1)))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p6 - 1))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p6 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_15',5,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_15',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_15',7,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_15',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_15',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_15',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_15',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_15_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p7 )_vx + = -1 * Sum ( h8 p9 ) * x ( p9 h8 )_x * v ( h8 p4 p7 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p7b
      INTEGER p9b
      INTEGER h8b
      INTEGER p9b_1
      INTEGER h8b_1
      INTEGER p4b_2
      INTEGER h8b_2
      INTEGER p7b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p4
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p9b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h8b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h8b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p9b_1 = p9b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p4b_2 = p4b
      h8b_2 = h8b
      p7b_2 = p7b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h8b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_15_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_15_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_15_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_15_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_15_1',4,MA_ERR)
      IF ((h8b .le. p4b) .and. (p9b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. p4b) .and. (p7b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_15_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_15_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_15_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((p4 - 1))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (p4b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_15_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_15_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_15_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_15_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_15_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,nvab*nvab,'noname',l_a_offset,k_a_offs
     &et)) CALL ERRQUIT('eomccsdt_x3_15_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (p4b - noab - 1)) = si
     &ze
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_15_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p4 p7 )_vx + = -1/2 * Sum ( h8 h9 p10 ) * x ( p4 p10 h8 h9 )_x * v ( h8 h9 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p7b
      INTEGER p10b
      INTEGER h8b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p10b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER h8
      INTEGER h9
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_x)) THEN
      DO p10b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p10b_1 = p10b
      h8b_1 = h8b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_15_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_15_2',1,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_15_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_15_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_15_2',4,MA_ERR)
      IF ((p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h8 - 1) + int_mb(k_r
     &ange+h8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_15_2',5,MA_E
     &RR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_15_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_15_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p7 - 1))
      idimc = p7 + int_mb(k_range+p7b-1) * ((p4 - 1))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (p4b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_15_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_15_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_15_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_15_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_16(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vxt + = -1 * P( 9 ) * Sum ( h8 p7 ) * t ( p4 p5 p7 h1 h2 h8 )_t * i1 ( h8 p6 h3 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER h8b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h8b_1
      INTEGER p6b_2
      INTEGER h8b_2
      INTEGER h3b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p4
      INTEGER p5
      INTEGER h8
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_x,irrep_t))) TH
     &EN
      DO p7b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h8b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h8b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h8b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h8b_1 = int_mb(k_alpha+h8b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p7b_1 = p7b
      h1b_1 = h1b
      h2b_1 = h2b
      h8b_1 = h8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+h3b-1)+int_mb(k_spin+p7b-1).eq.8)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      ELSE
      p6b_2 = p6b
      h8b_2 = h8b
      h3b_2 = h3b
      p7b_2 = p7b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_16',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_16',1,MA_ERR)
      IF ((p7b .lt. p4b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h1b .le. h8b) .and.
     & (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b) .and. (p7b .lt. p5b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h8 - 1) + int_mb(k_range+h8
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p5b .le. p7b) .and. (h2b .le. h8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h8b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      idima = h8 + int_mb(k_range+h8b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p7 - 1) + int_mb(k_ra
     &nge+p7b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb
     &(k_range+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_16',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_16',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_16',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - no
     &ab - 1 + nvab * (h3b_2 - 1 + noab * (h8b_2 - 1 + noab * (p6b_2 - n
     &oab - 1)))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p6 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((h8 - 1) + int_mb(k_ran
     &ge+h8b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_16',5,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_16',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_16',7,MA_ERR)
      IF ((p5b .le. p6b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h2b .le. h3b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h3b .le. h1b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b) .and. (h1b .le. h3b) .and.
     & (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb
     &(k_range+h2b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_16',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_16',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_16',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_16',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_16_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h8 p4 h1 p7 )_vx + = -1 * Sum ( p9 ) * x ( p9 h1 )_x * v ( h8 p4 p7 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h8b
      INTEGER h1b
      INTEGER p7b
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER p4b_2
      INTEGER h8b_2
      INTEGER p7b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p4
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_x) TH
     &EN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+h1b-1).eq
     &.4)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      ELSE
      p9b_1 = p9b
      h1b_1 = h1b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p9b-1).eq.8)) THEN
      p4b_2 = int_mb(k_alpha+p4b-1)
      h8b_2 = int_mb(k_alpha+h8b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      ELSE
      p4b_2 = p4b
      h8b_2 = h8b
      p7b_2 = p7b
      p9b_2 = p9b
      END IF
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_16_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_16_1',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (p9b_1 - noab - 1)))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((p9 - 1))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((h1 - 1))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_16_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_16_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_16_1',4,MA_ERR)
      IF ((h8b .le. p4b) .and. (p9b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p9 - 1) + int_mb(k_range+p9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. p4b) .and. (p7b .le. p9b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p9b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab
     &) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      idimb = p9 + int_mb(k_range+p9b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h8 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_16_1',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_16_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_16_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (
     &p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_16_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_16_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_16_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_16_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_16_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h8 p4 h1 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h8b
      INTEGER h1b
      INTEGER p7b
      IF (.not.MA_PUSH_GET(mt_int,noab*nvab*noab*nvab,'noname',l_a_offse
     &t,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_16_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      int_mb(k_a_offset + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h8b
     & - 1 + noab * (p4b - noab - 1)))) = size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h8b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p7b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE eomccsdt_x3_16_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h8 p4 h1 p7 )_vx + = -1 * Sum ( h9 p10 ) * x ( p4 p10 h1 h9 )_x * v ( h8 h9 p7 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h8b
      INTEGER h1b
      INTEGER p7b
      INTEGER p10b
      INTEGER h9b
      INTEGER p4b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER p7b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p10
      INTEGER p4
      INTEGER h9
      INTEGER h1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h8
      INTEGER p7
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h1b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_x)) TH
     &EN
      DO p10b = noab+1,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      ELSE
      p4b_1 = p4b
      p10b_1 = p10b
      h1b_1 = h1b
      h9b_1 = h9b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+p7b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h8b_2 = int_mb(k_alpha+h8b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h8b_2 = h8b
      h9b_2 = h9b
      p7b_2 = p7b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_16_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_16_2',1,MA_ERR)
      IF ((p10b .lt. p4b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p10b .lt. p4b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p10b_1 - 
     &noab - 1)))))
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p10 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (h9b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h1b_1 - 1 
     &+ noab * (h9b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      idima = h1 + int_mb(k_range+h1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p10b) .and. (h1b .le. h9b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h9b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      idima = h9 + int_mb(k_range+h9b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p4 - 1))))
      idima_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_16_2',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_16_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_16_2',4,MA_ERR)
      IF ((h9b .lt. h8b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h9b .lt. h8b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((h9 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h9b) .and. (p10b .lt. p7b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p7b_2 - 1 
     &+ (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimb = p7 + int_mb(k_range+p7b-1) * ((p10 - 1) + int_mb(k_range+p
     &10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = - dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h8b .le. h9b) .and. (p7b .le. p10b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab+nva
     &b) * (h8b_2 - 1)))))
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p7 - 1) + int_mb(k_range+
     &p7b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h8 - 1))))
      idimb_sort = p10 + int_mb(k_range+p10b-1) * ((h9 - 1) + int_mb(k_r
     &ange+h9b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_16_2',5,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_16_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_16_2',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h8 = 1,int_mb(k_range+h8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p7 - 1))))
      idimc = p7 + int_mb(k_range+p7b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h8 - 1) + int_mb(k_range+h8b-1) * ((p4 - 1))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p7b - noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (
     &p4b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_16_2',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_16_2',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_16_2',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_16_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_17(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vtx + = 1/4 * P( 3 ) * Sum ( h9 h10 ) * x ( p4 p5 h9 h10 )_x * i1 ( h9 h10 p6 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h9b
      INTEGER h10b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER p6b_2
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER h9
      INTEGER h10
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p6
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_x))) TH
     &EN
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_x) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1).eq.8)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h10b_1 = int_mb(k_alpha+h10b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      h9b_1 = h9b
      h10b_1 = h10b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p6b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_
     &mb(k_spin+h3b-1).eq.12)) THEN
      p6b_2 = int_mb(k_alpha+p6b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      h1b_2 = int_mb(k_alpha+h1b-1)
      h2b_2 = int_mb(k_alpha+h2b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      p6b_2 = p6b
      h9b_2 = h9b
      h10b_2 = h10b
      h1b_2 = h1b
      h2b_2 = h2b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_17',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_17',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h10b_1 - 1
     & + noab * (h9b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p4b_1 - 
     &noab - 1)))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      idima = h10 + int_mb(k_range+h10b-1) * ((h9 - 1) + int_mb(k_range+
     &h9b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p5 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_17',2,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_17',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_17',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h2b_2 - 1 + noab * (h1b_2 - 1 + noab * (h10b_2 - 1 + noa
     &b * (h9b_2 - 1 + noab * (p6b_2 - noab - 1)))))))
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_r
     &ange+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p6 - 1))))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h10 - 1) + int_mb(k_ra
     &nge+h10b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_
     &mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))
     &))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_17',5,MA_ERR
     &)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h9b .eq. h10b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_17',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_17',7,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((p6b .le. p4b)) THEN
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p6 - 1))))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p4b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p4b .le. p6b) .and. (p6b .le. p5b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p5 - 1) + int_mb(k_ra
     &nge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/4.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - n
     &oab - 1 + nvab * (p6b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_17',8,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_17',9,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_17',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_17',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE eomccsdt_x3_17_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h10 p4 h1 h2 h3 )_vt + = 1 * Sum ( p7 p8 ) * t ( p4 p7 p8 h1 h2 h3 )_t * v ( h9 h10 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER h9b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER p7b
      INTEGER p8b
      INTEGER p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p7
      INTEGER p8
      INTEGER p4
      INTEGER h1
      INTEGER h2
      INTEGER h3
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h9
      INTEGER h10
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p7b-1)+in
     &t_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h3b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p7b_1 = int_mb(k_alpha+p7b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h3b_1 = int_mb(k_alpha+h3b-1)
      ELSE
      p4b_1 = p4b
      p7b_1 = p7b
      p8b_1 = p8b
      h1b_1 = h1b
      h2b_1 = h2b
      h3b_1 = h3b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+i
     &nt_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h9b_2 = int_mb(k_alpha+h9b-1)
      h10b_2 = int_mb(k_alpha+h10b-1)
      p7b_2 = int_mb(k_alpha+p7b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      ELSE
      h9b_2 = h9b
      h10b_2 = h10b
      p7b_2 = p7b
      p8b_2 = p8b
      END IF
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdt_x3_17_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdt_x3_17_1',1,MA_ERR)
      IF ((p8b .lt. p4b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1
     & + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p4 - 1) + int_mb(k_ra
     &nge+p4b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p7b .lt. p4b) .and. (p4b .le. p8b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p4b_1 - noab - 1 + nvab * (p7b_1 - noab - 1)))))))
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((p7 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((p4b .le. p7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h3b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1
     & + nvab * (p7b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idima = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p8 - 1) + int_mb(k_ra
     &nge+p8b-1) * ((p7 - 1) + int_mb(k_range+p7b-1) * ((p4 - 1))))))
      idima_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((p4 - 1) + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdt_x3_17_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdt_x3_17_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdt_x3_17_1',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p8b_2 - 1 
     &+ (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noab+nva
     &b) * (h9b_2 - 1)))))
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO p7 = 1,int_mb(k_range+p7b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idimb = p8 + int_mb(k_range+p8b-1) * ((p7 - 1) + int_mb(k_range+p7
     &b-1) * ((h10 - 1) + int_mb(k_range+h10b-1) * ((h9 - 1))))
      idimb_sort = p7 + int_mb(k_range+p7b-1) * ((p8 - 1) + int_mb(k_ran
     &ge+p8b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdt_x3_17_1',5,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdt_x3_17_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdt_x3_17_1',7,MA_ERR)
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h10 = 1,int_mb(k_range+h10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((h1 - 1) + int_mb(k_ran
     &ge+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb
     &(k_range+h3b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h10 - 1)))
     &)))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h10 - 1) + int_mb(k_r
     &ange+h10b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h10b - 
     &1 + noab * (h9b - 1 + noab * (p4b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdt_x3_17_1',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdt_x3_17_1',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdt_x3_17_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdt_x3_17_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_eomccsdt_x3_17_1(d_a,l_a_offset,k_a_offset,size)
C     $Id: eomccsdt_x3.F,v 1.1 2003-10-19 00:57:53 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h10 p4 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER p4b
      INTEGER h9b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      IF (.not.MA_PUSH_GET(mt_int,noab*noab*nvab*noab*noab*noab,'noname'
     &,l_a_offset,k_a_offset)) CALL ERRQUIT('eomccsdt_x3_17_1',0,MA_ERR)
      size = 0
      DO p4b = noab+1,noab+nvab
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p4b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+p4b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      int_mb(k_a_offset + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + 
     &noab * (h10b - 1 + noab * (h9b - 1 + noab * (p4b - noab - 1)))))) 
     &= size
      size = size + int_mb(k_range+p4b-1) * int_mb(k_range+h9b-1) * int_
     &mb(k_range+h10b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
     & * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
