      SUBROUTINE eomccsdtq_x4_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: eomccsdtq_x4_5_3.F,v 1.1 2003-10-19 00:59:04 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h13 h14 h1 h2 )_vt + = 1/2 * Sum ( p9 p10 ) * t ( p9 p10 h1 h2 )_t * v ( h13 h14 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h13b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h13b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p9
      INTEGER p10
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h13
      INTEGER h14
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h13b = 1,noab
      DO h14b = h13b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)+i
     &nt_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).eq.8)) THEN
      p9b_1 = int_mb(k_alpha+p9b-1)
      p10b_1 = int_mb(k_alpha+p10b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      ELSE
      p9b_1 = p9b
      p10b_1 = p10b
      h1b_1 = h1b
      h2b_1 = h2b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+
     &int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).eq.8)) THEN
      h13b_2 = int_mb(k_alpha+h13b-1)
      h14b_2 = int_mb(k_alpha+h14b-1)
      p9b_2 = int_mb(k_alpha+p9b-1)
      p10b_2 = int_mb(k_alpha+p10b-1)
      ELSE
      h13b_2 = h13b
      h14b_2 = h14b
      p9b_2 = p9b
      p10b_2 = p10b
      END IF
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdtq_x4_5_3',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdtq_x4_5_3',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p9b_1 - 
     &noab - 1)))))
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((p10 - 1) + int_mb(k_range+p10b-1) * ((p9 - 1))))
      idima_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdtq_x4_5_3',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdtq_x4_5_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdtq_x4_5_3',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p10b_2 - 1
     & + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (noab+nv
     &ab) * (h13b_2 - 1)))))
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO p9 = 1,int_mb(k_range+p9b-1)
      DO p10 = 1,int_mb(k_range+p10b-1)
      idimb = p10 + int_mb(k_range+p10b-1) * ((p9 - 1) + int_mb(k_range+
     &p9b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h13 - 1))))
      idimb_sort = p9 + int_mb(k_range+p9b-1) * ((p10 - 1) + int_mb(k_ra
     &nge+p10b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h14 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdtq_x4_5_3',5,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdtq_x4_5_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdtq_x4_5_3',7,MA_ERR)
      DO h13 = 1,int_mb(k_range+h13b-1)
      DO h14 = 1,int_mb(k_range+h14b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = h1 + int_mb(k_range+h1b-1) * ((h2 - 1) + int_mb(k_ran
     &ge+h2b-1) * ((h13 - 1) + int_mb(k_range+h13b-1) * ((h14 - 1))))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h14 - 1) + int_mb(k_range+h14b-1) * ((h13 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h13b -
     & 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdtq_x4_5_3',8,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdtq_x4_5_3',9
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdtq_x4_5_3',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdtq_x4_5_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
