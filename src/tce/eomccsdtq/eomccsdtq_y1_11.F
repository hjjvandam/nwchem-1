      SUBROUTINE eomccsdtq_y1_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdtq_y1_11.F,v 1.1 2003-10-19 00:59:09 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h2 p1 )_ytv + = 1 * Sum ( h9 h11 p8 ) * i1 ( h2 h9 h11 p8 )_yt * v ( h11 p8 h9 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p1b
      INTEGER h9b
      INTEGER h11b
      INTEGER p8b
      INTEGER h2b_1
      INTEGER h9b_1
      INTEGER h11b_1
      INTEGER p8b_1
      INTEGER h11b_2
      INTEGER p8b_2
      INTEGER p1b_2
      INTEGER h9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h2
      INTEGER h9
      INTEGER h11
      INTEGER p8
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p1
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &y,ieor(irrep_t,irrep_v))) THEN
      DO h9b = 1,noab
      DO h11b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_y,irrep_t)) T
     &HEN
      IF ((restricted).and.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h9b-1)+in
     &t_mb(k_spin+h11b-1)+int_mb(k_spin+p8b-1).eq.8)) THEN
      h2b_1 = int_mb(k_alpha+h2b-1)
      h9b_1 = int_mb(k_alpha+h9b-1)
      h11b_1 = int_mb(k_alpha+h11b-1)
      p8b_1 = int_mb(k_alpha+p8b-1)
      ELSE
      h2b_1 = h2b
      h9b_1 = h9b
      h11b_1 = h11b
      p8b_1 = p8b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p8b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+h9b-1).eq.8)) THEN
      h11b_2 = int_mb(k_alpha+h11b-1)
      p8b_2 = int_mb(k_alpha+p8b-1)
      p1b_2 = int_mb(k_alpha+p1b-1)
      h9b_2 = int_mb(k_alpha+h9b-1)
      ELSE
      h11b_2 = h11b
      p8b_2 = p8b
      p1b_2 = p1b
      h9b_2 = h9b
      END IF
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdtq_y1_11',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdtq_y1_11',1,MA_ERR)
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p8b_1 - no
     &ab - 1 + nvab * (h11b_1 - 1 + noab * (h9b_1 - 1 + noab * (h2b_1 - 
     &1)))))
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      idima = p8 + int_mb(k_range+p8b-1) * ((h11 - 1) + int_mb(k_range+h
     &11b-1) * ((h9 - 1) + int_mb(k_range+h9b-1) * ((h2 - 1))))
      idima_sort = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((h2 - 1))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdtq_y1_11',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdtq_y1_11',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdtq_y1_11',4,MA_ERR)
      IF ((h9b .le. p1b)) THEN
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + p1b_2 - 1 
     &+ (noab+nvab) * (h9b_2 - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab
     &) * (h11b_2 - 1)))))
      DO h11 = 1,int_mb(k_range+h11b-1)
      DO p8 = 1,int_mb(k_range+p8b-1)
      DO h9 = 1,int_mb(k_range+h9b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimb = p1 + int_mb(k_range+p1b-1) * ((h9 - 1) + int_mb(k_range+h9
     &b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((h11 - 1))))
      idimb_sort = h9 + int_mb(k_range+h9b-1) * ((h11 - 1) + int_mb(k_ra
     &nge+h11b-1) * ((p8 - 1) + int_mb(k_range+p8b-1) * ((p1 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdtq_y1_11',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdtq_y1_11',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdtq_y1_11',7,MA_ERR)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h2 + int_mb(k_range+h2b-1) * ((p1 - 1))
      idimc = p1 + int_mb(k_range+p1b-1) * ((h2 - 1))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdtq_y1_11',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdtq_y1_11',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdtq_y1_11',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdtq_y1_11',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
