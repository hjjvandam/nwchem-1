      SUBROUTINE eomccsdtq_y2_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdtq_y2_11.F,v 1.1 2003-10-19 00:59:34 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h3 h4 p1 p2 )_yv + = 1/2 * P( 2 ) * Sum ( h12 p11 p13 ) * y ( h3 h4 h12 p1 p11 p13 )_y * i1 ( p11 p13 h12 p2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER p11b
      INTEGER p13b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h12b_1
      INTEGER p1b_1
      INTEGER p11b_1
      INTEGER p13b_1
      INTEGER p11b_2
      INTEGER p13b_2
      INTEGER p2b_2
      INTEGER h12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER h12
      INTEGER h3
      INTEGER h4
      INTEGER p11
      INTEGER p13
      INTEGER p1
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER p2
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. ieor(irrep_y,irrep_v)) TH
     &EN
      DO h12b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p13b = p11b,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+int_mb(k_spin+h12b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p11b-1)+int_mb(k_spin+p1
     &3b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h12b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p11b-1),i
     &nt_mb(k_sym+p13b-1)))))) .eq. irrep_y) THEN
      IF ((restricted).and.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+in
     &t_mb(k_spin+h12b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p11b-1)+int
     &_mb(k_spin+p13b-1).eq.12)) THEN
      h3b_1 = int_mb(k_alpha+h3b-1)
      h4b_1 = int_mb(k_alpha+h4b-1)
      h12b_1 = int_mb(k_alpha+h12b-1)
      p1b_1 = int_mb(k_alpha+p1b-1)
      p11b_1 = int_mb(k_alpha+p11b-1)
      p13b_1 = int_mb(k_alpha+p13b-1)
      ELSE
      h3b_1 = h3b
      h4b_1 = h4b
      h12b_1 = h12b
      p1b_1 = p1b
      p11b_1 = p11b
      p13b_1 = p13b
      END IF
      IF ((restricted).and.(int_mb(k_spin+p11b-1)+int_mb(k_spin+p13b-1)+
     &int_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1).eq.8)) THEN
      p11b_2 = int_mb(k_alpha+p11b-1)
      p13b_2 = int_mb(k_alpha+p13b-1)
      p2b_2 = int_mb(k_alpha+p2b-1)
      h12b_2 = int_mb(k_alpha+h12b-1)
      ELSE
      p11b_2 = p11b
      p13b_2 = p13b
      p2b_2 = p2b
      h12b_2 = h12b
      END IF
      dim_common = int_mb(k_range+h12b-1) * int_mb(k_range+p11b-1) * int
     &_mb(k_range+p13b-1)
      dima_sort = int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdtq_y2_11',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdtq_y2_11',1,MA_ERR)
      IF ((h12b .lt. h3b) .and. (p13b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p13b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + n
     &vab * (h4b_1 - 1 + noab * (h3b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p13 - 1) + int_mb(k_range+p
     &13b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h12 - 1))))
     &))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h3b) .and. (p11b .lt. p1b) .and. (p1b .le. p13b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p13b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + n
     &vab * (h4b_1 - 1 + noab * (h3b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idima = p13 + int_mb(k_range+p13b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h12 - 1))))
     &))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h12b .lt. h3b) .and. (p1b .le. p11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p13b_1 - n
     &oab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + n
     &vab * (h4b_1 - 1 + noab * (h3b_1 - 1 + noab * (h12b_1 - 1)))))))
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idima = p13 + int_mb(k_range+p13b-1) * ((p11 - 1) + int_mb(k_range
     &+p11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((h12 - 1))))
     &))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h12b) .and. (h12b .lt. h4b) .and. (p13b .lt. p1b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p13b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + n
     &vab * (h4b_1 - 1 + noab * (h12b_1 - 1 + noab * (h3b_1 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p13 - 1) + int_mb(k_range+p
     &13b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1)))
     &)))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h12b) .and. (h12b .lt. h4b) .and. (p11b .lt. p1b) .a
     &nd. (p1b .le. p13b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p13b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + n
     &vab * (h4b_1 - 1 + noab * (h12b_1 - 1 + noab * (h3b_1 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idima = p13 + int_mb(k_range+p13b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1)))
     &)))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h3b .le. h12b) .and. (h12b .lt. h4b) .and. (p1b .le. p11b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p13b_1 - n
     &oab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + n
     &vab * (h4b_1 - 1 + noab * (h12b_1 - 1 + noab * (h3b_1 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idima = p13 + int_mb(k_range+p13b-1) * ((p11 - 1) + int_mb(k_range
     &+p11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h4 - 1) + int_mb(
     &k_range+h4b-1) * ((h12 - 1) + int_mb(k_range+h12b-1) * ((h3 - 1)))
     &)))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h12b) .and. (p13b .lt. p1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p1b_1 - no
     &ab - 1 + nvab * (p13b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + n
     &vab * (h12b_1 - 1 + noab * (h4b_1 - 1 + noab * (h3b_1 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idima = p1 + int_mb(k_range+p1b-1) * ((p13 - 1) + int_mb(k_range+p
     &13b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb
     &(k_range+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1)))
     &)))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h12b) .and. (p11b .lt. p1b) .and. (p1b .le. p13b)) T
     &HEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p13b_1 - n
     &oab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p11b_1 - noab - 1 + n
     &vab * (h12b_1 - 1 + noab * (h4b_1 - 1 + noab * (h3b_1 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idima = p13 + int_mb(k_range+p13b-1) * ((p1 - 1) + int_mb(k_range+
     &p1b-1) * ((p11 - 1) + int_mb(k_range+p11b-1) * ((h12 - 1) + int_mb
     &(k_range+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1)))
     &)))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h4b .le. h12b) .and. (p1b .le. p11b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + p13b_1 - n
     &oab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + n
     &vab * (h12b_1 - 1 + noab * (h4b_1 - 1 + noab * (h3b_1 - 1)))))))
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      idima = p13 + int_mb(k_range+p13b-1) * ((p11 - 1) + int_mb(k_range
     &+p11b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((h12 - 1) + int_mb
     &(k_range+h12b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1)))
     &)))
      idima_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((h3 - 1) + 
     &int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((p1 -
     & 1))))))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdtq_y2_11',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdtq_y2_11',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdtq_y2_11',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h12b_2 - 1
     & + noab * (p2b_2 - noab - 1 + nvab * (p13b_2 - noab - 1 + nvab * (
     &p11b_2 - noab - 1)))))
      DO p11 = 1,int_mb(k_range+p11b-1)
      DO p13 = 1,int_mb(k_range+p13b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO h12 = 1,int_mb(k_range+h12b-1)
      idimb = h12 + int_mb(k_range+h12b-1) * ((p2 - 1) + int_mb(k_range+
     &p2b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p11 - 1))))
      idimb_sort = h12 + int_mb(k_range+h12b-1) * ((p11 - 1) + int_mb(k_
     &range+p11b-1) * ((p13 - 1) + int_mb(k_range+p13b-1) * ((p2 - 1))))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdtq_y2_11',5,MA_ER
     &R)
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p11b .eq. p13b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdtq_y2_11',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubp(1))/FACTORIAL(nsubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,0.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdtq_y2_11',7,MA_ERR)
      IF ((p1b .le. p2b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p2 + int_mb(k_range+p2b-1) * ((p1 - 1) + int_mb(k_range+p1
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = 1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_so
     &rt - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF ((p2b .le. p1b)) THEN
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h4 = 1,int_mb(k_range+h4b-1)
      DO p2 = 1,int_mb(k_range+p2b-1)
      DO p1 = 1,int_mb(k_range+p1b-1)
      idimc_sort = h3 + int_mb(k_range+h3b-1) * ((h4 - 1) + int_mb(k_ran
     &ge+h4b-1) * ((p1 - 1) + int_mb(k_range+p1b-1) * ((p2 - 1))))
      idimc = p1 + int_mb(k_range+p1b-1) * ((p2 - 1) + int_mb(k_range+p2
     &b-1) * ((h4 - 1) + int_mb(k_range+h4b-1) * ((h3 - 1))))
      dbl_mb(k_c + idimc - 1) = -1.0d0/2.0d0 * dbl_mb(k_c_sort + idimc_s
     &ort - 1)
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + p1b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (h4b - 1 + n
     &oab * (h3b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdtq_y2_11',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdtq_y2_11',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdtq_y2_11',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdtq_y2_11',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
