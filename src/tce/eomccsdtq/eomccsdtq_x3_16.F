      SUBROUTINE eomccsdtq_x3_16(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: eomccsdtq_x3_16.F,v 1.1 2003-10-19 00:58:51 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_fxt + = -1 * P( 3 ) * Sum ( h7 ) * t ( p4 p5 p6 h1 h2 h7 )_t * i1 ( h7 h3 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h7b
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h7b_1
      INTEGER h7b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER p4
      INTEGER p5
      INTEGER p6
      INTEGER h7
      INTEGER h1
      INTEGER h2
      INTEGER idima
      INTEGER idima_sort
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER h3
      INTEGER idimb
      INTEGER idimb_sort
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER l_c
      INTEGER k_c
      INTEGER idimc_sort
      INTEGER idimc
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_f,ieor(irrep_x,irrep_t))) TH
     &EN
      DO h7b = 1,noab
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      IF ((restricted).and.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+in
     &t_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_m
     &b(k_spin+h7b-1).eq.12)) THEN
      p4b_1 = int_mb(k_alpha+p4b-1)
      p5b_1 = int_mb(k_alpha+p5b-1)
      p6b_1 = int_mb(k_alpha+p6b-1)
      h1b_1 = int_mb(k_alpha+h1b-1)
      h2b_1 = int_mb(k_alpha+h2b-1)
      h7b_1 = int_mb(k_alpha+h7b-1)
      ELSE
      p4b_1 = p4b
      p5b_1 = p5b
      p6b_1 = p6b
      h1b_1 = h1b
      h2b_1 = h2b
      h7b_1 = h7b
      END IF
      IF ((restricted).and.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h3b-1).eq
     &.4)) THEN
      h7b_2 = int_mb(k_alpha+h7b-1)
      h3b_2 = int_mb(k_alpha+h3b-1)
      ELSE
      h7b_2 = h7b
      h3b_2 = h3b
      END IF
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdtq_x3_16',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdtq_x3_16',1,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h7 - 1) + int_mb(k_range+h7b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h1b .le. h7b) .and. (h7b .lt. h2b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h2b_1 - 1 
     &+ noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idima = h2 + int_mb(k_range+h2b-1) * ((h7 - 1) + int_mb(k_range+h7
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = - dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF ((h2b .le. h7b)) THEN
      CALL GET_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset + h7b_1 - 1 
     &+ noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1
     & + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))))))
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h7 = 1,int_mb(k_range+h7b-1)
      idima = h7 + int_mb(k_range+h7b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      idima_sort = h7 + int_mb(k_range+h7b-1) * ((p4 - 1) + int_mb(k_ran
     &ge+p4b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p6 - 1) + int_mb
     &(k_range+p6b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((h2 - 1))))
     &))
      dbl_mb(k_a_sort + idima_sort - 1) = dbl_mb(k_a + idima - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdtq_x3_16',2,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdtq_x3_16',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdtq_x3_16',4,MA_ERR)
      CALL GET_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset + h3b_2 - 1 
     &+ noab * (h7b_2 - 1)))
      DO h7 = 1,int_mb(k_range+h7b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimb = h3 + int_mb(k_range+h3b-1) * ((h7 - 1))
      idimb_sort = h7 + int_mb(k_range+h7b-1) * ((h3 - 1))
      dbl_mb(k_b_sort + idimb_sort - 1) = dbl_mb(k_b + idimb - 1)
      END DO
      END DO
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdtq_x3_16',5,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c_sort,
     &k_c_sort)) CALL ERRQUIT('eomccsdtq_x3_16',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,0.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_PUSH_GET(mt_dbl,dima_sort*dimb_sort,'noname',l_c,k_c))
     & CALL ERRQUIT('eomccsdtq_x3_16',7,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h3 + int_mb(k_range+h3b-1) * ((h2 - 1) + int_mb(k_range+h2
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h3b - 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h1 - 1) + int_mb(k_range+h1
     &b-1) * ((h3 - 1) + int_mb(k_range+h3b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = - dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      DO p4 = 1,int_mb(k_range+p4b-1)
      DO p5 = 1,int_mb(k_range+p5b-1)
      DO p6 = 1,int_mb(k_range+p6b-1)
      DO h1 = 1,int_mb(k_range+h1b-1)
      DO h3 = 1,int_mb(k_range+h3b-1)
      DO h2 = 1,int_mb(k_range+h2b-1)
      idimc_sort = p4 + int_mb(k_range+p4b-1) * ((p5 - 1) + int_mb(k_ran
     &ge+p5b-1) * ((p6 - 1) + int_mb(k_range+p6b-1) * ((h1 - 1) + int_mb
     &(k_range+h1b-1) * ((h2 - 1) + int_mb(k_range+h2b-1) * ((h3 - 1))))
     &))
      idimc = h2 + int_mb(k_range+h2b-1) * ((h3 - 1) + int_mb(k_range+h3
     &b-1) * ((h1 - 1) + int_mb(k_range+h1b-1) * ((p6 - 1) + int_mb(k_ra
     &nge+p6b-1) * ((p5 - 1) + int_mb(k_range+p5b-1) * ((p4 - 1))))))
      dbl_mb(k_c + idimc - 1) = dbl_mb(k_c_sort + idimc_sort - 1)
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      CALL ADD_BLOCK(d_c,dbl_mb(k_c),dima_sort*dimb_sort,int_mb(k_c_offs
     &et + h2b - 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (p6b - n
     &oab - 1 + nvab * (p5b - noab - 1 + nvab * (p4b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdtq_x3_16',8,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdtq_x3_16',9,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdtq_x3_16',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdtq_x3_16',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
