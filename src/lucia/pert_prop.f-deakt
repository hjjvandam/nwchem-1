      SUBROUTINE PROP_PERT(LU0,LUN,N,ISM,ISPC)
*
* Perturbation expansion of one-electron properties       
*
* It is assumed that this calculation is preceded  by 
* a call to the perturbation routine to obtain the 
* wave function corrections to the neutral state.
*
* Input       
*       LUN : File containing wave function corrections
*       LU0 : File containing reference wave funcrtion
*         N : Max order of expansion
*      ISM : Symmetry of reference state
*      ISPC : Space of referencestate
*
*
* Jeppe Olsen, April 98 ( on the train for once )
c      IMPLICIT REAL*8 (A-H,O-Z)
c      INCLUDE 'mxpdim.inc'
      INCLUDE 'wrkspc.inc'
      REAL *8 INPRDD   
*
      INCLUDE 'cicisp.inc'
      INCLUDE 'orbinp.inc'
      INCLUDE 'clunit.inc'
      INCLUDE 'csm.inc'
      INCLUDE 'cstate.inc'
      INCLUDE 'crun.inc'
      INCLUDE 'strinp.inc'
      INCLUDE 'stinf.inc'
      INCLUDE 'strbas.inc'
      INCLUDE 'glbbas.inc'
      INCLUDE 'cprnt.inc'
      INCLUDE 'oper.inc'
      INCLUDE 'lucinp.inc'
      INCLUDE 'cintfo.inc'
*. Local scratch
      PARAMETER(MXNORD = 100)
*
      NTEST = 5
*
      WRITE(6,*) 
      WRITE(6,*) ' ============================ '
      WRITE(6,*) ' PROP_PERT is now in CONTROL '
      WRITE(6,*) ' ============================ '
      WRITE(6,*)
      WRITE(6,*) ' N= ', N
      IF(IRELAX.EQ.0) THEN
        WRITE(6,*) ' Property evaluated as expectation value'
      ELSE
        WRITE(6,*) ' Property evaluated as derivative '
      END IF

* a bit on files :
* LUSC36 is LUN.   
* Two additional scratch files to be used are  LUSC1 and LUSC2
* 
      LBLK = -1
      IDUM = 0
      CALL MEMMAN(IDUM,IDUM,'MARK  ',IDUM,'PROPPT')
*
*
*     ========================
* 1 : Local memory allocation 
*     ========================
*
*. Allocate space for two vector chunks
      CALL GET_3BLKS(KLVEC1,KLVEC2,KVEC3)
* space for one-body Density matrices through order n
      NMAT = N+1     
      LENGTH = NMAT * NTOOB ** 2
      CALL MEMMAN(KLDEN1,LENGTH,'ADDL  ',2,'DENN1 ')
*. And an extra set of density matrices
      CALL MEMMAN(KLDEN1P,LENGTH,'ADDL  ',2,'DENN1P')
*. Two-electron densities
      IF(IRELAX.EQ.0) THEN
        KLDEN2 = KLDEN1
        KLFOCK = 1
      ELSE
        LENGTH = NMAT * NTOOB ** 2 * (NTOOB**2 + 1)/2
        CALL MEMMAN(KLDEN2,LENGTH,'ADDL  ',2,'DENN2 ')
*. And relaxation terms to  one-electron density
        CALL MEMMAN(KLRELR1,NTOOB**2,'ADDL  ',2,'RELR1 ')
*. Space for Fock matrices 
        LFOCK = NDIM_1EL_MAT(1,NTOOBS,NTOOBS,NSMOB,0)
        CALL MEMMAN(KLFOCK,NMAT*LFOCK,'ADDL  ',2,'FOCK_N')
      END IF
*. A scratch matrix ( not a nice thing to say about a matrix )
      LENGTH =  2*NINT1    
      CALL MEMMAN(KLFSCR,LENGTH,'ADDL  ',2,'FSCR  ')
      CALL MEMMAN(KLSCR4,LENGTH,'ADDL  ',2,'SCR4  ')
*. S(i,j) matrix for overlap of corrections
      CALL MEMMAN(KLSIJ,(N+1)**2,'ADDL  ',2,'KLSIJ ')
      CALL MEMMAN(KLSI , N+1    ,'ADDL  ',2,'KLSI  ')
*
* =========================================================================
*.1 :  overlap of correction vectors ( intermediate normalization  assumed )
* =========================================================================
*
*. Sij(i,j) = <i!j>
      CALL REWINO(LUN)
      DO I = 1, N
*. LUN is positioned at end of vector I-1, copy vector I to LUSC1
        CALL REWINO(LUSC1)
        CALL COPVCD(LUN,LUSC1,WORK(KLVEC1),0,LBLK)
*
        CALL REWINO(LUN)
        DO J = 1, I
          IJ = I*(I-1)/2 + j
          CALL REWINO(LUSC1)
          WORK(KLSIJ-1+IJ) = 
     &    INPRDD (WORK(KLVEC1),WORK(KLVEC2),LUSC1,LUN,0,LBLK)
        END DO
      END DO
* SI(i) = sum(j=1,i-1)S(j,i-j)
      DO I = 1, N
        X = 0.0D0
        DO J = 1, I-1
          IMJ = I-J
          IJ = MAX(J,IMJ)*(MAX(J,IMJ)-1)/2+MIN(J,IMJ)
          X = X + WORK(KLSIJ-1+IJ)
        END DO
        WORK(KLSI-1+I) = X
      END DO
*
      IF(NTEST.GE.5) THEN
        WRITE(6,*) ' The S(i,j) Matrix '
        WRITE(6,*) ' ================= '
        CALL PRSYM(WORK(KLSIJ),N)
        WRITE(6,*)
        WRITE(6,*) ' The S(i) array '
        WRITE(6,*) ' ================= '
        CALL WRTMAT(WORK(KLSI),N,1,N,1)
      END IF
*
* ===============================================
* 2 : Construct density matrices through order N
* ===============================================
*
*
* 2a : One-body densities Rho1(N) = Sum(M=0,N) <0(M)!E!0(N-M)>
*
      ILRHO2 = 0
      LRHO2 = 0
      LRHO1 = NTOOB**2
*. No print in density matrices
      IPRDEN_SAVE = IPRDEN
      IPRDEN = 0
      I12_SAVE = I12
      I12 = 1
      DO K = 0, N
        CALL PERTDN(K,LU0,LUN,ISM,ISPC,WORK(KLVEC1),WORK(KLVEC2),
     &       WORK(KLDEN1+(K-0)*LRHO1),
     &       WORK(KLDEN2+(K-0)*LRHO2),LUSC1,LUSC2,0)
      END DO
      IPRDEN = IPRDEN_SAVE
      I12 = I12_SAVE
*
* Change the densities so the correspond to order expansion of
* normalized wf
* Rho'(n) = Rho(n) - sum(j=1,n) Si(j)Rho'(n-j)
*
      ONE = 1.0D0
      DO I = 0, N
        CALL COPVEC(WORK(KLDEN1 +(I-0)*LRHO1),
     &              WORK(KLDEN1P+(I-0)*LRHO1),LRHO1)
*
        DO J = 1, I
          FACTOR = -WORK(KLSI-1+J)
          IOFF = KLDEN1P+(I-0)*LRHO1
          JOFF = KLDEN1P+(I-J-0)*LRHO1
          CALL VECSUM(WORK(IOFF),WORK(IOFF),WORK(JOFF),
     &                ONE,FACTOR,LRHO1)
        END DO
*
C?      WRITE(6,*) ' Density correction for NORMALIZED wf '
C?      CALL WRTMAT(WORK(KLDEN1P+I*LRHO1),NTOOB,NTOOB,NTOOB,NTOOB)
      END DO
*
      IF(IRELAX.EQ.1) THEN
* Set up <0(0)!   !0(N)> densities and symmetrize
        ILRHO2 = 1
        LRHO2 = NTOOB**2*(NTOOB**2 + 1)/ 2 
        LRHO1 = NTOOB**2
*. No print in density matrices
        IPRDEN_SAVE = IPRDEN
        IPRDEN = 0
        I12_SAVE = I12
        I12 = 2
        DO K = 0, N
          CALL PERTDN(K,LU0,LUN,ISM,ISPC,WORK(KLVEC1),WORK(KLVEC2),
     &         WORK(KLDEN1+(K-0)*LRHO1),
     &         WORK(KLDEN2+(K-0)*LRHO2),LUSC1,LUSC2,1)
*. Well it was only 0.5 Times above term we wanted so 
          HALF = 0.5D0
          CALL SCALVE(WORK(KLDEN1+(K-0)*LRHO1),HALF,LRHO1)
          CALL SCALVE(WORK(KLDEN2+(K-0)*LRHO2),HALF,LRHO2)
        END DO
        IPRDEN = IPRDEN_SAVE
        I12 = I12_SAVE
* Order expansion of Fock matrix
C            GET_FN(FN,DEN1N,DEN2N,MAXN,LFOCK)
        CALL GET_FN(WORK(KLFOCK),WORK(KLDEN1),WORK(KLDEN2),N,LFOCK)
*. Restore zero order two-body densities  
        CALL COPVEC(WORK(KLDEN2),WORK(KRHO2),LRHO2)
      END IF
*
*. Properties for each order
*
      DO IORD = 0, N
        WRITE(6,*)
        WRITE(6,*) ' ============================'
        WRITE(6,*) ' Information for order ', IORD
        WRITE(6,*) ' ============================'
        WRITE(6,*)
        IF(IRELAX.EQ.1) THEN
*. Relaxation contribution to density
*. Restore zero order one-body densities  
          CALL COPVEC(WORK(KLDEN1),WORK(KRHO1),LRHO1)
          INOFF = KLFOCK + (IORD-0)*LRHO1
          CALL RESPDEN_FROM_F(WORK(INOFF),WORK(KLRELR1)) 
        END IF
*. 
        III = KLDEN1P + (IORD-0)*LRHO1
        CALL COPVEC(WORK(III),WORK(KRHO1),LRHO1)
*. No natural orbital analysis, so
        I_EXP_OR_TRA = 2
        CALL ONE_EL_PROP(I_EXP_OR_TRA,IRELAX,WORK(KLRELR1))
      END DO
*
      CALL MEMMAN(IDUM,IDUM,'FLUSM ',IDUM,'PROPPT')
*
      RETURN
      END
      SUBROUTINE PERTDN
     &(N,LU0,LUN,ISM,ISPC,VEC1,VEC2,RHO1N,RHO2N,LUSC1,LUSC2,
     & I_ONLY_0N)
*
* Construct one body density matrix of order N
*
*      Jeppe + Dage, Nov. 11 1995
*                    Debugged Jan 31 '97
*
* Note : I12 added, April 98
*        I_ONLY_0N added, May 99
*
*
* If I_ONLY_0N only the <0(0)!  |0(N)> terms are included
*
c      IMPLICIT REAL*8 (A-H,O-Z)
*
*. Should not be called with ICISTR = 1
c      INCLUDE 'mxpdim.inc'
      INCLUDE 'wrkspc.inc'
      INCLUDE 'cicisp.inc'
      INCLUDE 'orbinp.inc'
C     INCLUDE 'clunit.inc'
      INCLUDE 'csm.inc'
      INCLUDE 'cstate.inc'
      INCLUDE 'crun.inc'
      INCLUDE 'strinp.inc'
      INCLUDE 'stinf.inc'
      INCLUDE 'strbas.inc'
      INCLUDE 'glbbas.inc'
      INCLUDE 'cprnt.inc'
      INCLUDE 'oper.inc'
      INCLUDE 'cintfo.inc'
*. Output 
      DIMENSION RHO1N(*),RHO2N(*)
*
      CALL MEMMAN(IDUM,IDUM,'MARK  ', IDUM,'PERTDN')
*
      LRHO1 = NTOOB**2
      LRHO2 = NTOOB**2*(NTOOB**2+1)/2
      CALL MEMMAN(KLDEN1,LRHO1,'ADDL  ',2,'KLDEN1')
      IF(I12.EQ.2) THEN
        CALL MEMMAN(KLDEN2,LRHO2,'ADDL  ',2,'KLDEN2')
      END IF
*
      LBLK = -1
      ZERO = 0.0D0
      CALL SETVEC(RHO1N,ZERO,LRHO1)
      IF (I12.EQ.2) THEN
        CALL SETVEC(RHO2N,ZERO,LRHO2)
      END IF
*
      DO L = 0, N
C?      write(6,*) ' Will load next pair of vectors '
        NMINL = N - L
CTOBE   IF(L.LE.NMINL) THEN
*. put correction vector L and NMINL on LUSC1 and LUSC2, respectively
          IF(L.EQ.0) THEN
             CALL COPVCD(LU0,LUSC1,VEC1,1,LBLK)
          ELSE 
             CALL SKPVCD(LUN,L-1,VEC1,1,LBLK)
             CALL REWINO(LUSC1)
             CALL COPVCD(LUN,LUSC1,VEC1,0,LBLK)
          END IF
*
          IF(NMINL.EQ.0) THEN 
             CALL COPVCD(LU0,LUSC2,VEC1,1,LBLK)
          ELSE 
             CALL SKPVCD(LUN,NMINL-1,VEC1,1,LBLK)
             CALL REWINO(LUSC2)
             CALL COPVCD(LUN,LUSC2,VEC1,0,LBLK)
          END IF
C       write(6,*) ' next pair of vectors loaded '
* Do the densi
          IF(I_ONLY_0N.EQ.0.OR.L.EQ.0.OR.L.EQ.N) THEN
            LEQR = 0
            CALL DENSI2(I12,WORK(KLDEN1),WORK(KLDEN2),VEC1,VEC2,
     &                  LUSC1,LUSC2,EXPS2R,0,WORK(KLDEN1))
*
CTOBE       IF(L.NE.NMINL) THEN
*. The matrix <L! E !NMINL> was calculated, add <NMINL! E ! L> 
*. as simple transposition
CTOBE          CALL TRPAD(WORK(KLDEN),ONE,NTOOB)
CTOBE       END IF
            ONE = 1.0D0
            CALL VECSUM(RHO1N,RHO1N,WORK(KLDEN1),ONE,ONE,LRHO1)
            IF(I12.EQ.2) THEN
              CALL VECSUM(RHO2N,RHO2N,WORK(KLDEN2),ONE,ONE,LRHO2)
            END IF
CTOBE     END IF
          END IF
*         ^ End I_ONLY_0N check

      END DO
*
      NTEST = 00
      IF(NTEST.GE.100) THEN
        WRITE(6,*) ' Density matrix of order in perturbation ', N
        WRITE(6,*) ' ==========================================='
        WRITE(6,*)
        WRITE(6,*) ' One-body density '
        WRITE(6,*) ' ================ '
        CALL WRTMAT(RHO1N,NTOOB,NTOOB,NTOOB,NTOOB)
        IF(I12.EQ.2) THEN
          WRITE(6,*) ' Two-body density '
          WRITE(6,*) ' ================ '
          CALL PRSYM(RHO2N,NTOOB**2)
        END IF
      END IF
*
      CALL MEMMAN(IDUM,IDUM,'FLUSM ', IDUM,'PERTDN')
*
      RETURN
      END
