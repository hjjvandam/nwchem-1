      SUBROUTINE TEST_PUR
*
* Testing Mcweeny purifucation
*
      INCLUDE 'implicit.inc'
*
      PARAMETER(MXPDIM = 10)
      DIMENSION DIN(MXPDIM*MXPDIM),DOUT(MXPDIM*MXPDIM)
      DIMENSION S(MXPDIM*MXPDIM)
      DIMENSION SCR1(MXPDIM*MXPDIM),SCR2(MXPDIM*MXPDIM)
*. set up simple 2 in 2 case with orthonormal basis
      S(1) = 1.0D0
      S(2) = 0.0D0
      S(3) = 0.0D0
      S(4) = 1.0D0
*
      DIN(1) = 1.0
      DIN(2) = 0.7D0
      DIN(3) = 0.7D0
      DIN(4) = 0.7D0
      CALL MCWEENY_PUR(DIN,DOUT,S,SCR1,SCR2,10,1,2)
      STOP ' Enforced stop in TEST_PUR'
      END 
      SUBROUTINE MCWEENY_PUR(DIN,DOUT,S,SCR1,SCR2,MAXIT,NSMOB,NOBPSM)
*
* Purify input density DIN by repeated use of McWeeny purifucation
* On input, DIN and S are  supposed to be in symmetryblocked complete form
*
*. Jeppe Olsen
*
      INCLUDE 'implicit.inc'
      REAL*8 INPROD
*. General Input
      INTEGER NOBPSM(NSMOB)
*. Input
      DIMENSION DIN(*),S(*)
*. Output
      DIMENSION DOUT(*)
*. Scratch
      DIMENSION SCR1(*),SCR2(*)
*
      NTEST = 000
      LEND = NDIM_1EL_MAT(1,NOBPSM,NOBPSM,NSMOB,0)
C?    WRITE(6,*) 'LEND = ', LEND
      CALL COPVEC(DIN,DOUT,LEND)
      IF(NTEST.GE.100) THEN
        WRITE(6,*) ' Initial D '
        CALL  APRBLM2(DOUT,NOBPSM,NOBPSM,NSMOB,0)
      END IF

      ICONVER = 0
      TEST = 1.0D-8
      DO IT = 1, MAXIT
*. Obtain 3DSD - 2 DSDSD with D in DOUT
*. DS in SCR1
C     MULT_BLOC_MAT(C,A,B,NBLOCK,LCROW,LCCOL,
C    &                         LAROW,LACOL,LBROW,LBCOL,ITRNSP)
C?      WRITE(6,*) ' input D, S to MATMULT '
C?        CALL  APRBLM2(DOUT,NOBPSM,NOBPSM,NSMOB,0)
C?        CALL  APRBLM2(S   ,NOBPSM,NOBPSM,NSMOB,0)
  

        CALL MULT_BLOC_MAT(SCR1,DOUT,S,NSMOB,NOBPSM,NOBPSM,NOBPSM,
     &                     NOBPSM,NOBPSM,NOBPSM,0)
C?      WRITE(6,*) ' NEW DS '
C?        CALL  APRBLM2(SCR1,NOBPSM,NOBPSM,NSMOB,0)
*.DSDS in SCR2
        CALL MULT_BLOC_MAT(SCR2,SCR1,SCR1,NSMOB,NOBPSM,NOBPSM,NOBPSM,
     &                     NOBPSM,NOBPSM,NOBPSM,0)
C?      WRITE(6,*) ' NEW DSDS '
C?        CALL  APRBLM2(SCR2,NOBPSM,NOBPSM,NSMOB,0)
*
*.3DS-2DSDS in SCR1
        CALL VECSUM(SCR1,SCR1,SCR2,3.0D0,-2.0D0,LEND)
*.3DSD-2DSDSD in SCR2
        CALL MULT_BLOC_MAT(SCR2,SCR1,DOUT,NSMOB,NOBPSM,NOBPSM,NOBPSM,
     &                     NOBPSM,NOBPSM,NOBPSM,0)
*
        IF(NTEST.GE.100) THEN
          WRITE(6,*) ' Purified density in iteration ', IT
          CALL  APRBLM2(SCR2,NOBPSM,NOBPSM,NSMOB,0)
        END IF
*. Difference between 3DSD and 2DSDSD 
        CALL VECSUM(SCR1,SCR2,DOUT,1.0D0,-1.0D0,LEND)
        DIFF2 = INPROD(SCR1,SCR1,LEND)
        DIFF = SQRT(DIFF2)
*
        CALL COPVEC(SCR2,DOUT,LEND)
        WRITE(6,*) ' DIFF = ', DIFF
        IF(DIFF.LT.TEST) ICONVER = 1
        IF(ICONVER.EQ.1) GOTO 1001
      END DO
 1001 CONTINUE
*
      IF(NTEST.GE.100) THEN
        WRITE(6,*) ' Output from McWeeny purification '
        IF(ICONVER.EQ.1) THEN
           WRITE(6,*) ' Convergence was obtained in ',MAXIT,
     &                ' iterations '
        ELSE
           WRITE(6,*) ' Convergence was not obtained in ',MAXIT,
     &                ' iterations '
        END IF
*
        WRITE(6,*) ' Final purified matrix '
C              APRBLM2(S,NAOS_ENV,NAOS_ENV,NSMOB,1)
        CALL  APRBLM2(DOUT,NOBPSM,NOBPSM,NSMOB,0)
      END IF
*
      RETURN
      END
   
*.
