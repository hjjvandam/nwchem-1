*
* $Id: dipole_motion.F 22501 2012-05-20 06:00:35Z d3y133 $
*

*     ***************************************
*     *                                     *
*     *            dipole_motion_init       *
*     *                                     *
*     ***************************************
      subroutine dipole_motion_init(rtdb)
      implicit none
      integer rtdb

#include "rtdb.fh"

*     **** local variables ****
      integer taskid,MASTER
      parameter(MASTER=0)

      logical       found,found_bak
      character*50  filename
      character*255 full_filename,full_bak
      integer l1,l2
      real*8 time,dipole(3)

*     **** external functions ****
      logical  control_dipole_motion
      external control_dipole_motion


      if (control_dipole_motion()) then

        if (.not.rtdb_cget(rtdb,'nwpw:dipole_motion_filename',
     >                      1,filename))
     >     call util_file_prefix('dipole',filename)

        call util_file_name_noprefix(filename,.false.,
     >                             .false.,
     >                             full_filename)

        call util_file_name_noprefix(filename,.false.,
     >                               .false.,
     >                               full_filename)

        call Parallel_taskid(taskid)
        if (taskid.eq.MASTER)  then

*        **** check for backup file ****
         call util_file_name_noprefix('DIPOLE99-bak',.false.,
     >                                .false.,
     >                                full_bak)
         inquire(file=full_bak,exist=found_bak)
         if (found_bak) then
            write(*,*) 
            write(*,*) "DIPOLE99-bak exists:"
            l1=index(full_bak,' ')
            l2=index(full_filename,' ')
            write(*,*) "   Copying ",full_bak(1:l2),
     >                 " to ",full_filename(1:l2)
            write(*,*)
            call util_file_copy(full_bak,full_filename)
         end if

         inquire(file=full_filename,exist=found)
         if (found) then

*         **** make a new backup file ***
          call util_file_copy(full_filename,full_bak)

          open(unit=36,file=full_filename,form='formatted',status='old')
            do while (found)
               read(36,*,ERR=30,END=30) time,dipole
            end do
  30        continue
#if defined(FUJITSU_SOLARIS) || defined(PSCALE) || defined(__crayx1) || defined(GCC46)
           backspace 36
#endif
         else
          open(unit=36,file=full_filename,form='formatted')
         end if
        end if

      end if
      return
      end


*     ***************************************
*     *                                     *
*     *            dipole_motion_end        *
*     *                                     *
*     ***************************************
      subroutine dipole_motion_end()
      implicit none

*     **** local variables ****
      integer taskid,MASTER
      parameter(MASTER=0)
      character*255 full_bak

*     **** external functions ****
      logical  control_dipole_motion
      external control_dipole_motion

      if (control_dipole_motion()) then

        call Parallel_taskid(taskid)
        if (taskid.eq.MASTER) then
           close(unit=36)

*           **** remove backup file ***
            call util_file_name_noprefix('DIPOLE99-bak',.false.,
     >                                .false.,
     >                                full_bak)
            call util_file_unlink(full_bak)
        end if

      end if
      return
      end


*     ***************************************
*     *                                     *
*     *            dipole_motion_write      *
*     *                                     *
*     ***************************************

      subroutine dipole_motion_write(periodic,time,
     >                               ispin,ne,n2ft3d,dn,psi)
      implicit none
      logical periodic
      real*8  time
      integer ispin,ne(2),n2ft3d
      real*8     dn(*)
      complex*16 psi(*)

*     **** local variables ****
      integer taskid,MASTER
      parameter(MASTER=0)

      integer i
      real*8 dipole(3)

*     **** external functions ****
      logical  control_dipole_motion
      external control_dipole_motion

      if (control_dipole_motion()) then

        if (periodic) then
           !*** need to change this to Berry's phase calculation ***
           call Calculate_Molecular_Dipole(ispin,ne,n2ft3d,dn,dipole)
        else
           call Calculate_Molecular_Dipole(ispin,ne,n2ft3d,dn,dipole)
        end if

        call Parallel_taskid(taskid)
        if (taskid.eq.MASTER) then
           write(36,110) time,dipole
           call util_flush(36)
        end if
  110 format(e14.6,9e14.6)

      end if

      return
      end


