c     $Id: cgsd_energy.F,v 1.33 2003-01-24 02:06:52 bylaska Exp $                       
*     ***************************
*     *				*
*     *		cgsd_energy	*
*     *				*
*     ***************************

      real*8 function cgsd_energy(newpsi)
      implicit none

#include "stdio.fh"


c#include "global.fh"
c#include "mafdecls.fh"
c#include "rtdb.fh"

      logical newpsi
      integer MASTER
      parameter (MASTER=0)

      logical stalled,value
      integer taskid
      integer minimizer
      integer i,j,ms,neall,NN
      integer it_in,it_out,icount,bfgscount
      real*8  EV,virial
      real*8  tole,tolc,deltae,deltac,deltae_old
      real*8  cx,cy,cz
      real*8  gx,gy,gz
      real*8  en(2)
      real*8  E(30)
      integer rtdb

*     **** external functions ****
      logical     psp_semicore,pspw_qmmm_found,pspw_charge_found
      logical     control_out_of_time,pspw_SIC
      character*2 ion_aname
      integer     control_it_in, control_it_out,control_minimizer
      integer     ion_nion,ion_katm,psi_ne,psi_ispin,control_rtdb
      real*8      control_tole,control_tolc
      real*8      ion_rion,psi_eigenvalue,psi_hml,ion_amass
      external psp_semicore,pspw_qmmm_found,pspw_charge_found
      external control_out_of_time,pspw_SIC
      external ion_aname
      external control_it_in, control_it_out,control_minimizer
      external ion_nion,ion_katm,psi_ne,psi_ispin,control_rtdb
      external control_tole,control_tolc
      external ion_rion,psi_eigenvalue,psi_hml,ion_amass


      call Parallel_taskid(taskid)

*     **** set the minimizer ****
      minimizer = control_minimizer()

*     **** generate phaze factors and local psp and core density ****
      call phafac()
      call electron_gen_vl_potential()
      if (psp_semicore(0)) call semicore_density_update()


*     :::::::::::  begin electron iteration  :::::::::::::::::::::::
      if (taskid.eq.MASTER) then
         write(luout,1300)
         write(luout,1301)
         write(luout,1302)
         write(luout,1304)
         if (minimizer.eq.1) write(luout,1305)
         if (minimizer.eq.2) write(luout,1306)
         if (minimizer.eq.3) write(luout,1307)
         if (minimizer.eq.4) write(luout,1308)
         if (minimizer.eq.5) write(luout,1309)
         call util_flush(luout)
      end if

      stalled = .false.
      deltae  = -1.0d-03
      icount=0
      bfgscount=0
      it_in  = control_it_in()
      it_out = control_it_out()
      tole   = control_tole()
      tolc   = control_tolc()
      E(1)=0.0d0
      if (taskid.eq.MASTER) call nwpw_message(2)
      if (taskid.eq.MASTER) call util_flush(luout)
      if (newpsi) call sdminimize(15)
      if (minimizer.gt.1) call pspw_Grsm_list_start()
      if (minimizer.eq.5) it_out = 1
   2  continue
         icount = icount + 1
         if (stalled) then
           call sdminimize(0)
           bfgscount = 0 
         end if

         deltae_old = deltae
         if (minimizer.eq.1) then
           bfgscount = bfgscount + 1
           call cgminimize(E,deltae,deltac,bfgscount)
         else if (minimizer.eq.2) then
           bfgscount = bfgscount + 1
           call bfgsminimize(E,deltae,deltac,bfgscount,minimizer)
         else if (minimizer.eq.3) then
           bfgscount = bfgscount + 1
           call bfgsminimize(E,deltae,deltac,bfgscount,minimizer)
         else if (minimizer.eq.4) then
           bfgscount = bfgscount + 1
           call cgminimize2(E,deltae,deltac,bfgscount)
         else if (minimizer.eq.5) then
           bfgscount = bfgscount + 1
           call bybminimize(E,deltae,deltac,bfgscount)
         end if

         if ((dabs(deltae).gt.dabs(deltae_old)).or.
     >       (dabs(deltae).gt.1.0d-2)          .or.
     >       (deltae.gt.0.0d0)) then
            stalled = .true.
         else
            stalled = .false.
         end if
        
         if ((taskid.eq.MASTER).and.(minimizer.ne.5)) then 
           write(luout,1310) icount*it_in,E(1),deltae,deltac
           call util_flush(luout)
         end if
         if (deltae.gt.0.0d0) then
            if (taskid.eq.MASTER) 
     >       write(luout,*) 
     >       ' *** energy going up. iteration not terminated'
             stalled = .true.
            !go to 3
         end if
         deltae = dabs(deltae)
         if ((deltae.lt.tole).and.
     >       (deltac.lt.tolc)) then
            if (taskid.eq.MASTER) 
     >       write(luout,*) ' *** tolerance ok. iteration terminated'
            go to 3
         end if
         if (control_out_of_time()) then
            if (taskid.eq.MASTER) 
     >       write(luout,*) ' *** out of time. iteration terminated'
           go to 3
         end if

         stalled = .false. !debug
      if (icount.lt.it_out) go to 2
      if (taskid.eq.MASTER) 
     > write(luout,*) '*** arived at the Maximum iteration.  terminated'

*     :::::::::::  end of electron iteration loop  :::::::::::::::::::::

   3  continue
      if (minimizer.gt.1) call pspw_Grsm_list_end()
      if (taskid.eq.MASTER) CALL NWPW_MESSAGE(3)


*     **** diagonalize hamiltonian and rotate psi  ****
*     **** but skip if doing an SIC calculations   ****
      call psi_spin_density(en)
      call psi_1gen_hml()

      if (.not.pspw_SIC()) then
       call psi_diagonalize_hml()

       call psi_1rotate2()
       call psi_2to1()
      end if

*     **** geometrical center and center of mass of the cluster ****
      call center_geom(cx,cy,cz)
      call center_mass(gx,gy,gz)

*:::::::::::::::::   report summary of results  :::::::::::::::::::::::
      if (taskid.eq.MASTER) then
         neall = (psi_ne(1)+psi_ne(2))
         write(luout,1304)
         write(luout,1410)

         write(luout,*)
         write(luout,1320) en(1),en(psi_ispin()),' (real space)'
         write(luout,1430) E(1),E(1)/ion_nion()

         if (pspw_qmmm_found()) then
            write(luout,1431)
            write(luout,1432)
            write(luout,1433) 
     >(E(1)-E(11)-E(12)-E(13)-E(14)-E(15)-E(16)-E(17)-E(18)),
     >(E(1)-E(11)-E(12)-E(13)-E(14)-E(15)-E(16)-E(17)-E(18))
     > /ion_nion()
         end if
         if (pspw_charge_found()) then
            write(luout,1431)
            write(luout,1432)
            write(luout,1433) (E(1)-E(19)-E(20)-E(21)),
     >         (E(1)-E(19)-E(20)-E(21))/ion_nion()
         end if

         write(luout,1440) E(2),E(2)/neall
         write(luout,1450) E(3),E(3)/neall
         write(luout,1460) E(4),E(4)/neall
         if (pspw_SIC()) then
           write(luout,1455) E(22),E(22)/neall
           write(luout,1456) E(23),E(23)/neall
         end if
         write(luout,1470) E(5),E(5)/ion_nion()

         write(luout,1480) E(6),E(6)/neall
         if (pspw_qmmm_found()) then
            write(luout,1491) E(7),E(7)/neall
         else
            write(luout,1490) E(7),E(7)/neall
         end if
         write(luout,1495) E(8),E(8)/neall
         write(luout,1496) E(9),E(9)/neall
         write(luout,1497) E(10),E(10)/neall
         if (pspw_SIC())  then
           write(luout,1499) E(24),E(24)/neall
           write(luout,1501) E(25),E(25)/neall
         end if
         virial = (E(10)+E(9)+E(8)+E(7))/E(6)
         write(luout,1498) virial

        if (pspw_qmmm_found()) then
            write(luout,1700)
            write(luout,1701)
            write(luout,1702) E(11)+E(12)+E(13)
            write(luout,1707) E(11)
            write(luout,1708) E(12)
            write(luout,1709) E(13)

            write(luout,1703) E(14)+E(15)
            write(luout,1710) E(14)
            write (luout,1711) E(15)

            write(luout,1704) E(16)
            write(luout,1705) E(17)
            write(luout,1706) E(18)
         end if
        if (pspw_charge_found()) then
            write(luout,1800)
            write(luout,1801)
            write(luout,1805) E(19)+E(20)+E(21)
            write(luout,1802) E(19)
            write(luout,1803) E(20)
            write(luout,1804) E(21)
        end if

*        **** write out <psi|H|psi> matrix ****
         if (pspw_SIC()) then
           write(luout,1331)
           do ms=1,psi_ispin()
             do i=1,psi_ne(ms)
             do j=1,psi_ne(ms)
               write(luout,1341) ms,i,j,psi_hml(ms,i,j)
             end do
             end do
           end do

*        **** write out KS eigenvalues ****
         else
           write(luout,1500)
           NN=psi_ne(1)-psi_ne(2)
           EV=27.2116
           do I=1,NN
             write(luout,1510) psi_eigenvalue(1,I),
     >                         psi_eigenvalue(1,I)*EV
           end do
           do I=1,psi_ne(2)
             write(luout,1510)  psi_eigenvalue(1,I+NN),
     >                          psi_eigenvalue(1,I+NN)*EV,
     >                          psi_eigenvalue(2,I),
     >                          psi_eigenvalue(2,I)*EV
           end do
         end if

      end if

c*     **** debug - energies written to rtdb for numerical stress ****
c      rtdb = control_rtdb()
c      value =           rtdb_put(rtdb,'pspw:E_ke',      mt_dbl,1,E(6))
c      value = value.and.rtdb_put(rtdb,'pspw:E_hartree', mt_dbl,1,E(3))
c      value = value.and.rtdb_put(rtdb,'pspw:E_xc',      mt_dbl,1,E(4))
c      value = value.and.rtdb_put(rtdb,'pspw:E_ewald',   mt_dbl,1,E(5))
c      value = value.and.rtdb_put(rtdb,'pspw:E_local',   mt_dbl,1,E(7))
c      value = value.and.rtdb_put(rtdb,'pspw:E_nonlocal',mt_dbl,1,E(8))
c      if (.not. value) call errquit(
c     >   'cgsd_noit_energy: numerical stress - error writing rtdb',0)

      cgsd_energy = E(1)
      return



 1190 FORMAT(5X, I4, A3  ,' (',3F11.5,' ) - atomic mass= ',F6.3,' ')
 1200 FORMAT(5X,'  G.C. ',' (',3F11.5,' )')
 1210 FORMAT(5X,' C.O.M.',' (',3F11.5,' )')
 1300 FORMAT(//'======================')
 1301 FORMAT(  '= energy calculation =')
 1302 FORMAT(  '======================')
 1304 FORMAT(/)
 1305 FORMAT(10X,'====== Grassmann conjugate gradient iteration ======')
 1306 FORMAT(10X,'============ Grassmann lmbfgs iteration ============')
 1307 FORMAT(10X,'============ Grassmann diis iteration ==============')
 1308 FORMAT(10X,'======= Stiefel conjugate gradient iteration =======')
 1309 FORMAT(10X,'=========== band by band diis iteration ============')
 1310 FORMAT(I8,E20.10,3E15.5)
 1320 FORMAT(' number of electrons: spin up=',F11.5,'  down=',F11.5,A)
 1330 FORMAT(/' comparison between hamiltonian and lambda matrix')
 1331 FORMAT(/' Hamiltonian matrix')
 1340 FORMAT(I3,2I3,' H=',E16.7,', L=',E16.7,', H-L=',E16.7)
 1341 FORMAT(I3,2I3,' H=',E16.6)
 1350 FORMAT(/' orthonormality')
 1360 FORMAT(I3,2I3,E18.7)
 1370 FORMAT(I3)
 1380 FORMAT(' ''',a,'''',I4)
 1390 FORMAT(I3)
 1400 FORMAT(I3,3E18.8/3X,3E18.8)
 1410 FORMAT(10X,'=============  summary of results  =================')
 1420 FORMAT( ' final position of ions:')
 1430 FORMAT(/' total     energy    :',E19.10,' (',E15.5,'/ion)')
 1431 FORMAT(/' QM Energies')
 1432 FORMAT( '------------')
 1433 FORMAT( ' total  QM energy    :',E19.10,' (',E15.5,'/ion)')
 1440 FORMAT( ' total orbital energy:',E19.10,' (',E15.5,'/electron)')
 1450 FORMAT( ' hartree   energy    :',E19.10,' (',E15.5,'/electron)')
 1455 FORMAT( ' SIC-hartree energy  :',E19.10,' (',E15.5,'/electron)')
 1456 FORMAT( ' SIC-exc-corr energy :',E19.10,' (',E15.5,'/electron)')
 1460 FORMAT( ' exc-corr  energy    :',E19.10,' (',E15.5,'/electron)')
 1470 FORMAT( ' ion-ion   energy    :',E19.10,' (',E15.5,'/ion)')
 1480 FORMAT(/' K.S. kinetic energy :',E19.10,' (',E15.5,'/electron)')
 1490 FORMAT( ' K.S. V_l  energy    :',E19.10,' (',E15.5,'/electron)')
 1491 FORMAT( ' K.S. Vl+Vqm/mm      :',E19.10,' (',E15.5,'/electron)')
 1495 FORMAT( ' K.S. V_nl energy    :',E19.10,' (',E15.5,'/electron)')
 1496 FORMAT( ' K.S. V_Hart energy  :',E19.10,' (',E15.5,'/electron)')
 1497 FORMAT( ' K.S. V_xc energy    :',E19.10,' (',E15.5,'/electron)')
 1498 FORMAT( ' Virial Coefficient  :',E19.10)
 1499 FORMAT( ' K.S. SIC-hartree energy  :',E19.10,
     >        ' (',E15.5,'/electron)')
 1501 FORMAT( ' K.S. SIC-exc-corr energy :',E19.10,
     >        ' (',E15.5,'/electron)')
 1500 FORMAT(/' orbital energies:')
 1510 FORMAT(2(E18.7,' (',F8.3,'eV)'))

 1700 FORMAT(/' QM/MM-pol-vib/CAV Energies')
 1701 FORMAT( ' --------------------------')
 1702 FORMAT( ' QM/MM energy                     :',E19.10)
 1703 FORMAT(/' MM/MM energy                     :',E19.10)
 1704 FORMAT(/' MM Polarization energy           :',E19.10)
 1705 FORMAT( ' MM Vibration energy              :',E19.10)
 1706 FORMAT( ' (QM+MM)/Cavity energy            :',E19.10)
 1707 FORMAT( ' - MM Charge Field/QM Electron    :',E19.10)
 1708 FORMAT( ' - MM Charge Field/QM Ion         :',E19.10)
 1709 FORMAT( ' - MM LJ/QM LJ                    :',E19.10)
 1710 FORMAT( ' - MM Charge Field/MM Charge Field:',E19.10)
 1711 FORMAT( ' - MM LJ/MM LJ                    :',E19.10)

 1800 FORMAT(/' Charge Field Energies')
 1801 FORMAT( ' ---------------------')
 1802 FORMAT( ' - Charge Field/Electron    :',E19.10)
 1803 FORMAT( ' - Charge Field/Ion         :',E19.10)
 1804 FORMAT( ' - Charge Field/Charge Field:',E19.10)
 1805 FORMAT( ' Charge Field Energy        :',E19.10)
   
      end

*     *******************************
*     *				    *
*     *	    cgsd_energy_gradient    *
*     *				    *
*     *******************************

      subroutine cgsd_energy_gradient(G1)
      implicit none
#include "stdio.fh"
      real*8 G1(3,*)

      logical allow_translation
      integer MASTER
      parameter (MASTER=0)
      integer i,k,taskid,nion,nion1
      integer i1
      real*8  GG
      real*8  fmx,fmy,fmz
      real*8  fmx2,fmy2,fmz2

*     **** external functions ****
      logical     psp_semicore,pspw_qmmm_found,pspw_charge_found
      logical     control_allow_translation,ion_q_FixIon
      character*2 ion_aname,pspw_qmmm_aname,pspw_charge_aname
      integer     ion_katm,ion_nion,control_version
      integer     pspw_qmmm_nion,pspw_charge_nion
      real*8      ion_rion,pspw_qmmm_rion,pspw_charge_rion
      external psp_semicore,pspw_qmmm_found,pspw_charge_found
      external control_allow_translation,ion_q_FixIon
      external ion_aname,pspw_qmmm_aname,pspw_charge_aname
      external ion_katm,ion_nion,control_version
      external pspw_qmmm_nion,pspw_charge_nion
      external ion_rion,pspw_qmmm_rion,pspw_charge_rion


      allow_translation = control_allow_translation()
      nion = ion_nion()
      if (pspw_charge_found()) nion = nion + pspw_charge_nion()
      if (pspw_qmmm_found())   nion = nion + pspw_qmmm_nion()

      call dcopy(3*nion,0.0d0,0,G1,1)

      call psi_1force(G1)
      if (psp_semicore(0)) call electron_semicoreforce(G1)

      if (control_version().eq.3) call ewald_f(G1)
      if (control_version().eq.4) call ion_ion_f(G1)

      if (pspw_charge_found()) then
         nion1 = ion_nion()
         call pspw_charge_Fion_Fcharge(G1,G1(1,nion1+1))
         call pspw_charge_Fcharge(G1(1,nion1+1))
         call rho_1Fcharge(G1(1,nion1+1))
      end if

      if (pspw_qmmm_found()) then
         nion1 = ion_nion() + pspw_charge_nion()
         call rho_1_Fion_Fmm(G1,G1(1,nion1+1))
      end if

*     **** remove ion forces using ion_FixIon ****
      call ion_FixIon(G1)

      if (.not.allow_translation) then
        call center_F_mass(G1,fmx,fmy,fmz)
        do i=1,nion
         G1(1,i) = G1(1,i) - fmx
         G1(2,i) = G1(2,i) - fmy
         G1(3,i) = G1(3,i) - fmz
        end do
      end if
      call center_F_mass(G1,fmx2,fmy2,fmz2)

      GG = 0.0d0
      do i=1,nion
         GG = GG + G1(1,i)**2 + G1(2,i)**2 + G1(3,i)**2
      end do

      call Parallel_taskid(taskid)
      if (taskid.eq.MASTER) then
        write(luout,1300)
        write(luout,1301)
        write(luout,1302)
        write(luout,1304)
        if (.not.allow_translation) write(luout,1400) fmx,fmy,fmz
        write(luout,1304)
        write(luout,1410)
        write(luout,1420)
        do I=1,ion_nion()
          if (ion_q_FixIon(I)) then
           write(6,1191) I,ion_aname(I),(ion_rion(K,I),K=1,3)
          else
           write(6,1190) I,ion_aname(I),(ion_rion(K,I),K=1,3)
          end if
        end do
    

*       **** print out charge positions ***
        if (pspw_charge_found()) then
          do i=1,pspw_charge_nion()
            i1 = ion_nion() + i
            if (ion_q_FixIon(i1)) then
            write(luout,1191) i1,pspw_charge_aname(i),
     >                    (pspw_charge_rion(K,i),K=1,3)
            else
            write(luout,1190) i1,pspw_charge_aname(i),
     >                    (pspw_charge_rion(K,i),K=1,3)
            end if
          end do
        end if

*       **** print out mm positions ***
        if (pspw_qmmm_found()) then
          do i=1,pspw_qmmm_nion()
            i1 = ion_nion() + pspw_charge_nion() + i
            if (ion_q_FixIon(i1)) then
            write(luout,1191) i1,pspw_qmmm_aname(i),
     >                    (pspw_qmmm_rion(K,i),K=1,3)
            else
            write(luout,1190) i1,pspw_qmmm_aname(i),
     >                    (pspw_qmmm_rion(K,i),K=1,3)
            end if
          end do
        end if

        write(luout,1421)
        write(luout,1190)(i,ion_aname(I),
     >                  (G1(K,I),K=1,3),I=1,ion_nion())

*       **** print out charge forces ***
        if (pspw_charge_found()) then
          do i=1,pspw_charge_nion()
            i1 = ion_nion() + i
            write(luout,1190) i1,pspw_charge_aname(i),
     >                    (G1(K,i1),K=1,3)
          end do
        end if

*       **** print out mm forces ***
        if (pspw_qmmm_found()) then
          do i=1,pspw_qmmm_nion()
            i1 = ion_nion() + pspw_charge_nion() + i
            write(luout,1190) i1,pspw_qmmm_aname(i),
     >                    (G1(K,i1),K=1,3)
          end do
        end if

        write(luout,1210) fmx2,fmy2,fmz2  
        write(luout,1425)
        write(luout,1426) dsqrt(GG)
      end if

c     call dscal(3*nion,(-1.0d0),G1,1)

      return
 1190 FORMAT(5X, I4, A3  ,' (',3F11.5,' )')
 1191 FORMAT(5X, I4, A3  ,' (',3F11.5,' ) - fixed')
 1210 FORMAT(5X,' C.O.M.',' (',3F11.5,' )')
 1300 FORMAT(//'========================')
 1301 FORMAT(  '= Gradient calculation =')
 1302 FORMAT(  '========================')
 1304 FORMAT(/)
 1400 FORMAT('Translation force removed: (',3F11.5,')')
 1410 FORMAT(10X,'=============  Ion Gradients =================')
 1425 FORMAT(10X,'===============================================')
 1426 FORMAT(10X,'|F|=',E21.10//)
 1420 FORMAT( ' Ion Positions:')
 1421 FORMAT( ' Ion Forces:')
      end


*     ***************************
*     *				*
*     *	    cgsd_energy_stress	*
*     *				*
*     ***************************

      subroutine cgsd_energy_stress(stress)
      implicit none
      real*8 stress(3,3)

      integer taskid,MASTER
      parameter (MASTER=0)

*     **** local variables ****
      integer u,v,s
      real*8  tstress(3,3),ht(3,3),scal
      real*8  sigma(3,3),xcstress(3,3)

*     **** external functions ****
      logical  psp_semicore
      real*8   lattice_omega,lattice_unita
      external psp_semicore
      external lattice_omega,lattice_unita


      call dcopy(9,0.0d0,0,stress,1)

*     **** Kinetic energy component : dE_kin/dhuv ****
      call psi_1ke_stress(tstress)
      call daxpy(9,1.0d0,tstress,1,stress,1)
      call write_stress(tstress,"ke")

*     **** Coulomb energy component : dE_Coul/dhuv ****
      call psi_1coulomb_stress(tstress)
      call daxpy(9,1.0d0,tstress,1,stress,1)
      call write_stress(tstress,"coulomb")

*     **** Local pseudo energy component : dE_local/dhuv ****
      call dng_1vlocal_stress(tstress)
      call daxpy(9,1.0d0,tstress,1,stress,1)
      call write_stress(tstress,"local")

*     **** Nonlocal pseudo energy component : dE_nolocal/dhuv ****
      call dcopy(9,0.0d0,0,tstress,1)
      call psi_1vnonlocal_stress(tstress)
      call daxpy(9,1.0d0,tstress,1,stress,1)
      call write_stress(tstress,"nonlocal")

*     **** xc energy component : dE_xc/dhuv ****
      call dcopy(9,0.0d0,0,xcstress,1)
      call rho_1exc_stress(tstress)
      call daxpy(9,1.0d0,tstress,1,xcstress,1)
      !call write_stress(tstress,"xc1")

*     **** Core-correction Coulomb energy component : dE_core/dhuv ****
      if (psp_semicore(0)) then
        call rho_1semicore_stress(tstress)
        !call write_stress(tstress,"xc2")
        call daxpy(9,1.0d0,tstress,1,xcstress,1)
      end if

      call daxpy(9,1.0d0,xcstress,1,stress,1)
      call write_stress(xcstress,"xc")

*     **** Ewald energy component : dE_ewald/dhuv ****
      call ewald_stress(tstress)
      call daxpy(9,1.0d0,tstress,1,stress,1)
      call write_stress(tstress,"ewald")

**     **** define ht ****
       do v=1,3
       do u=1,3
          ht(u,v)=lattice_unita(v,u)
       end do
       end do
 
**     **** define stress tensor ****
       call dcopy(9,0.0d0,0,sigma,1)
       scal = -1.0d0/lattice_omega()
       do v=1,3
       do u=1,3
          do s=1,3
             sigma(u,v) = sigma(u,v) + scal*stress(u,s)*ht(s,v)
          end do
       end do
       end do

c     *** call dscal(9,-1.0d0,stress,1)
      call write_stress(stress,"total gradient")

      call write_stress(sigma,"Internal Stress Tensor")
      return
      end

      subroutine write_stress(stress,name)
      implicit none
      real*8 stress(3,3)
      character*(*) name

      integer MASTER,taskid
      parameter (MASTER=0)
      real*8 pressure,autoMbar,autoGPa,autoatm
      parameter (autoMbar=294.214239071d0)
      parameter (autoGPa=autoMbar*100.0d0)
      parameter (autoatm =290.360032539d6)

      call Parallel_taskid(taskid)
      if (taskid.eq.MASTER) then
         write(*,1900)
         write(*,1901)
         write(*,1902)
         write(*,1904)
         write(*,1910) name
         write(*,1911) stress(1,1),stress(1,2),stress(1,3)
         write(*,1912) stress(2,1),stress(2,2),stress(2,3)
         write(*,1912) stress(3,1),stress(3,2),stress(3,3)
         write(*,1915)
         write(*,1916) dsqrt(
     >                  stress(1,1)**2+stress(1,2)**2+stress(1,3)**2
     >                 +stress(2,1)**2+stress(2,2)**2+stress(2,3)**2
     >                 +stress(3,1)**2+stress(3,2)**2+stress(3,3)**2)
         pressure = (stress(1,1) + stress(2,2) + stress(3,3))/3.0d0
         write(*,1917) pressure,
     >                 pressure*autoMbar,
     >                 pressure*autoGPa,
     >                 pressure*autoatm

 1900 FORMAT(//'======================')
 1901 FORMAT(  '= Stress calculation =')
 1902 FORMAT(  '======================')
 1904 FORMAT(/)
 1910 FORMAT(10X,'============= ',A,' ==============')
 1911 FORMAT(5X,' S = ',' (',3F11.5,' )')
 1912 FORMAT(5X,'     ',' (',3F11.5,' )')
 1915 FORMAT(10X,'===================================================')
 1916 FORMAT(10X,'|S|      = ',E11.5)
 1917 FORMAT(10X,'pressure = ',E9.3,' au',
     >      /10X,'         = ',E9.3,' Mbar'
     >      /10X,'         = ',E9.3,' GPa',
     >      /10X,'         = ',E9.3,' atm')
      end if

      return
      end

