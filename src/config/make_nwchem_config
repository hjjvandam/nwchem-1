# This makefile produces the nwchem_config.h makefile fragment included by
# makefile.h, the src/stubs.f file, and the NWCHEM_CONFIG file which says
# how things are configured in human-readable form.
#
# Inputs to this makefile are:
#	Complete KNOWN_MODULES_SUBDIRS and KNOWN_MODULE_LIBS, normally
#	obtained by including makefile.h.
#
#	NWCHEM_MODULES	normally set by the invoker of this makefile.
#	NWCHEM_TOP	"
#	NWCHEM_TARGET	"
#
# $Id: make_nwchem_config,v 1.1 1994-11-16 22:31:07 gg502 Exp $
#-----------------------------------------------------------------------------
include makefile.h

# Set a default here in case the caller doesn't

NWCHEM_MODULES = all
MODULES := $(NWCHEM_MODULES) 

# For convenience, we define some shorthand "module" names which are
# expanded below.

EXPANSIONS = all qm md qmmd

EXP_all = $(filter-out ideaz,$(KNOWN_MODULE_SUBDIRS) )
EXP_qm  = NWints atomscf ddscf gradients moints nwdft rimp2 riscf \
	stepper symmetry
EXP_md  = ideaz
EXP_qmmd = gradients ideaz

# Check each expansion

MODULES := $(patsubst all,$(EXP_all),$(MODULES) )
MODULES := $(patsubst qm,$(EXP_qm),$(MODULES) )
MODULES := $(patsubst md,$(EXP_md),$(MODULES))
MODULES := $(patsubst md,$(EXP_qmmd),$(MODULES))

# Make sure everything on the list is cool
UNKNOWN_MODULES := $(filter-out $(KNOWN_MODULE_SUBDIRS),$(MODULES))

ifneq ($(UNKNOWN_MODULES),)
error_unknown_modules:
	@echo Your module list contains contains unknown targets:
	@echo $(UNKNOWN_MODULES)
	@echo The following modules are known at the moment:
	@echo $(KNOWN_MODULE_SUBDIRS)
	@exit 1
endif

#-----------------------------------------------------------------------------
# Now expand things to make sure we get all dependencies.  Must be ordered
# so that substitutions can be further expanded below.  There must be such
# an order or the link command will have to contain repreated elements and
# will be hard to generate automatically.

MODULES := $(patsubst develop,develop rimp2,$(MODULES) )

MODULES := $(patsubst stepper,stepper gradients,$(MODULES) )
MODULES := $(patsubst gradients,gradients ddscf,$(MODULES) )

MODULES := $(patsubst moints,moints NWints,$(MODULES) )

MODULES := $(patsubst riscf,riscf rimp2 ddscf NWints,$(MODULES) )
MODULES := $(patsubst rimp2,rimp2 ddscf NWints,$(MODULES) )

MODULES := $(patsubst nwdft,nwdft ddscf NWints,$(MODULES) )

MODULES := $(patsubst ddscf,ddscf atomscf NWints,$(MODULES) )
MODULES := $(patsubst NWints,NWints symmetry,$(MODULES) )

# Now we've got a list of modules, but there may be duplicates
# so let's get rid of them.

MODULES := $(sort $(MODULES) )
EXCLUDED_SUBDIRS = $(filter-out $(MODULES),$(KNOWN_MODULE_SUBDIRS))

#-----------------------------------------------------------------------------
# Now map module names into libraries
MOD_LIBS = $(MODULES)

MOD_LIBS := $(patsubst NWints,-lnwints,$(MOD_LIBS) )
MOD_LIBS := $(patsubst atomscf,-lguess,$(MOD_LIBS) )
MOD_LIBS := $(patsubst ddscf,-lddscf,$(MOD_LIBS) )
MOD_LIBS := $(patsubst develop,-ltest,$(MOD_LIBS) )
MOD_LIBS := $(patsubst gradients,-lgradients,$(MOD_LIBS) )
MOD_LIBS := $(patsubst moints,-lmoints,$(MOD_LIBS) )
MOD_LIBS := $(patsubst nwdft,-lnwdft,$(MOD_LIBS) )
MOD_LIBS := $(patsubst rimp2,-lrimp2,$(MOD_LIBS) )
MOD_LIBS := $(patsubst riscf,-lriscf,$(MOD_LIBS) )
MOD_LIBS := $(patsubst stepper,-lstepper,$(MOD_LIBS) )
MOD_LIBS := $(patsubst symmetry,-lutil,$(MOD_LIBS) )
MOD_LIBS := $(patsubst ideaz,-lideaz,$(MOD_LIBS) )
MOD_LIBS := $(strip $(MOD_LIBS))

#-----------------------------------------------------------------------------
# Finally, map excluded modules into routines which must be stubbed
STUBROUTINES = $(EXCLUDED_SUBDIRS)

STUBROUTINES := $(patsubst NWints,task_check_sum,$(STUBROUTINES) )
STUBROUTINES := $(patsubst atomscf,,$(STUBROUTINES) )
STUBROUTINES := $(patsubst ddscf,scf scf_input vectors_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst develop,rjhtest raktest debtest,$(STUBROUTINES) )
STUBROUTINES := $(patsubst gradients,scf_gradient,$(STUBROUTINES) )
STUBROUTINES := $(patsubst moints,atwtest,$(STUBROUTINES) )
STUBROUTINES := $(patsubst nwdft,nwdft dft_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst rimp2,rimp2,$(STUBROUTINES) )
STUBROUTINES := $(patsubst riscf,ri_scf,$(STUBROUTINES) )
STUBROUTINES := $(patsubst stepper,scf_optimize stepper_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst symmetry,,$(STUBROUTINES) )
STUBROUTINES := $(patsubst ideaz,mdmain md_input,$(STUBROUTINES) )
STUBROUTINES := $(strip $(STUBROUTINES))

.PHONY:	all list-options nwchem_config.h NWCHEM_CONFIG ../stubs.f
all:	nwchem_config.h NWCHEM_CONFIG ../stubs.f

nwchem_config.h:
	echo \# This configuration generated automatically on \
	      `hostname` at `date` > $@
	echo "NW_MODULE_SUBDIRS = $$(filter $(MODULES),$$(KNOWN_MODULE_SUBDIRS))" >> $@
	echo "NW_MODULE_LIBS = $$(filter $(MOD_LIBS),$$(KNOWN_MODULE_LIBS))" >> $@
	echo "EXCLUDED_SUBDIRS = $(EXCLUDED_SUBDIRS)" >> $@
	echo "NWCHEM_TOP = $(NWCHEM_TOP)" >> $@
	echo "NWCHEM_TARGET = $(NWCHEM_TARGET)" >> $@

NWCHEM_CONFIG:
	echo \# This configuration generated automatically on \
	     `hostname` at `date` > $@
	echo This tree is rooted at: $(NWCHEM_TOP) >> $@
	echo and will be built for the $(NWCHEM_TARGET) >> $@ 
	echo >> $@ 
	echo The following subdirectories are built: >> $@ 
	echo $(MODULES) >> $@ 
	echo corresponding to these libraries: >> $@ 
	echo $(MOD_LIBS) >> $@ 
	echo >> $@ 
ifeq ($(EXCLUDED_SUBDIRS),)
	echo No directories are excluded from the build, >> $@ 
else
	echo The following directories are excluded from the build: >> $@ 
	echo $(EXCLUDED_SUBDIRS) >> $@ 
endif
ifeq ($(STUBROUTINES),)
	echo and no routines will be replaced by stubs. >> $@ 
else
	echo and these routines will be replaced by stubs: >> $@ 
	echo $(STUBROUTINES)  >> $@ 
endif

# This file will stub out any modules we are excluding from the build.

../stubs.f:
	cp census.skeleton $@ 
ifneq ($(STUBROUTINES),)
	for routine in $(STUBROUTINES); do \
	   sed s/STUBROUTINE/$$routine/g stub.skeleton >> $@ ; \
	done
endif

# This provides the user some feedback on what the possibilities are
# for configuring the code.
list-options:
	@echo
	@echo The following modules are known:
	@echo $(KNOWN_MODULE_SUBDIRS)
	@echo
	@echo The following shorthand names are also recognized:
	@echo $(EXPANSIONS)
