# This makefile produces the nwchem_config.h makefile fragment included by
# makefile.h, the src/stubs.f file, and the NWCHEM_CONFIG file which says
# how things are configured in human-readable form.
#
#	NWCHEM_MODULES	normally set by the invoker of this makefile.
# These should be used eventually, but they don't work as we would
# want them to now -- NWCHEM_TOP has to be set for makefile.h to
# _find_ the include file that it would be read from.
#	NWCHEM_TOP	"
#	NWCHEM_TARGET	"
#
# $Id: make_nwchem_config,v 1.89 1998-12-16 23:21:14 d3g681 Exp $
#-----------------------------------------------------------------------------
# These are the directories required to build the various high-level
# computational modules for NWChem.  They are built after the core
# directories.

KNOWN_MODULE_SUBDIRS = NWints atomscf ddscf develop gradients moints nwdft \
	rimp2 stepper driver ideaz dftgrad scfaux cphf ccsd vib mcscf prepar \
        nwargos esp hessian plane_wave selci dplot mp2_grad nwaprep oimp2 \
        property gapss fft rimp2_grad nbo python

# These are the libraries for the high-level modules.  They should be
# specified in an order that will link correctly, but that shouldn't
# be too hard to come up with.  These should be platform-independent.

KNOWN_MODULE_LIBS = -ltest -lccsd -lmcscf -lselci -lmp2 -lmoints \
                    -lstepper -ldriver -ldftgrad -lplnwv -lnwdft -lgradients \
                    -lcphf -lscfaux -lgapss -lddscf -lguess -lhessian \
                    -lvib -lutil -lrimp2g -lrimp2 -lnwints -lideaz \
		    -lprepar -lnwaprep -lnwargos -lesp \
                    -lpfft -ldplot -loimp2 -lproperty -lnbo -lpython

# This include file handles configuration of the NW_MODULE_SUBDIRS and
# NW_MODULE_LIBS macros for what we actually want to build.  It
# works from KNOWN_MODULE_SUBDIRS and KNOWN_MODULES_LIBS (keeping the order
# but removing unneeded elements) and produces the following
# additional macros:
#
# NW_MODULE_SUBDIRS:	List of directories that must be built
# NW_MODULE_LIBS:	List of libraries to be linked against
# EXCLUDED_SUBDIRS:	Those directories that were removed from
# 			KNOWN_MODULE_SUBDIRS to produce NW_MODULE_SUBDIRS

ifndef NWCHEM_TOP
error1:
	@echo You must define NWCHEM_TOP in your environment to be the path
	@echo of the top level nwchem directory ... something like
	@echo     setenv NWCHEM_TOP /msrc/home/elvis/nwchem
	@exit 1
endif

# Set a default here in case the caller doesn't

ifndef NWCHEM_MODULES
   NWCHEM_MODULES = all
endif
MODULES := $(NWCHEM_MODULES) 

# For convenience, we define some shorthand "module" names which are
# expanded below.

EXPANSIONS = all qm md qmmd argos alldev

EXP_all = $(filter-out nbo python develop gapss oimp2 ideaz scfaux plane_wave rimp2_grad,$(KNOWN_MODULE_SUBDIRS) )
EXP_alldev = develop $(EXP_all)
EXP_qm  = NWints atomscf ddscf gradients moints hessian nwdft rimp2 \
          stepper driver ccsd vib mcscf property dftgrad selci dplot mp2_grad esp
EXP_ver2 = nwaprep prepar nwargos gradients mp2_grad dftgrad stepper vib mcscf \
           driver
#plane_wave ... broken? RJH
EXP_argos = nwaprep prepar nwargos
EXP_md  = ideaz
EXP_qmmd = gradients ideaz

# Check each expansion

MODULES := $(patsubst all,$(EXP_all),$(MODULES) )
MODULES := $(patsubst qm,$(EXP_qm),$(MODULES) )
MODULES := $(patsubst md,$(EXP_md),$(MODULES))
MODULES := $(patsubst md,$(EXP_qmmd),$(MODULES))
MODULES := $(patsubst argos,$(EXP_argos),$(MODULES))
MODULES := $(patsubst alldev,$(EXP_alldev),$(MODULES) )

# Make sure everything on the list is cool
UNKNOWN_MODULES := $(filter-out $(KNOWN_MODULE_SUBDIRS),$(MODULES))

ifneq ($(UNKNOWN_MODULES),)
error_unknown_modules:
	@echo Your module list contains contains unknown targets:
	@echo $(UNKNOWN_MODULES)
	@echo The following modules are known at the moment:
	@echo $(KNOWN_MODULE_SUBDIRS)
	@exit 1
endif

#-----------------------------------------------------------------------------
# Now expand things to make sure we get all dependencies.  Must be ordered
# so that substitutions can be further expanded below.  There must be such
# an order or the link command will have to contain repreated elements and
# will be hard to generate automatically.

MODULES := $(patsubst gapss,gapss atomscf nwdft ddscf NWints,$(MODULES) )

MODULES := $(patsubst property,property ddscf hessian,$(MODULES) )

MODULES := $(patsubst plane_wave,plane_wave nwdft,$(MODULES) )
MODULES := $(patsubst oimp2,oimp2 rimp2 moints,$(MODULES) )

MODULES := $(patsubst vib,vib stepper driver gradients,$(MODULES) )
MODULES := $(patsubst driver, driver gradients,$(MODULES) )
MODULES := $(patsubst stepper,stepper gradients,$(MODULES) )
MODULES := $(patsubst dftgrad,dftgrad gradients ddscf nwdft,$(MODULES) )
MODULES := $(patsubst gradients,gradients ddscf,$(MODULES) )
MODULES := $(patsubst hessian,hessian ddscf gradients nwdft dftgrad cphf property,$(MODULES) )

MODULES := $(patsubst rimp2_grad,rimp2_grad rimp2 cphf ddscf mp2_grad NWints,$(MODULES) )
MODULES := $(patsubst rimp2,rimp2 ddscf NWints,$(MODULES) )

MODULES := $(patsubst selci,selci moints,$(MODULES) )
MODULES := $(patsubst mp2_grad,mp2_grad moints cphf gradients,$(MODULES) )
MODULES := $(patsubst ccsd,ccsd cphf mp2_grad moints ddscf,$(MODULES) )
MODULES := $(patsubst mcscf,mcscf moints ddscf,$(MODULES) )
MODULES := $(patsubst moints,moints ddscf NWints,$(MODULES) )
MODULES := $(patsubst cphf,cphf ddscf,$(MODULES) )
MODULES := $(patsubst scfaux,scfaux ddscf,$(MODULES) )

MODULES := $(patsubst nwdft,nwdft ddscf NWints,$(MODULES) )

MODULES := $(patsubst nwargos,nwargos fft ddscf,$(MODULES) )
MODULES := $(patsubst esp,esp NWints dplot,$(MODULES) )

MODULES := $(patsubst develop,develop ddscf,$(MODULES) )

MODULES := $(patsubst dplot,dplot nwdft ddscf,$(MODULES) )

MODULES := $(patsubst ddscf,ddscf atomscf NWints,$(MODULES) )
# This dependency is the other way round (matchnxyz used by symmetry)
# but is required for correct linking on SOLARIS.  Nasty kludge.
#
# This must be the last one!!!!!!!! rak 3/6/97
#
MODULES := $(patsubst NWints,NWints symmetry, $(MODULES) )

# Now we've got a list of modules, but there may be duplicates
# so let's get rid of them.

MODULES := $(sort $(MODULES) )
EXCLUDED_SUBDIRS = $(filter-out $(MODULES),$(KNOWN_MODULE_SUBDIRS))

#-----------------------------------------------------------------------------
# Now map module names into libraries
MOD_LIBS = $(MODULES)

MOD_LIBS := $(patsubst python,-lpython,$(MOD_LIBS) )
MOD_LIBS := $(patsubst selci,-lselci,$(MOD_LIBS) )
MOD_LIBS := $(patsubst mp2_grad,-lmp2,$(MOD_LIBS) )
MOD_LIBS := $(patsubst NWints,-lnwints,$(MOD_LIBS) )
MOD_LIBS := $(patsubst atomscf,-lguess,$(MOD_LIBS) )
MOD_LIBS := $(patsubst ddscf,-lddscf,$(MOD_LIBS) )
MOD_LIBS := $(patsubst dftgrad,-ldftgrad,$(MOD_LIBS) )
MOD_LIBS := $(patsubst develop,-ltest,$(MOD_LIBS) )
MOD_LIBS := $(patsubst gradients,-lgradients,$(MOD_LIBS) )
MOD_LIBS := $(patsubst hessian,-lhessian,$(MOD_LIBS) )
MOD_LIBS := $(patsubst ccsd,-lccsd,$(MOD_LIBS) )
MOD_LIBS := $(patsubst mcscf,-lmcscf,$(MOD_LIBS) )
MOD_LIBS := $(patsubst moints,-lmoints,$(MOD_LIBS) )
MOD_LIBS := $(patsubst nwdft,-lnwdft,$(MOD_LIBS) )
MOD_LIBS := $(patsubst gapss,-lgapss,$(MOD_LIBS) )
MOD_LIBS := $(patsubst rimp2,-lrimp2,$(MOD_LIBS) )
MOD_LIBS := $(patsubst rimp2_grad,-lrimp2g,$(MOD_LIBS) )
MOD_LIBS := $(patsubst oimp2,-loimp2,$(MOD_LIBS) )
MOD_LIBS := $(patsubst stepper,-lstepper,$(MOD_LIBS) )
MOD_LIBS := $(patsubst symmetry,-lutil,$(MOD_LIBS) )
MOD_LIBS := $(patsubst ideaz,-lideaz,$(MOD_LIBS) )
MOD_LIBS := $(patsubst cphf,-lcphf,$(MOD_LIBS) )
MOD_LIBS := $(patsubst scfaux,-lscfaux,$(MOD_LIBS) )
MOD_LIBS := $(patsubst vib,-lvib,$(MOD_LIBS) )
MOD_LIBS := $(patsubst plane_wave,-lplnwv,$(MOD_LIBS) )
MOD_LIBS := $(patsubst nwaprep,-lnwaprep,$(MOD_LIBS) )
MOD_LIBS := $(patsubst prepar,-lprepar,$(MOD_LIBS) )
MOD_LIBS := $(patsubst nwargos,-lnwargos,$(MOD_LIBS) )
MOD_LIBS := $(patsubst esp,-lesp,$(MOD_LIBS) )
MOD_LIBS := $(patsubst dplot,-ldplot,$(MOD_LIBS) )
MOD_LIBS := $(patsubst property,-lproperty,$(MOD_LIBS) )
MOD_LIBS := $(patsubst nbo,-lnbo,$(MOD_LIBS) )
MOD_LIBS := $(patsubst driver,-ldriver,$(MOD_LIBS) )
MOD_LIBS := $(patsubst fft,-lpfft,$(MOD_LIBS) )
MOD_LIBS := $(strip $(MOD_LIBS))

#-----------------------------------------------------------------------------
# Finally, map excluded modules into routines which must be stubbed
STUBROUTINES = $(EXCLUDED_SUBDIRS)

STUBROUTINES := $(patsubst python,task_python python_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst selci,selci selci_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst mp2_grad,mp2_grad mp2_input semi_dir_mp2,$(STUBROUTINES) )
STUBROUTINES := $(patsubst NWints,task_check_sum,$(STUBROUTINES) )
STUBROUTINES := $(patsubst atomscf,,$(STUBROUTINES) )
STUBROUTINES := $(patsubst ddscf,scf scf_input vectors_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst dftgrad,dft_grad_top grad_dft,$(STUBROUTINES) )
STUBROUTINES := $(patsubst develop,rjhtest jvltest jvltest2 raktest kgdtest debtest,$(STUBROUTINES) )
STUBROUTINES := $(patsubst gradients,grad_force scf_gradient gradients_input grad_active_atoms,$(STUBROUTINES) )
STUBROUTINES := $(patsubst hessian, scf_hessian xc_init_index xc_exit_index hessti xc_hessian xc_cpks_rhs xc_rhogen_nucder xc_d2expl xc_cpks_coeff xc_tabcd_cpks_lhs xc_tabcd_cpks_rhs xc_rhogen_pert,$(STUBROUTINES) )
STUBROUTINES := $(patsubst ccsd,ccsd ccsd_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst mcscf,mcscf mcscf_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst moints,atwtest direct_mp2 moints_full,$(STUBROUTINES) )
STUBROUTINES := $(patsubst nwdft,nwdft dft_input xc_quadv0_gen,$(STUBROUTINES) )
STUBROUTINES := $(patsubst gapss,gapss gap_parse,$(STUBROUTINES) )
STUBROUTINES := $(patsubst rimp2,rimp2,$(STUBROUTINES) )
STUBROUTINES := $(patsubst rimp2_grad,rimp2g,$(STUBROUTINES) )
STUBROUTINES := $(patsubst oimp2,oimp2,$(STUBROUTINES) )
STUBROUTINES := $(patsubst stepper,stpr_walk stpr_walk_task stpr_walk_reset stepper_input stpr_gen_hess_at stpr_gen_hess_atc,$(STUBROUTINES) )
STUBROUTINES := $(patsubst symmetry,,$(STUBROUTINES) )
STUBROUTINES := $(patsubst ideaz,mdmain md_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst cphf,cphf cphf_poliz mjdtest,$(STUBROUTINES) )
STUBROUTINES := $(patsubst scfaux,,$(STUBROUTINES) )
STUBROUTINES := $(patsubst vib,vib_vib,$(STUBROUTINES) )
STUBROUTINES := $(patsubst driver,drv_lst drv_opt driver_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst plane_wave,plnwv plnwv_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst prepar,prepar pre_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst nwargos,nwargos arg_input qmmm_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst esp,esp esp_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst dplot,dplot dplot_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst property,property prop_input,$(STUBROUTINES) )
STUBROUTINES := $(patsubst nbo,task_nbo nbo_input,$(STUBROUTINES) )
STUBROUTINES := $(strip $(STUBROUTINES))
STUBROUTINES := $(sort $(STUBROUTINES))

.PHONY:	all list-options nwchem_config.h NWCHEM_CONFIG ../stubs.f
all:	nwchem_config.h NWCHEM_CONFIG ../stubs.f

nwchem_config.h:
	echo \# This configuration generated automatically on \
	      `hostname` at `date` > $@
	echo "NW_MODULE_SUBDIRS = $(filter $(MODULES),$(KNOWN_MODULE_SUBDIRS))" >> $@
	echo "NW_MODULE_LIBS = $(filter $(MOD_LIBS),$(KNOWN_MODULE_LIBS))" >> $@
	echo "EXCLUDED_SUBDIRS = $(EXCLUDED_SUBDIRS)" >> $@

NWCHEM_CONFIG:
	echo \# This configuration generated automatically on \
	     `hostname` at `date` > $@
	echo The following subdirectories are built: >> $@ 
	echo $(MODULES) >> $@ 
	echo corresponding to these libraries: >> $@ 
	echo $(MOD_LIBS) >> $@ 
	echo >> $@ 
ifeq ($(EXCLUDED_SUBDIRS),)
	echo No directories are excluded from the build, >> $@ 
else
	echo The following directories are excluded from the build: >> $@ 
	echo $(EXCLUDED_SUBDIRS) >> $@ 
endif
ifeq ($(STUBROUTINES),)
	echo and no routines will be replaced by stubs. >> $@ 
else
	echo and these routines will be replaced by stubs: >> $@ 
	echo $(STUBROUTINES)  >> $@ 
endif

# This file will stub out any modules we are excluding from the build.

../stubs.f:
	cp census.skeleton $@ 
ifneq ($(STUBROUTINES),)
	for routine in $(STUBROUTINES); do \
	   sed s/STUBROUTINE/$$routine/g stub.skeleton >> $@ ; \
	done
endif

# This provides the user some feedback on what the possibilities are
# for configuring the code.
list-options:
	@echo
	@echo The following modules are known:
	@echo $(KNOWN_MODULE_SUBDIRS)
	@echo
	@echo The following shorthand names are also recognized:
	@echo $(EXPANSIONS)
