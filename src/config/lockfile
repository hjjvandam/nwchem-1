#!/bin/csh

#
# lockfile [-steal] filename
#
# Simluate a lock by creating and writing the specified file.
# The lock may be released by deleting the file.  If -steal
# is specified then the lock is stolen instead of exiting on timeout.
#
# On sucess exits with status zero and access to the lock
#
# All other conditions exit with status one and undefined lock state.
#
# Some race conditions exist but deadlock is avoided by exiting/stealing
# if the lock is not acquired in TIMEOUT*SECS seconds
#
# SECS is the time in seconds to sleep between tries to get the lock
# TIMEOUT*SECS is the time in seconds before waiting is abandonned.
#

set TIMEOUT = 12
set SECS = 5
set STEAL = 0

if ($#argv == 2) then
  if ("$1" == "-steal") then
    set STEAL = 1
    shift
  else
    goto usage
  endif
else if ($#argv != 1) then
  goto usage
endif

set file = $1

set nspin = 0

wait:
while (-e $file)
  if ($nspin >= $TIMEOUT) then
    if ($STEAL) then
      echo lockfile: stealing $file
      /bin/rm -f $file
    else
      echo lockfile: timout waiting for $file ... delete it\!
      exit 1
    endif
  else
    @ nspin ++
    echo lockfile: waiting for $file
    sleep 2
  endif
end

echo $$ " " > $file
set id = "`cat $file`"

if ($id[1] != $$) then
  echo lockfile: not fast enough on $file
  goto wait
endif

echo Got lock on $file

exit 0



