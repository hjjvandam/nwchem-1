      Logical Function DPlot(rtdb)
      Implicit None
*     
************************************************************************
#include "mafdecls.fh"
#include "global.fh"
#include "stdio.fh"
#include "bas.fh"
#include "geom.fh"
#include "rtdb.fh"
#include "context.fh"
************************************************************************
*     
*---- NWChem handles
      Integer rtdb, Geom, AO_Bas_Han
*---- Basis set variables
      Integer nBF_AO
*---- MO Vectors variables
      Logical  movecs_read_header, movecs_read, Int_Normalize
      External movecs_read_header, movecs_read, Int_Normalize
      Character*80 File_Vec,File_Vec2
      Character*255 Title_Vec, Title_Vec2, Basis_Name, Basis_Name2
      Integer nBF,nBF2,iBF,nSet,nSet2,iSet,nSetTri,
     &        nMO(2),nMO2(2)
      Integer g_Vec(2),g_Dns(2),g_Dns2(2)
*---- Local variables
      Integer iProc,i,j,No_Of_Spacings(3),Lth_Tit,Out_Unit,iOff
      Integer nGrid,k_Grid,l_Grid,nPoint,nAtom,iAtom,Atom_Off
      Integer k_Tags,l_Tags,k_Charge,l_Charge
      Integer k_Vls,l_Vls,g_Vls,k_xyz,l_xyz,k_AMt,l_AMt,k_BMt,l_BMt
      Integer k_Dst,l_Dst,k_rq0,l_rq0
      Integer k_Ene,l_Ene,k_Occ,l_Occ
      Integer Lth_Vec,Lth_Out
      Integer nOrb,k_Orb,l_Orb
      Double Precision Ext_From_To(3,2),Scale,Volume,Factor,Sum,AppCh
      Double Precision STD,Tot_Charge
      Character Coord(3)
      Character*8 Units,What,Spin,Where
      Character*80 File_Out
      Character*255 Title
      Logical LResult, DeBug
      Integer Inp_StrLen
      External Inp_StrLen
*
************************************************************************
*     
      iProc = ga_nodeid()
      DeBug = .False.
      Coord(1) = 'X'
      Coord(2) = 'Y'
      Coord(3) = 'Z'
*
*---- Push context down to DPlot
      If (.not.context_push('dplot'))
     &     Call ErrQuit('DPlot: context_push failed', 0)
*
***************************************
*     Read the data from the rtdb     *
***************************************
      If (.not.rtdb_cget(rtdb,'dplot:Units',1,Units))
     &   Call ErrQuit('DPlot: rtdb_get failed - Units',0)
      If (Debug . and . iProc.eq.0)
     &   Write(LuOut,*)' Units                : ',Units
*
      If (.not.rtdb_get(rtdb,'dplot:Ext_From_To',mt_dbl,6,Ext_From_To))
     &   Call ErrQuit('DPlot: rtdb_get failed - Ext_From_To',0)
      If (.not.rtdb_get(rtdb,'dplot:No_Of_Spacings',mt_int,
     &   3,No_Of_Spacings))
     &   Call ErrQuit('DPlot: rtdb_get failed - No_Of_Spacings',0)
      If (iProc.eq.0) Then
         Write(LuOut,*)
         Write(LuOut,*)' Limits (a.u.) specified for the density plot:'
         Write(LuOut,*)' ---------------------------------------------'
         Write(LuOut,*)
         Write(LuOut,*)'       From        To      # of spacings'
      End If
      Scale = 1.8897265d0
      If (Units.eq.'ANGSTROM') Call dscal(6,Scale,Ext_From_To,1)
      nGrid = 1
      Do i = 1, 3
         nGrid = nGrid*(No_Of_Spacings(i)+1)
         If (iProc.eq.0) Write(LuOut,'(a,2(2x,f10.5),5x,i5)')Coord(i),
     &      (Ext_From_To(i,j),j = 1, 2), No_Of_Spacings(i)
      End Do
      If (iProc.eq.0) Then
         Write(LuOut,*)
         Write(LuOut,*)' Total number of grid points = ',nGrid
         Write(LuOut,*)
      End If
*
      If (.not.rtdb_cget(rtdb,'dplot:File_Vec',1,File_Vec))
     &   Call ErrQuit('DPlot: rtdb_get failed - File_Vec',0)
      Lth_Vec = Inp_StrLen(File_Vec)
      If (iProc.eq.0) 
     &   Write(LuOut,*)' 1-st set of MOs      : ',File_Vec(1:Lth_Vec)
      File_Vec2 = ' '
      If (.not.rtdb_cget(rtdb,'dplot:File_Vec2',1,File_Vec2))
     &   Call ErrQuit('DPlot: rtdb_get failed - File_Vec2',0)
      Lth_Vec = Inp_StrLen(File_Vec2)
      If (iProc.eq.0 . and . File_Vec2.ne.' ') Then
         Write(LuOut,*)' 2-nd set of MOs      : ',File_Vec2(1:Lth_Vec)
      End If
*
      If (.not.rtdb_cget(rtdb,'dplot:File_Out',1,File_Out))
     &   Call ErrQuit('DPlot: rtdb_get failed - File_Out',0)
      Lth_Out = Inp_StrLen(File_Out)
      If (iProc.eq.0) 
     &   Write(LuOut,*)' Output is written to : ',File_Out(1:Lth_Out)
*
      If (.not.rtdb_cget(rtdb,'dplot:Title',1,Title))
     &   Call ErrQuit('DPlot: rtdb_get failed - Title',0)
      Lth_Tit = Inp_StrLen(Title)
      If (Debug . and . iProc.eq.0)
     &   Write(LuOut,*)' Title                : ',Title(1:Lth_Tit)
*
      If (.not.rtdb_cget(rtdb,'dplot:What',1,What))
     &   Call ErrQuit('DPlot: rtdb_get failed - What',0)
      If (iProc.eq.0) Then
         If (What.eq.'DENSITY') Then
            Write(LuOut,*)' Type of picture      : CHARGE DENSITY'
         Else If (What.eq.'VIEW') Then
            Write(LuOut,*)' Type of picture      : ORBITAL VIEW'
         Else If (What.eq.'CHARGES') Then
            Write(LuOut,*)' Type of picture      : POTENTIAL'
         End If
      End If
*
      If (.not.rtdb_cget(rtdb,'dplot:Spin',1,Spin))
     &   Call ErrQuit('DPlot: rtdb_get failed - Spin',0)
      If (What.eq.'VIEW' . and . Spin.ne.'BETA')          ! ***Set Up***
     &   Spin = 'ALPHA'
      If (iProc.eq.0 . and . What.ne.'CHARGES')
     &   Write(LuOut,*)' Spin                 : ',Spin
*
      If (.not.rtdb_get(rtdb,'dplot:nOrb',mt_int,1,nOrb))
     &   Call ErrQuit('DPlot: rtdb_get failed - nOrb',0)
      If (DeBug . and . iProc.eq.0)
     &   Write(LuOut,*)' nOrb                 = ', nOrb
      If (File_Vec2.ne.' ' . and . What.eq.'VIEW')         ! ***Check***
     &   Call ErrQuit('DPlot: VIEW is meningless for 2 orbital sets',0)
      If (nOrb.ne.999999) Then
         LResult = MA_Push_Get(MT_Int,nOrb,'Orb',l_Orb,k_Orb)
         Call ErrMem(LResult,'DPlot: Failed to allocate Orb.',0)
         If (.not.rtdb_get(rtdb,'dplot:OrbNo',mt_int,
     &      nOrb,Int_mb(k_Orb)))
     &      Call ErrQuit('DPlot: rtdb_get failed - OrbNo',0)
         If (iProc.eq.0) Then
            If (What.eq.'DENSITY') Then
               Write(LuOut,'(a,50(1x,i3))')
     &         '  The density is computed using orbitals : ',
     &         (Int_mb(k_Orb-1+j),j=1,nOrb)
            Else
               If (nOrb.gt.1 .and . What.eq.'VIEW')        ! ***Check***
     &            Call ErrQuit('DPlot: VIEW and nOrb > 1 conflict',0)
               Write(LuOut,'(a,i3,a)')
     &         '  The orbital ',Int_mb(k_Orb),' is plotted'
            End If
         End If
      Else
         If (iProc.eq.0 . and . What.ne.'CHARGES')
     &      Write(LuOut,*)' The density is computed using all orbitals'
      End If
      If (iProc.eq.0 . and . File_Vec2.ne.' ') Then
         Write(LuOut,*)
     &   ' The density is computed as Rho = Rho(1) - Rho(2)'
      End If
*
      If (.not.rtdb_cget(rtdb,'dplot:Where',1,Where))
     &   Call ErrQuit('DPlot: rtdb_get failed - Where',0)
      If (What.eq.'VIEW') Where = 'GRID'                  ! ***Set Up***
      If (iProc.eq.0 . and . What.eq.'DENSITY') Then
         If (Where.eq.'GRID') Then
            Write(LuOut,*)' The density is computed on the specified',
     &                    ' grid'
         Else If (Where.eq.'NUCLEI') Then
            Write(LuOut,*)' The density is computed at the position',
     &                    ' of nuclei'
         Else If (Where.eq.'G+N') Then
            Write(LuOut,*)' The density is computed on the grid and',
     &                    ' at the position of nuclei'
         End If
      End If
*
      If (nOrb.ne.999999 . and . What.eq.'CHARGES')        ! ***Check***
     &   Call ErrQuit('DPlot: Charges and Orbitals conflict',0)
      If (What.eq.'CHARGES' . and . Where.ne.'GRID')       ! ***Check***
     &   Call ErrQuit('DPlot: Charges can be combined with GRID only',0)
      If (What.eq.'CHARGES' . and . File_Vec2.ne.' ')      ! ***Check***
     &   Call ErrQuit('DPlot: Specify one orb. file for opt. Charges',0)
*
*---- Get the total charge of the molecule
      If (.not.rtdb_get(rtdb,'charge',mt_dbl,1,Tot_Charge))
     &   Tot_Charge = 0.d0
*
*********************************
*     Start the calculation     *
*********************************
*
*---- Open the output file
      Out_Unit = LuOut
      If (iProc.eq.0 . and . Where.ne.'NUCLEI' . and .
     &    File_Out.ne.'OUTPUT') Then
            Out_Unit=20
            Open(unit=Out_Unit,
     &           file=File_Out,
     &           status='unknown',
     &           access='sequential',
     &           form='formatted',
     &           err=111)
      End If
*
*---- Write the title and the format to the output file
      If (iProc.eq.0 . and . Where.ne.'NUCLEI') Then
         Write(Out_Unit,*)Title(1:Lth_Tit)
         Write(Out_Unit,*)'(1F15.10)'
      End If
*
*---- Get the geometry
      If (.not.Geom_Create(Geom,'geometry'))
     &     Call ErrQuit('DPlot: Geom_Create failed',0)
      If (.not.Geom_RTDB_Load(rtdb,Geom,'geometry'))
     &     Call ErrQuit('DPlot: Geom_RTDB_Load failed',0)
*
      LResult = Geom_Ncent(Geom,nAtom)
      If (Where.eq.'GRID') Then
         nPoint   = nGrid
         Atom_Off = -1
      Else If (Where.eq.'NUCLEI') Then
         nPoint   = nAtom
         Atom_Off = 0
      Else If (Where.eq.'G+N') Then
         nPoint   = nAtom + nGrid
         Atom_Off = nGrid
      End If
*
*---- Get the basis set
      If (.not.Bas_Create(AO_Bas_Han,'ao basis'))
     &   Call ErrQuit('DPlot: Bas_Create failed',0)
      If (.not.Bas_RTDB_Load(rtdb,Geom,AO_Bas_Han,'ao basis'))
     &   Call ErrQuit('DPlot: Bas_RTDB_Load failed',0)
      If (.not.Int_Normalize(AO_Bas_Han))
     &   Call ErrQuit('DPlot: Int_Normalize failed',0)
      If (.not.Bas_NumBF(AO_bas_han,nBF_AO))
     &   Call ErrQuit('DPlot: Bas_NumBF failed',0)
      If (Debug . and . iProc.eq.0)
     &   Write(LuOut,*)' nBF_AO     = ',nBF_AO
*
*---- Allocate memory and get tags, charges and cartesian coordiantes
      LResult = MA_Push_Get(MT_Byte,nAtom*16,'Tags',l_Tags,k_Tags)
      Call ErrMem(LResult,'C_C: Failed to allocate Tags',0)
      LResult = MA_Push_Get(MT_Dbl,nAtom,'Charge',l_Charge,k_Charge)
      Call ErrMem(LResult,'C_C: Failed to allocate Charge',0)
      LResult = MA_Push_Get(MT_Dbl,nAtom*3,'xyz',l_xyz,k_xyz)
      Call ErrMem(LResult,'C_C: Failed to allocate xyz',0)
*
      If ( .not.Geom_Cart_Get(Geom,nAtom,Byte_mb(k_Tags),
     &   Dbl_mb(k_xyz),Dbl_mb(k_Charge)) )
     &   Call ErrQuit('C_C: Geom_Cart_Get failed',0)
*
*---- Allocate memory for grid points and get the grid
      LResult = MA_Push_Get(MT_Dbl,3*nPoint,'Grid',l_Grid,k_Grid)
      Call ErrMem(LResult,'DPlot: Failed to allocate grid',0)
*
      If (Where.ne.'NUCLEI') Then
         Call Get_Grid(Dbl_mb(k_Grid),nGrid,
     &                 Ext_From_To(1,1),Ext_From_To(1,2),
     &                 No_Of_Spacings,Volume,Out_Unit,iProc,Where,
     &                 nAtom,Dbl_mb(k_xyz),What)
         If (What.eq.'CHARGES') nPoint = nGrid
         Call GA_Sync
      End If
*
      If (Where.ne.'GRID') Then
         Call dcopy(3*nAtom,Dbl_mb(k_xyz),1,Dbl_mb(k_Grid+3*Atom_Off),1)
         Call GA_Sync
      End If
*
*---- Read the info from the first MO file
      If (.not.movecs_read_header(File_Vec,Title_Vec,Basis_Name, 
     &   nBF,nSet,nMO,2))
     &   Call ErrQuit('DPlot: movecs_read_header failed',1)
      nSetTri = nSet*(nSet+1)/2
*---- Check, if the MO Vectors correspond to the specified basis set
      If (nBF.ne.nBF_AO)
     &   Call ErrQuit('DPlot: Basis set is not consistent with MOVec',0)
*
      If (Debug . and . iProc.eq.0) Then
         Write(LuOut,*)
         Write(LuOut,*)' Title_Vec  = ',Title_Vec(1:60)
         Write(LuOut,*)' Basis_Name = ',Basis_Name(1:60)
         Write(LuOut,*)' nBF        = ',nBF
         Write(LuOut,*)' nSet       = ',nSet
         Write(LuOut,*)' nMO        = ',nMO(1),nMO(2)
      End If
*
*---- Create global array for MOs and the density matrix
      Call GACrea(Geom,AO_Bas_Han,nBF,nBF,'Vec1',g_Vec(1),'atom')
      If (nSet.eq.2)
     &   Call GACrea(Geom,AO_Bas_Han,nBF,nBF,'Vec1',g_Vec(2),'atom')
      If (What.ne.'VIEW') Then
         Call GACrea(Geom,AO_Bas_Han,nBF,nBF,'Dns1',g_Dns(1),'atom')
         If (nSet.eq.2)
     &      Call GACrea(Geom,AO_Bas_Han,nBF,nBF,'Dns2',g_Dns(2),'atom')
      End If
*
      If (What.ne.'VIEW') Then
*------- Get the density matrix for the first orbital file
         Call Get_Dens(Geom,AO_Bas_Han,nSet,nBF,g_Vec,g_Dns,
     &                 Spin,File_Vec,nOrb,k_Orb,iProc)
      Else
*------- Read the orbital file
         LResult = MA_Push_Get(MT_Dbl,nBF,'Ene',l_Ene,k_Ene)
         Call ErrMem(LResult,'DPlot: Failed to allocate orb. en.',0)
         LResult = MA_Push_Get(MT_Dbl,nBF,'Occ',l_Occ,k_Occ)
         Call ErrMem(LResult,'DPlot: Failed to allocate occ. num.',0)
         Do iSet = 1, nSet
            If (.not.movecs_read(File_Vec,iSet,Dbl_mb(k_Occ),
     &         Dbl_mb(k_Ene),g_Vec(iSet)))
     &         Call ErrQuit('DPlot: movecs_read failed',0)
         End Do
         LResult = MA_Pop_Stack(l_Occ)
         Call ErrMem(LResult,'DPlot: Failed to deallocate occ. num.',0)
         LResult = MA_Pop_Stack(l_Ene)
         Call ErrMem(LResult,'DPlot: Failed to deallocate orb. en.',0)
      End If
*
*---- Compute the density matrix difference (if necessary). The check
*---- for the conflict with the VIEW option has been done before.
      If (File_Vec2.ne.' ') Then
*------- Read the info from the second orbital file
         If (.not.movecs_read_header(File_Vec2,Title_Vec2,Basis_Name2, 
     &      nBF2,nSet2,nMO2,2))
     &      Call ErrQuit('DPlot: movecs_read_header failed',2)
*------- Check, if the the orbital files match
         If (nBF2.ne.nBF . or . nSet2.ne.nSet)
     &      Call ErrQuit('DPlot: Orbital files do not match',0)
*------- Create global array for density matrix
         Call GACrea(Geom,AO_Bas_Han,nBF,nBF,'Dn1',g_Dns2(1),'atom')
         If (nSet.eq.2)
     &      Call GACrea(Geom,AO_Bas_Han,nBF,nBF,'Dn2',g_Dns2(2),'atom')
*------- Get the density matrix for the second orbital file
         Call Get_Dens(Geom,AO_Bas_Han,nSet,nBF,g_Vec,g_Dns2,
     &                 Spin,File_Vec2,nOrb,k_Orb,iProc)
*------- Form the final density
         Call GA_dAdd(1.d0,g_Dns(1),-1.d0,g_Dns2(1),g_Dns(1))
*------- Deallocate memory
         If (nSet.eq.2) Call GADest(g_Dns2(2))
         Call GADest(g_Dns2(1))
      End If
*
*---- Get the values of the density at the grid points
      LResult = MA_Push_Get(MT_Dbl,nPoint,'Vls',l_Vls,k_Vls)
      Call ErrMem(LResult,'DPlot: Failed to allocate values',0)
      Call GACrea(Geom,AO_Bas_Han,nPoint,1,'Vls',g_Vls,'column')
      If (What.ne.'CHARGES') Then
         Call Create_Contour(rtdb,Geom,AO_Bas_Han,nBF,nPoint,
     &                       nSet,nSetTri,g_Dns(1),g_Vec(1),
     &                       Dbl_mb(k_Grid),Dbl_mb(k_Vls),g_Vls,
     &                       What,Spin,Int_mb(k_Orb))
      Else
         LResult = MA_Push_Get(MT_Dbl,(nAtom+1)**2,'AMt',l_AMt,k_AMt)
         Call ErrMem(LResult,'C_C: Failed to allocate AMt',0)
         LResult = MA_Push_Get(MT_Dbl,nAtom+1,'BMt',l_BMt,k_BMt)
         Call ErrMem(LResult,'C_C: Failed to allocate BMt',0)
         LResult = MA_Push_Get(MT_Dbl,nAtom*nPoint,'Dst',l_Dst,k_Dst)
         Call ErrMem(LResult,'C_C: Failed to allocate Dst',0)
         LResult = MA_Push_Get(MT_Dbl,nAtom,'rq0',l_rq0,k_rq0)
         Call ErrMem(LResult,'C_C: Failed to allocate rq0',0)
*
         Call qdist(Dbl_mb(k_rq0),Dbl_mb(k_Dst),
     &              Dbl_mb(k_Grid),Dbl_mb(k_xyz),
     &              nPoint,nAtom)
         LResult = MA_Pop_Stack(l_rq0)
*
         Call Get_Charges(rtdb,Geom,AO_Bas_Han,nBF,nPoint,nAtom,
     &                   g_Dns(1),Dbl_mb(k_Grid),Dbl_mb(k_Vls),g_Vls,
     &                   Dbl_mb(k_xyz),Dbl_mb(k_Charge),Byte_mb(k_Tags),
     &                   Dbl_mb(k_AMt),Dbl_mb(k_BMt),Dbl_mb(k_Dst),
     &                   STD,Tot_Charge)
*
         LResult = MA_Pop_Stack(l_Dst)
         LResult = MA_Pop_Stack(l_BMt)
         LResult = MA_Pop_Stack(l_AMt)
      End If
*
*---- Print out the values of the density matrix to the output
      Call GA_Get(g_Vls,1,nPoint,1,1,Dbl_mb(k_Vls),nPoint)
      Call GA_Sync
      If (iProc.eq.0 . and . Where.ne.'NUCLEI') Then
         Sum = 0.d0
         Do i = 1, nGrid
            Sum = Sum + Dbl_mb(k_Vls-1+i)
            Write(Out_Unit,'(f15.10)')Dbl_mb(k_Vls-1+i)
         End Do
         AppCh = Sum*Volume
         If (What.eq.'DENSITY') Then
            Write(LuOut,*)
            Write(LuOut,'(a,f8.2)')'  Aproximate Charge    = ',AppCh
         End If
      End If
*
      If (iProc.eq.0 .and. (Where.ne.'GRID'.or.What.eq.'CHARGES')) Then
         Write(LuOut,*)
         If (What.eq.'CHARGES') Then
            Write(LuOut,*)'             Tag',
     &                    '         C o o r d i n a t e s',
     &                    '            Charges'
         Else
            Write(LuOut,*)'             Tag',
     &                    '         C o o r d i n a t e s',
     &                    '            Density'
         End If
         Write(LuOut,*)'             -------------------------------',
     &                 '-------------------------'
         Do iAtom = 1, nAtom
            iOff = (iAtom - 1)*3
            If (What.ne.'CHARGES')
     &         Dbl_mb(k_Charge-1+iAtom)=Dbl_mb(k_Vls+Atom_Off-1+iAtom)
            Write(LuOut,'(A16,3f12.6,3x,f15.10)')
     &           Byte_mb(k_Tags-1 + iAtom),
     &           (Dbl_mb(k_xyz+iOff+j),j=0,2),
     &           Dbl_mb(k_Charge-1+iAtom)
         End Do
         Write(LuOut,*)'             -------------------------------',
     &                 '-------------------------'
         If (What.eq.'CHARGES')
     &      Write(*,'(a,a,e8.2)')'              Standard deviation',
     &                         ' for the fitted charges = ',STD
         Write(LuOut,*)
      End If
*
*---- Deallocate memory
      LResult = MA_Pop_Stack(l_Vls)
      Call ErrMem(LResult,'DPlot: Failed to deallocate values',0)
      LResult = MA_Pop_Stack(l_Grid)
      Call ErrMem(LResult,'DPlot: Failed to deallocate grid',0)
      LResult = MA_Pop_Stack(l_xyz)
      Call ErrMem(LResult,'DPlot: Failed to deallocate xyz',0)
      LResult = MA_Pop_Stack(l_Charge)
      Call ErrMem(LResult,'DPlot: Failed to deallocate charge',0)
      LResult = MA_Pop_Stack(l_Tags)
      Call ErrMem(LResult,'DPlot: Failed to deallocate tags',0)
      If (nOrb.ne.999999) Then
         LResult = MA_Pop_Stack(l_Orb)
         Call ErrMem(LResult,'DPlot: Failed to deallocate Orb.',0)
      End If
*
*---- Destroy global arrays
      Call GADest(g_Vls)
      If (What.eq.'DENSITY') Then
         If (nSet.eq.2) Call GADest(g_Dns(2))
         Call GADest(g_Dns(1))
      End If
      If (nSet.eq.2) Call GADest(g_Vec(2))
      Call GADest(g_Vec(1))
*
*---- Close the output file
      If (iProc.eq.0 . and . Where.ne.'NUCLEI' . and .
     &    File_Out.ne.'OUTPUT') Close(Out_Unit)
*
*---- Pop context
      If (.not.context_pop('dplot')) 
     &     Call ErrQuit('DPlot: context_pop failed',0)
*
*---- Normal termination
      DPlot = .TRUE.
      Return
*
*---- Error exit
  111 Continue
      Call ErrQuit('Create_Contour: Failed to open output file',0)
      End
