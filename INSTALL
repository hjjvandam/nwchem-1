====================================================
$Id: INSTALL,v 1.33 2000-12-04 18:13:11 edo Exp $
----------------------------------------------------

GUIDE TO INSTALLING NWChem
---------------------------

This Guide gives general directions for compiling and installing
NWChem.  Please read through all sections pertaining to your
installation before beginning.  The sections for this guide are

   Soure Code Protection       -  required reading for everyone
   Basic Build Instructions    -  required reading for everyone   
   Alternative One-Time Build  -  only for one-time build, NOT
                                  recommended for site installations
   General Site Installation   -  tips to make NWChem useful for
                                  many users
   Building with MPI           -  alternative to the default TCGMSG build
   Building with Python        -  tips for including Python in your build
   Optimization Tips           -  how to compile NWChem to get better 
                                  performance
   Point of Contact Users      -  required reading for the site's point of
                                  contact (usually the one doing the build)
   Using a new version of GA   -  only for people that want to try out the
                                  latest version of GA
   Troubleshooting             -  if you have build problems

SOURCE CODE PROTECTION:
----------------------
Your User agreement states that you will protect the source code from
the general public.  You are not allowed to redistribute the software
in any form.  Please make sure the source code is protected by issuing
the following commands in the root NWChem directory (where this file
lives):

find . -exec chmod go-rwx "{}" ";"

After building the code using the Basic Build Instructions, the binary and 
data files may be placed in a public place for users.  See the General Site 
Installation instructions for more information about which files to move.


BASIC BUILD INSTRUCTIONS:
-------------------------

  DO THESE STEPS IN ORDER OR THE BUILD WILL FAIL
                                       ----

1) You must use GNU make with a version of at least 3.71. You can
   check this by seeing if make understands the "-v" flag.  Type

   % make -v

   If you get version information, you are using GNU make.  If you
   get anything else, you will need to figure out where the GNU make
   is on your system (it may possibly be call gmake or gnumake) or
   you will need to install it yourself (See the web site
   http://prep.ai.mit.edu/software/make/make.html.  It doesn't matter 
   what the GNU make is called (i.e., gmake, gnumake, etc., are
   all OK), just use this name instead of make in the instructions
   below.

2) You can set a few OPTIONAL environment variables to let NWChem know
   more about your system.  If you don't set the variables listed below,
   NWChem will pick "reasonable" defaults:

   SCRATCH_DEF_DIR              default scratch directory for 
                                temporary files, e.g.
    setenv SCRATCH_DEF_DIR "\'/scratch\'"

   PERMANENT_DEF_DIR            default permanent directory for 
                                files to keep, e.g.
    setenv PERMANENT_DEF_DIR "\'/home/user\'"

   NWCHEM_BASIS_LIBRARY_PATH    location of the basis set library (the
                                builder is responsible to make sure that
                                the library gets to the place), e.g.
    setenv NWCHEM_BASIS_LIBRARY_PATH "/u/nwchem/bin/library"

   LARGE_FILES                  needed to circumvent the 2 GB limit on IBM
                                (note that your system administrator must also
                                 enable large files in the file system), e.g.
    setenv LARGE_FILES TRUE

   JOBTIME_PATH                 directory where jobtime and jobtime.pl will
                                be placed by the builder on IBM SP, e.g.
    setenv JOBTIME_PATH /u/nwchem/bin

   LIB_DEFINES                  additional defines for the C preprocessor
                                (for both Fortran and C), e.g.
    setenv LIB_DEFINES -DDFLT_TOT_MEM=16777216
       This sets the dynamic memory available for NWChem to run,
       where the units are in doubles.

   Note: For general installations, it is often useful to add the
   environment variables described in this Guide to your shell script 
   (eg. your .cshrc file) so that you have a "record" of the environment
   that you built in and so you can perform the build again in the same
   manner.  You can either do this now and type "source .cshrc" or you 
   can wait until you have decided the options that you will always use.

3) Set the environment variable, NWCHEM_TOP, to the top directory 
   of the NWChem tree (where *this* file lives), e.g.

       % setenv NWCHEM_TOP /home/adrian/nwchem

   All the following directions assume that the current working
   directory is $NWCHEM_TOP/src so issue the command 
   "cd $NWCHEM_TOP/src"

4)  The currently supported platforms are:

    NWCHEM_TARGET  Platform       Checked    OS/Version    Precision 
    -----------------------------------------------------------------
    SOLARIS        Sun             ***      Solaris 2.X    double
    IBM            IBM RS/6000     ***      AIX 4.X        double
    DECOSF         DEC AXP         ***      Tru64 4.0-5.0  double
    SGI_N32        SGI 64 bit os   ***      IRIX 6.5       double 
                   using 32 ints			       
    SGITFP         SGI 64 bit os   ***      IRIX 6.5       double
    CRAY-T3D       Cray T3D                 UNICOS         single
    CRAY-T3E       Cray T3E        ***      UNICOS         single
    LAPI           IBM SP          ***      AIX/LAPI       double
    LINUX          Intel x86       ***      RedHat 5.2-6.2 double
                   PowerPC         **       RedHat 6.0     double
    LINUX64        Alpha           **       RedHat 6.2     double
    HPUX           HP              **       HPUX 11.0      double
    WIN32          Intel x86        *       Windows98/NT   double
    -----------------------------------------------------------------
   *Note: LAPI is now the primary way to use NWChem on an IBM SP system.
          If you don't have it get it from IBM.  Also, the environment
          variable LARGE_FILES should be set to YES during the compile to
          allow larger than 2 GB scratch files.


   Set the environment variable, NWCHEM_TARGET, to the symbolic name
   that matches your target platform, e.g.

       % setenv NWCHEM_TARGET LAPI

   Some systems also allow you to set NWCHEM_TARGET_CPU

    NWCHEM_TARGET  CPU type     NWCHEM_TARGET_CPU 
    ----------------------------------------------------------
    SGITFP         R8000           R8000
                   R10000          R10000
                   R12000          R12000
    SGI_N32        R8000           R8000
                   R10000          R10000
                   R12000          R12000
    LAPI* OR SP    Power 2         DO __NOT__ set NWCHEM_TARGET_CPU
                   Power 2 super   P2SC
                   604e chip       604
    LINUX          Intel Pentium   DO __NOT__ set NWCHEM_TARGET_CPU
                   Power Mac       POWERPC

    LINUX using the Portland Group Compiler, pgf77, is available.  
          However, NWChem development is under the GNU suite of
          compilers and so the pgf77 version is far from being
          optimal. Simply set your environment as above and 
          use "make FC=pgf77" in the instructions below and the 
          makefile system will take care of changing options/flags etc.  

5) Configure to build the modules you need.  As a first shot you might
   wnat to build everything (i.e. "all"), and if you start running out of 
   memory you can exclude modules.  You can choose one or more from

        Module      Description
        ---------------------------------------------------------
        all         Everything useful
        pnnl        Everything useful including python
        qm          All quantum mechanics modules
	md          MD only build 
        - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

          If you are familiar with building NWChem you 
          can be more selective with the modules you 
          really need.  If you are a novice at this then
          use only one of the four module names listed above!  
          Note that not all of the possible builds have been 
          tested using the individual modules listed below.

        - - - - - - - - - - - - - - - - - - - - - - - - -
	ddscf       RHF and UHF SCF energies
        nwdft       DFT energies
        gradients   SCF gradients
	dftgrad     DFT gradients
        stepper     Geometry optimization with stepper
        driver      Geometry optimization with driver
        moints      4-index
        rimp2       RI-MP2
        ccsd        CCSD & CCSD(T)
        property    Properties analysis
        pspw        Build the plane wave pseudo-potential code
        python      Build python interface to NWChem
        gapss       Build the periodic DFT code
        ---------------------------------------------------------

    To configure to build everything use the command

       % cd $NWCHEM_TOP/src
       % make nwchem_config NWCHEM_MODULES=all
    OR 
       % cd $NWCHEM_TOP/src
       % setenv NWCHEM_MODULES all
       % make nwchem_config

    Combinations of these tags are allowed.  For example,
       % setenv NWCHEM_MODULES "all gapss python" 
    will build the union of these three module identifiers.  

6) If your NWCHEM_TARGET is CRAY-T3E or CRAY-T3D, perform the
   precision conversion:

       % cd $NWCHEM_TOP/src
       % make dbl_to_sngl

   This is necessary only on machines where 64 bit is single 
   precision in order to match BLAS routine names to vendor-supplied 
   libraries (or if converting back from such source into the 
   standard of 64 bit is double precision).

7) Finally, compile and link:

       % make >& make.log

   This should install the executables and libraries into
   platform-specific subdirectories in the directory tree. For
   example, if the target platform equals LAPI then the following
   subdirectories are created:

	$NWCHEM_TOP/bin/LAPI          (executables)
        $NWCHEM_TOP/lib/LAPI          (libraries)

8) If you will be installing NWChem for general site use please also
   build the version info to help us determine exactly which version
   and patched version of NWChem you are using.  To do this you do the
   following: 

   cd $NWCHEM_TOP/src/util
   make version
   make
   cd $NWCHEM_TOP/src
   make link

   Note: Some compilers cannot build the full version file due to a
   lack of memory available to the compiler.  If the make in
   $NWCHEM_TOP/src/util fails try instead: 

   cd $NWCHEM_TOP/src/util
   make smallversion
   make
   cd $NWCHEM_TOP/src
   make link


ALTERNATIVE ONE-TIME BUILD:
---------------------------
   An alternative to steps 3 thru 7 is to specify all variables
   on the make command line.  This is recommended only for one
   time builds.  For instance, to build just the quantum mechanical
   codes on an IBM workstation

     make NWCHEM_TOP=/home/nwchem NWCHEM_TARGET=IBM NWCHEM_MODULES=qm

   Sometimes but infrequently the GNU make program fails with a single
   line specification.  If this happens try
     make NWCHEM_TOP=/home/nwchem NWCHEM_MODULES=qm nwchem_config
     make NWCHEM_TOP=/home/nwchem NWCHEM_TARGET=IBM 


GENERAL SITE INSTALLATION: 
--------------------------
   The build procedures outlined above will allow use of NWChem within
the NWChem directory structure.  The code will look for the basis set
library file in a default place within that directory structure.  To
install the code in a general, public place (e.g., /usr/local/NWChem)
you need to do the following:

A) determine the local storage path for the install files. (e.g.,
   /usr/local/NWChem).

B) make directories
   mkdir /usr/local/NWChem
   mkdir /usr/local/NWChem/bin
   mkdir /usr/local/NWChem/data

C) cp $NWCHEM_TOP/bin/${NWCHEM_TARGET}_${NWCHEM_TARGET_CPU}/nwchem /usr/local/NWChem/bin
*  cp $NWCHEM_TOP/bin/${NWCHEM_TARGET}_${NWCHEM_TARGET_CPU}/parallel /usr/local/NWChem/bin 
   cd /usr/local/NWChem/bin
   chmod 755 nwchem 
   chmod 755 parallel
   *Note: parallel does not exist for all builds.  To learn how to use
          parallel consult the on-line documentation at:
          http://www.emsl.pnl.gov/pub/docs/nwchem/doc/user/index.html
          or read the README files in $NWCHEM_TOP/src/tcgmsg    
   For SPs:
** cp $NWCHEM_TOP/bin/${NWCHEM_TARGET}_${NWCHEM_TARGET_CPU}/jobtime usr/local/NWChem/bin
   cp $NWCHEM_TOP/bin/${NWCHEM_TARGET}_${NWCHEM_TARGET_CPU}/jobtime.pl usr/local/NWChem/bin
   **Note: These scripts use perl to get information from LoadLeveller
           to get time information.  jobtime may need to be modified
           to find perl on your system.  If you can't get these to 
           work, timing information will not be available for your
           system.  However, jobs will still run.

D) cp $NWCHEM_TOP/src/basis/library /usr/local/NWChem/data
   cd $NWCHEM_TOP/src/nwadata
   cp -r * /usr/local/NWChem/data

E) Each user will need a .nwchemrc file to point to these default data
   files.  A global one could be put in /usr/local/NWChem/data and a
   symbolic link made in each users $HOME directory which is probably
   the best plan for new installs.  Users would have to issue the
   following command prior to using NWChem:
   ln -s /usr/local/NWChem/data/default.nwchemrc $HOME/.nwchemrc

F) Contents of the default.nwchemrc file based on the above
   information should be:

   nwchem_basis_library /usr/local/NWChem/data/library
   ffield amber
   amber_s /usr/local/NWChem/data/amber/amber_s/
   spce /usr/local/NWChem/data/solvents/spce.rst
   charmm_s /usr/local/NWChem/data/charmm/charmm_s/

   Of course users can copy this file instead of making the symbolic
   link described above and change these defaults at their discretion.


BUILDING WITH MPI:
------------------

   NWChem can be compiled to use MPI instead of TCGMSG for message
   passing on many systems.  Several environment variables need to be
   set to compile with NWChem.  These are:

     USE_MPI       -  set to "y" if you want to compile with MPI
     LIBMPI        -  name of the library with -l (eg. -lmpich)
     MPI_LIB       -  directory where the MPI library resides
     MPI_INCLUDE   -  directory where the MPI include files reside

   Below are some implementation specific settings:

     MPICH
        setenv MPI_LOC /usr/local #location of mpich
        setenv MPI_LIB $MPI_LOC/lib
        setenv MPI_INCLUDE $MPI_LOC/include
        setenv LIBMPI -lmpich
     MPIPro: 
        setenv LIBMPI "-lmpipro -lpthread"
     LAM 
        setenv MPI_LIB $LAMHOME/lib
        setenv LIBMPI "-lmpi -ltstdio -ltrillium -largs -lt"
        setenv MPI_INCLUDE $LAMHOME/include/
     MPICH/GM
      same as for MPICH, plus
        setenv GM_HOME /usr/local/gm-1.2/binary #location of GM software
        setenv GM_INCLUDE $GM_HOME/include
        setenv GM_LIB $GM_HOME/lib
        setenv ARMCI_NETWORK GM
        setenv GMPI_SHMEM_FILE /tmp/$USER.gm
     QSW (SC Alpha series)
        setenv LIBMPI "-lmpi -lelan"
        setenv ARMCI_NETWORK QUADRICS
        setenv LIBELAN_ALLOC_SIZE 530579456 # 506 mb 
        setenv LIBELAN_TPORT_BIGMSG 1024
        setenv LIBELAN_WAITTYPE 200 
     HPUX
        setenv MPI_INCLUDE /opt/mpi/include
        setenv LIBMPI -lmpi
        setenv MPI_LIB /opt/mpi/lib/pa20_64/
     HPUX64
        setenv MPI_INCLUDE /opt/mpi/include
        setenv MPI_LIB /opt/mpi/lib/pa1.1/
        setenv LIBMPI -lmpi
     SGI_N32
        setenv LIBMPI -lmpi
     WIN32/NT-MPICH
        set MPI_INCLUDE=c:\PROGRA~1\ARGONN~1\MPICHN~1.4\SDK\INCLUDE
        set MPI_LIB=c:\PROGRA~1\ARGONN~1\MPICHN~1.4\SDK\lib
        set NWCHEM_EXTRA_LIBS=%MPI_LIB%\mpich.lib
     WIN32/WMPI1.3
       set MPI_INCLUDE=c:\WMPI1.3\INCLUDE
       set MPI_LIB=c:\WMPI1.3\LIB\CONSOLE
       set NWCHEM_EXTRA_LIBS=%MPI_LIB%\cvwmpi.lib

   To run with MPI, "parallel" should not be used.  The way 
   we usually run nwchem under MPI are the following:
     1) using mpirun:

     mpirun -np 8 $NWCHEM_TOP/bin/${NWCHEM_TARGET}_${NWCHEM_TARGET_CPU}/nwchem h2o.nw

     2) If you have all nodes connected via shared memory 
     and you have installed the ch_shmem version of MPICH, 
     you can do

     $NWCHEM_TOP/bin/${NWCHEM_TARGET}_${NWCHEM_TARGET_CPU}/nwchem -np 8 h2o.nw


BUILDING WITH PYTHON:
---------------------

   Python programs may be embedded into the NWChem input and 
   used to control the execution of NWChem.  The following are
   the instructions for building NWChem with the Python interface
   and for running jobs which include Python.

   1)  To build with Python, you first need to have Python 
       available on your machine.  If you don't have it, you can 
       download it at http://www.python.org, following their
       instructions for installation and testing.  We have tested 
       NWChem with Python versions 1.5.1, 1.5.2, 1.6 and 2.0.

   2)  Make sure that "python" is part of the definition of 
       NWCHEM_MODULES before starting the build.  For example,

       % setenv NWCHEM_MODULES "all python" 

   3)  Set the environment variables PYTHONHOME and PYTHONVERSION.
       For example,
 
       % setenv PYTHONHOME /usr/local/Python-1.5.1
       % setenv PYTHONVERSION 1.5

   4)  Proceed with the rest of the build as described in the
       Basic Build Instructions.

   To run with Python, make sure that PYTHONHOME is set as 
   mentioned above.  You will also need to set PYTHONPATH to
   include any modules that you are using in your input.  Then,
   run NWChem as usual.  Examples of Python within NWChem are
   in the $NWCHEM_TOP/QA/tests/pyqa and $NWCHEM_TOP/contrib/python
   directories.


OPTIMIZATION TIPS:
------------------ 

   The basic build tries to optimize NWChem for most systems and
   most operating systems.  Therefore, possible optimizations have
   been excluded.  IF you want to further optimize NWChem, first be
   warned that we will NOT be able to provide support for this
   activity.  Also, if you have problems with your optimized code,
   we will not be able to support you since we, in general, cannot
   reproduce your environment.  That being said, here are some tips
   for optimizing the code.

   In general, NWChem uses its own basic linear algebra subroutines
   (BLAS).  These are generally not as fast as vendor supplied BLAS
   or other fast BLAS libraries.  For instance, we have found the
   Automatically Tuned Linear Algebra Software (ATLAS) to be faster
   on several platforms (http://www.netlib.org/atlas/).  To include
   faster BLAS routines, set the environment variable BLASOPT before
   building the code.  For example, with ATLAS

   % setenv BLASOPT "-L/usr/local/ATLAS -lf77blas -latlas"

   If you are interested in "tweaking" compile options, the 
   appropriate place to do this is the $NWCHEM_TOP/config/makefile.h
   file.  First find the appropriate section for your $NWCHEM_TARGET
   and then edit the appropriate options.  Again, please note that
   changes to the makefile are NOT supported and you are on your own
   in this endeavor!

   If you are running on an IBM SP, you might want to consider
   optimizing the value of -bmaxdata in the makefile.h file.  This
   option specifies the maximum amount of space to reserve for the
   program stack segment.


POINT OF CONTACT USERS: 
---------------------- 
If you are the NWChem point-of-contact for a given site please build 
and use the java tool in $NWCHEM_TOP/contrib/javasupport.  The
java class files and images are already built and available at the
binary down load site.  If you have access to the source code you also
have access to the binary down load site.  You need java 1.1.1 or
higher to use the tool.  This form formats information and allows the
attachment of input and output files via a simple browsing mechanism.
Use of this tool will greatly facilitate any support you may need for
using NWChem.


USING A NEW VERSION OF GA:
--------------------------
Occasionally, bugs in NWChem are associated with the Global Array tools
(http://www.emsl.pnl.gov:2080/docs/global/ga.html).  To compile the latest
version of GA, following these steps:

   1) Get a new version of GA at the above URL.

   2) Untar it into a temporary directory (for this example, lets call it
      /tmp) using the instructions on the GA download web page.

   3) % cd $NWCHEM_TOP/src/tools

   4) % mv GNUmakefile ../GNUmakefile.tools

   5) % rm -r *   (Make sure you are in the tools directory before doing this!)

   6) Copy the new GA files into the tools directory.  For example,
      % cp -R /tmp/g/* .

   7) % mv ../GNUmakefile.tools GNUmakefile

   8) If all of your environmental variables are set, start with step 5 of
      the Basic Build Instructions.  If they are not set, start with step 2.


TROUBLESHOOTING:
----------------

Here are some tips for "common" problems when compiling NWChem.  If you have
read through the installation guide and followed the directions carefully
and you are still having problems, please send your make.log file to
nwchem-support@emsl.pnl.gov along with information about your machine and
the environment variables that you have set.  If you have modified any of
the files in the NWChem source tree, we need to know this, but do not
expect that we will be able to help you.

   1) Check the "Known Bugs" and "FAQ" page at our web site
      http://www.emsl.pnl.gov/pub/docs/nwchem

   2) "make nwchem_config" gives an error message like 
      "Not a recognized command".

      You probably don't have GNU make.  Go back to step 1 in the Basic
      Build Instructions.

   3) I get an error about clock skew and some directories are not compiled.

      Some platforms have problems where the parallel make sees time lags.
      This can be solved by several different methods:

      A) Perform multiple make commands at the $NWCHEM_TOP/src level.

      B) If you know which directories need to be compiled, just type 
         "make" in those directories.  The type "make link" in the
         $NWCHEM_TOP/src directory.

      C) Another solution is to edit the $NWCHEM_TOP/src/config/makefile.h 
         file, find the section relating to your $NWCHEM_TARGET, and edit 
         the MAKEFILES line so that the number after -j is a "1".

         i.e. MAKEFLAGS = -j 1 --no-print-directory

   4) I accidently performed the "make dbl_to_sngl" command and now
      the code won't compile.

      You will need to run "make sngl_to_dbl" in the $NWCHEM_TOP/src
      directory.  You will also need to type "make realclean" and start
      over at step 5 in the Basic Build Instructions.

   5) I accidently built for the wrong $NWCHEM_TARGET and need to start
      over.

      You will need to clean up all of the files associated with the
      previous build.  So, type "make realclean" in the $NWCHEM_TOP/src
      directory.  Then start at step 4 in the Basic Build Instructions,
      setting the environment variables with the values that you want.

   6) I am getting a "Word too long" errors when compiling.

      This sometimes happens when the system shell being used is ksh.
      The solution is to
      
      A) Edit the $NWCHEM_TOP/src/config/makelib.h file, and take out
         the lines that have LOCKFILE in them.

      B) Then, edit the $NWCHEM_TOP/src/config/makefile.h file, find the 
         section relating to your $NWCHEM_TARGET, and edit 
         the MAKEFILES line so that the number after -j is a "1".

         i.e. MAKEFLAGS = -j 1 --no-print-directory
