#!/bin/env python
'''
Reorder the atoms in an OpenBabel generated PDB file.

When OpenBabel adds Hydrogen atoms to a PDB file the generated atoms
are added at the end of the list of atoms. In practice this causes
major problems. As there are only 4 digits for residue numbers all
reasonable MD codes have residue numbers wrap around for large proteins.
An internal counter is used to associate unique residue numbers with 
each residue. This trick only works if all atoms for a given residue
are kept together. If the heavy atoms of a residue are separated from
the Hydrogen atoms it will appear as if there are two residues instead
of one (with both missing many atoms).

This script takes a PDB file as generated by OpenBabel and moves the
Hydrogen atoms to reunite them with the heavy atoms of the same residue.
The atoms are not renumbered (for large PDB files atom numbers are not
even going to be unique and most tools will tend to ignore them anyway).
'''
def read_pdb_file(filename):
    '''
    Read the contents of the PDB file and return a list of lines.
    '''
    fp = open(filename,'r')
    pdb = fp.readlines()
    fp.close()
    return pdb

def split_pdb(pdb):
    '''
    Given the contents of the PDB file separate it into four parts:
    - preamble: all stuff that appears before the first atom
    - atoms: all non-Hydrogen atoms
    - hatom: all Hydrogen atoms (labeled "H" by OpenBabel)
    - postamble: all stuff after the Hydrogen atoms
    '''
    preamble  = []
    atoms     = []
    hatoms    = []
    postamble = []
    pos_type  = "preamble"
    for line in pdb:
        if   line[0:6] == "ATOM  ":
            pos_type = "atoms"
            if line[12:16] == " H  ":
                hatoms.append(line)
            else:
                atoms.append(line)
        elif line[0:6] == "HETATM":
            pos_type = "atoms"
            if line[12:16] == " H  ":
                hatoms.append(line)
            else:
                atoms.append(line)
        elif line[0:3] == "TER":
            pos_type = "atoms"
            atoms.append(line)
        else:
            if   pos_type == "preamble":
                preamble.append(line)
            elif pos_type == "atoms" or pos_type == "postamble":
                pos_type = "postamble"
                postamble.append(line)
    return (preamble,atoms,hatoms,postamble)

def gen_pdb(preamble,atoms,hatoms,postamble):
    '''
    Given the various parts stitch atoms together in the right order.

    All atoms with the same
    - residue name
    - chain name
    - residue number
    are considered to be part of the same residue. 
    The list of heavy atoms is parsed until the residue changes, 
    then the list of Hydrogen atoms parsed as long as the Hydrogen
    atoms belong to same residue.
    '''
    pdb = []
    for line in preamble:
        pdb.append(line)
    natoms  = len(atoms)
    nhatoms = len(hatoms)
    iatom   = 0
    ihatom  = 0
    # old residue
    ores    = atoms[0][17:26]
    while iatom < natoms or ihatom < nhatoms:
        if iatom < natoms:
            cres  = atoms[iatom][17:26]
        else:
            cres  = "end"
        if ihatom < nhatoms:
            chres = hatoms[ihatom][17:26]
        else:
            chres = "end"
        if cres == ores:
            pdb.append(atoms[iatom])
            iatom += 1
        elif chres == ores:
            pdb.append(hatoms[ihatom])
            ihatom += 1
        elif atoms[iatom][0:3] == "TER":
            pdb.append(atoms[iatom])
            iatom += 1
            ores = atoms[iatom][17:26]
        else:
            if iatom < natoms:
                pdb.append(atoms[iatom])
                iatom += 1
                ores = cres
    for line in postamble:
        pdb.append(line)
    return pdb

def write_pdb(filename,pdb):
    '''
    Given the name of the output file and the list of PDB lines 
    write the data to the PDB file.
    '''
    fp = open(filename,'w')
    for line in pdb:
        fp.write(line)
    fp.close()

def parse_arguments():
    '''
    Parse command line arguments.
    '''
    from argparse import ArgumentParser
    prs = ArgumentParser()
    prs.add_argument("input",help="the input PDB file")
    prs.add_argument("output",help="the output PDB file")
    args = prs.parse_args()
    return args

def execute_with_arguments(args):
    '''
    Execute the code with the command line arguments given.
    '''
    inputfile  = args.input
    outputfile = args.output
    inputdata = read_pdb_file(inputfile)
    (preamble,atoms,hatoms,postamble) = split_pdb(inputdata)
    outputdata = gen_pdb(preamble,atoms,hatoms,postamble)
    write_pdb(outputfile,outputdata)

if __name__ == "__main__":
    execute_with_arguments(parse_arguments())
