#!/bin/bash
#
# Doxygen run script for NWChem
#
# Doxygen is a source code documentation tool. It interprets and analyses
# the source code and writes a substantial chunk of documentation. The 
# documentation can be enriched by providing more details in comment lines.
# Doxygen is the defacto standard approach to documenting C-code. 
#
function usage()
{
   echo
   echo " Usage: $0 [-h] [-g] [-t] [-m] [-u] [-v]"
   echo
   cat <<EOF
 This script runs doxygen building a particular version of the NWChem source
 code documentation. The command can be run in any directory and produces the
 documentation in the directory ./doxydocs .

 The command line flags are:

 -h Show this information

 -g Generate the full NWChem documentation, including various graphs such
    as call trees, include trees, caller trees, etc. This is most useful
    when information about how the code is put together is required.
    This level of documentation takes the longest to generate and requires
    the most disk space (about 80 minutes and generating around 4 GB of HTML).

 -t (Default) Generate text only NWChem documentation. No graphs are generated
    but headers and comments are included. This level of documentation is
    useful when the information about how to use a module is required.
    (Takes about 15 minutes and generates 300 MB of HTML).

 -m Generate NWChem manpages. This is similar to the text only documentation
    except that this documentation is formatted as UNIX manpages. This 
    documentation is relatively compact (takes about 10 minutes and generates
    around 200 MB).

 -u Update the Doxygen configurations files to a newer version of Doxygen.

 -v Print the version information from the configuration files, Doxygen,
    and the GraphViz dot program.

EOF
}
path="`dirname \"$0\"`"
task="text"
if [ $# -gt 1 ] ; then
  usage
  exit 1
fi
while [ $# -ge 1 ] ; do
  case $1 in
    -h) task="help" ; shift 1 ;;
    -g) task="graph" ; shift 1 ;;
    -t) task="text" ; shift 1 ;;
    -m) task="man" ; shift 1 ;;
    -u) task="update" ; shift 1 ;;
    -v) task="version" ; shift 1 ;;
    *)  task="usage" ; shift 1 ;;
  esac
done
if [ "$task" == "help" ] ; then
  usage
  exit 0
elif [ "$task" == "graph" ] ; then
  date
  doxygen "$path/doxygen.rc"
  date
elif [ "$task" == "text" ] ; then
  date
  doxygen "$path/doxygen-text.rc"
  date
elif [ "$task" == "man" ] ; then
  date
  doxygen "$path/doxygen-manpage.rc"
  date
elif [ "$task" == "update" ] ; then
  doxygen -u "$path/doxygen.rc"
  doxygen -u "$path/doxygen-text.rc"
  doxygen -u "$path/doxygen-manpage.rc"
elif [ "$task" == "version" ] ; then
  grep Doxyfile "$path"/*.rc
  echo -n "Doxygen "; doxygen --version
  dot -V 2>&1 cat
else
  usage
  exit 1
fi
exit 0
